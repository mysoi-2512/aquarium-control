
Aquarium_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800100  0000124c  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000124c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800282  00800282  00001462  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aff  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da8  00000000  00000000  0000316f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e85  00000000  00000000  00003f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c2  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e86  00000000  00000000  00005796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000661c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e4       	ldi	r30, 0x4C	; 76
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 38       	cpi	r26, 0x82	; 130
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e8       	ldi	r26, 0x82	; 130
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 38       	cpi	r26, 0x8E	; 142
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c7 02 	call	0x58e	; 0x58e <main>
      9e:	0c 94 24 09 	jmp	0x1248	; 0x1248 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ds18b20_init>:
#include "../Uart/uart_utils.h" // ??m b?o include file UART

// H‡m kh?i t?o ch‚n k?t n?i DS18B20
void ds18b20_init(uint8_t pin) {
	// Thi?t l?p ch‚n l‡m output (ban ??u) vÅEkÈo lÍn m?c cao
	DDRD |= (1 << pin);
      a6:	4a b1       	in	r20, 0x0a	; 10
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	b9 01       	movw	r22, r18
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <ds18b20_init+0xe>
      b0:	66 0f       	add	r22, r22
      b2:	77 1f       	adc	r23, r23
      b4:	8a 95       	dec	r24
      b6:	e2 f7       	brpl	.-8      	; 0xb0 <ds18b20_init+0xa>
      b8:	cb 01       	movw	r24, r22
      ba:	46 2b       	or	r20, r22
      bc:	4a b9       	out	0x0a, r20	; 10
	PORTD |= (1 << pin);
      be:	9b b1       	in	r25, 0x0b	; 11
      c0:	89 2b       	or	r24, r25
      c2:	8b b9       	out	0x0b, r24	; 11
      c4:	08 95       	ret

000000c6 <ds18b20_reset>:
}

// G?i xung reset vÅEki?m tra ph?n h?i presence pulse
uint8_t ds18b20_reset(void) {
      c6:	cf 93       	push	r28
	uint8_t presence = 0;

	printf("Bat dau reset DS18B20...\r\n");
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>

	// KÈo ch‚n xu?ng m?c th?p trong ˙ë nh?t 480 us
	DDRD |= (1 << DS18B20_PIN);
      d0:	8a b1       	in	r24, 0x0a	; 10
      d2:	84 60       	ori	r24, 0x04	; 4
      d4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DS18B20_PIN);
      d6:	8b b1       	in	r24, 0x0b	; 11
      d8:	8b 7f       	andi	r24, 0xFB	; 251
      da:	8b b9       	out	0x0b, r24	; 11
	printf("Keo chan xuong...\r\n");
      dc:	8a e1       	ldi	r24, 0x1A	; 26
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e4:	8f ec       	ldi	r24, 0xCF	; 207
      e6:	97 e0       	ldi	r25, 0x07	; 7
      e8:	01 97       	sbiw	r24, 0x01	; 1
      ea:	f1 f7       	brne	.-4      	; 0xe8 <ds18b20_reset+0x22>
      ec:	00 c0       	rjmp	.+0      	; 0xee <ds18b20_reset+0x28>
      ee:	00 00       	nop
	_delay_us(500);

	// Th? ch‚n vÅEchuy?n sang input ?? nghe presence pulse
	DDRD &= ~(1 << DS18B20_PIN);
      f0:	8a b1       	in	r24, 0x0a	; 10
      f2:	8b 7f       	andi	r24, 0xFB	; 251
      f4:	8a b9       	out	0x0a, r24	; 10
	printf("Tha chan...\r\n");
      f6:	8d e2       	ldi	r24, 0x2D	; 45
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>
      fe:	87 e1       	ldi	r24, 0x17	; 23
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	01 97       	sbiw	r24, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <ds18b20_reset+0x3c>
     106:	00 c0       	rjmp	.+0      	; 0x108 <ds18b20_reset+0x42>
     108:	00 00       	nop
	_delay_us(70);

	// ??c giÅEtr? ch‚n (presence pulse s? kÈo nÅExu?ng th?p trong 60-240 us)
	if (!(PIND & (1 << DS18B20_PIN))) {
     10a:	4a 99       	sbic	0x09, 2	; 9
     10c:	06 c0       	rjmp	.+12     	; 0x11a <ds18b20_reset+0x54>
		printf("Phat hien presence pulse!\r\n");
     10e:	8a e3       	ldi	r24, 0x3A	; 58
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>
		presence = 1;
     116:	c1 e0       	ldi	r28, 0x01	; 1
     118:	05 c0       	rjmp	.+10     	; 0x124 <ds18b20_reset+0x5e>
	} else {
		printf("KHONG phat hien presence pulse!\r\n");
     11a:	85 e5       	ldi	r24, 0x55	; 85
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>
	PORTD |= (1 << pin);
}

// G?i xung reset vÅEki?m tra ph?n h?i presence pulse
uint8_t ds18b20_reset(void) {
	uint8_t presence = 0;
     122:	c0 e0       	ldi	r28, 0x00	; 0
     124:	8f ec       	ldi	r24, 0xCF	; 207
     126:	97 e0       	ldi	r25, 0x07	; 7
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <ds18b20_reset+0x62>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <ds18b20_reset+0x68>
     12e:	00 00       	nop
	} else {
		printf("KHONG phat hien presence pulse!\r\n");
	}
	_delay_us(500);

	printf("Ket thuc reset, presence = %d\r\n", presence);
     130:	1f 92       	push	r1
     132:	cf 93       	push	r28
     134:	86 e7       	ldi	r24, 0x76	; 118
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	9f 93       	push	r25
     13a:	8f 93       	push	r24
     13c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
	return presence;
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
}
     148:	8c 2f       	mov	r24, r28
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <ds18b20_write_bit>:

// G?i m?t bit trÍn bus 1-Wire
void ds18b20_write_bit(uint8_t bit) {
	// KÈo ch‚n xu?ng m?c th?p
	DDRD |= (1 << DS18B20_PIN);
     14e:	9a b1       	in	r25, 0x0a	; 10
     150:	94 60       	ori	r25, 0x04	; 4
     152:	9a b9       	out	0x0a, r25	; 10
	PORTD &= ~(1 << DS18B20_PIN);
     154:	9b b1       	in	r25, 0x0b	; 11
     156:	9b 7f       	andi	r25, 0xFB	; 251
     158:	9b b9       	out	0x0b, r25	; 11
     15a:	9a e0       	ldi	r25, 0x0A	; 10
     15c:	9a 95       	dec	r25
     15e:	f1 f7       	brne	.-4      	; 0x15c <ds18b20_write_bit+0xe>
     160:	00 c0       	rjmp	.+0      	; 0x162 <ds18b20_write_bit+0x14>
	_delay_us(2); // Gi? th?p

	// Ghi bit
	if (bit) {
     162:	88 23       	and	r24, r24
     164:	19 f0       	breq	.+6      	; 0x16c <ds18b20_write_bit+0x1e>
		DDRD &= ~(1 << DS18B20_PIN); // Th? ch‚n (cho m?c cao)
     166:	8a b1       	in	r24, 0x0a	; 10
     168:	8b 7f       	andi	r24, 0xFB	; 251
     16a:	8a b9       	out	0x0a, r24	; 10
     16c:	8f ee       	ldi	r24, 0xEF	; 239
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <ds18b20_write_bit+0x22>
     174:	00 c0       	rjmp	.+0      	; 0x176 <ds18b20_write_bit+0x28>
     176:	00 00       	nop
	}
	_delay_us(60); // Th?i gian slot
	DDRD &= ~(1 << DS18B20_PIN); // ??m b?o th? ch‚n sau khe th?i gian
     178:	8a b1       	in	r24, 0x0a	; 10
     17a:	8b 7f       	andi	r24, 0xFB	; 251
     17c:	8a b9       	out	0x0a, r24	; 10
     17e:	08 95       	ret

00000180 <ds18b20_read_bit>:
// ??c m?t bit t? bus 1-Wire
uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;

	// KÈo ch‚n xu?ng m?c th?p
	DDRD |= (1 << DS18B20_PIN);
     180:	8a b1       	in	r24, 0x0a	; 10
     182:	84 60       	ori	r24, 0x04	; 4
     184:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DS18B20_PIN);
     186:	8b b1       	in	r24, 0x0b	; 11
     188:	8b 7f       	andi	r24, 0xFB	; 251
     18a:	8b b9       	out	0x0b, r24	; 11
     18c:	8a e0       	ldi	r24, 0x0A	; 10
     18e:	8a 95       	dec	r24
     190:	f1 f7       	brne	.-4      	; 0x18e <ds18b20_read_bit+0xe>
     192:	00 c0       	rjmp	.+0      	; 0x194 <ds18b20_read_bit+0x14>
	_delay_us(2);

	// Th? ch‚n ?? b?t ??u khe ??c
	DDRD &= ~(1 << DS18B20_PIN);
     194:	8a b1       	in	r24, 0x0a	; 10
     196:	8b 7f       	andi	r24, 0xFB	; 251
     198:	8a b9       	out	0x0a, r24	; 10
     19a:	90 e5       	ldi	r25, 0x50	; 80
     19c:	9a 95       	dec	r25
     19e:	f1 f7       	brne	.-4      	; 0x19c <ds18b20_read_bit+0x1c>
	_delay_us(15);

	// ??c giÅEtr? bit
	if (PIND & (1 << DS18B20_PIN)) {
     1a0:	4a 99       	sbic	0x09, 2	; 9
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <ds18b20_read_bit+0x28>
	DDRD &= ~(1 << DS18B20_PIN); // ??m b?o th? ch‚n sau khe th?i gian
}

// ??c m?t bit t? bus 1-Wire
uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <ds18b20_read_bit+0x2a>
	DDRD &= ~(1 << DS18B20_PIN);
	_delay_us(15);

	// ??c giÅEtr? bit
	if (PIND & (1 << DS18B20_PIN)) {
		bit = 1;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 ef       	ldi	r25, 0xF0	; 240
     1ac:	9a 95       	dec	r25
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <ds18b20_read_bit+0x2c>
	}
	_delay_us(45); // K?t th˙c khe ??c

	return bit;
}
     1b0:	08 95       	ret

000001b2 <ds18b20_write_byte>:

// G?i m?t byte d? li?u trÍn bus 1-Wire
void ds18b20_write_byte(uint8_t data) {
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++) {
     1b8:	c0 e0       	ldi	r28, 0x00	; 0
     1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <ds18b20_write_byte+0x22>
		ds18b20_write_bit(data & (1 << i));
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0c 2e       	mov	r0, r28
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <ds18b20_write_byte+0x16>
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	0a 94       	dec	r0
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <ds18b20_write_byte+0x12>
     1cc:	8d 23       	and	r24, r29
     1ce:	0e 94 a7 00 	call	0x14e	; 0x14e <ds18b20_write_bit>
	return bit;
}

// G?i m?t byte d? li?u trÍn bus 1-Wire
void ds18b20_write_byte(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
     1d2:	cf 5f       	subi	r28, 0xFF	; 255
     1d4:	c8 30       	cpi	r28, 0x08	; 8
     1d6:	90 f3       	brcs	.-28     	; 0x1bc <ds18b20_write_byte+0xa>
		ds18b20_write_bit(data & (1 << i));
	}
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <ds18b20_read_byte>:

// ??c m?t byte d? li?u t? bus 1-Wire
uint8_t ds18b20_read_byte(void) {
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
     1e2:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

// ??c m?t byte d? li?u t? bus 1-Wire
uint8_t ds18b20_read_byte(void) {
	uint8_t data = 0;
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
     1e6:	0e c0       	rjmp	.+28     	; 0x204 <ds18b20_read_byte+0x26>
		if (ds18b20_read_bit()) {
     1e8:	0e 94 c0 00 	call	0x180	; 0x180 <ds18b20_read_bit>
     1ec:	88 23       	and	r24, r24
     1ee:	49 f0       	breq	.+18     	; 0x202 <ds18b20_read_byte+0x24>
			data |= (1 << i);
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0c 2e       	mov	r0, r28
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <ds18b20_read_byte+0x1e>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	0a 94       	dec	r0
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <ds18b20_read_byte+0x1a>
     200:	d8 2b       	or	r29, r24
}

// ??c m?t byte d? li?u t? bus 1-Wire
uint8_t ds18b20_read_byte(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
     202:	cf 5f       	subi	r28, 0xFF	; 255
     204:	c8 30       	cpi	r28, 0x08	; 8
     206:	80 f3       	brcs	.-32     	; 0x1e8 <ds18b20_read_byte+0xa>
		if (ds18b20_read_bit()) {
			data |= (1 << i);
		}
	}
	return data;
}
     208:	8d 2f       	mov	r24, r29
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <ds18b20_request_temperature>:

// YÍu c?u c?m bi?n b?t ??u ?o nhi?t ??
void ds18b20_request_temperature(void) {
	ds18b20_reset();
     210:	0e 94 63 00 	call	0xc6	; 0xc6 <ds18b20_reset>
	ds18b20_write_byte(0xCC); // Skip ROM (gi? s? ch? cÅEm?t thi?t b?)
     214:	8c ec       	ldi	r24, 0xCC	; 204
     216:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>
	ds18b20_write_byte(0x44); // Convert T
     21a:	84 e4       	ldi	r24, 0x44	; 68
     21c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	8e e9       	ldi	r24, 0x9E	; 158
     224:	94 e2       	ldi	r25, 0x24	; 36
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <ds18b20_request_temperature+0x16>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <ds18b20_request_temperature+0x20>
     230:	00 00       	nop
     232:	08 95       	ret

00000234 <ds18b20_read_temperature>:
	_delay_ms(750); // Ch? quÅEtrÅEh ?o ho‡n t?t (cÅEth? c?n ?i?u ch?nh)
}

// ??c nhi?t ?? t? c?m bi?n vÅEtr? v? giÅEtr? float (?? C)
float ds18b20_read_temperature(void) {
     234:	cf 93       	push	r28
	uint8_t temp_low, temp_high;
	int16_t raw_temp;
	float temperature;

	ds18b20_reset();
     236:	0e 94 63 00 	call	0xc6	; 0xc6 <ds18b20_reset>
	ds18b20_write_byte(0xCC); // Skip ROM
     23a:	8c ec       	ldi	r24, 0xCC	; 204
     23c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>
	ds18b20_write_byte(0xBE); // Read Scratchpad
     240:	8e eb       	ldi	r24, 0xBE	; 190
     242:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>

	temp_low = ds18b20_read_byte();
     246:	0e 94 ef 00 	call	0x1de	; 0x1de <ds18b20_read_byte>
     24a:	c8 2f       	mov	r28, r24
	temp_high = ds18b20_read_byte();
     24c:	0e 94 ef 00 	call	0x1de	; 0x1de <ds18b20_read_byte>

	raw_temp = (temp_high << 8) | temp_low;
     250:	68 2f       	mov	r22, r24
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	76 2f       	mov	r23, r22
     256:	66 27       	eor	r22, r22
     258:	6c 2b       	or	r22, r28

	// Nhi?t ?? ???c bi?u di?n d??i d?ng s? d?u ph?y ??ng 12-bit (cÅEd?u)
	if (raw_temp & 0x8000) { // Nhi?t ?? ‚m
     25a:	77 23       	and	r23, r23
     25c:	8c f4       	brge	.+34     	; 0x280 <ds18b20_read_temperature+0x4c>
		raw_temp = (~raw_temp) + 1;
     25e:	71 95       	neg	r23
     260:	61 95       	neg	r22
     262:	71 09       	sbc	r23, r1
		temperature = -((float)raw_temp / 16.0);
     264:	07 2e       	mov	r0, r23
     266:	00 0c       	add	r0, r0
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatsisf>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e8       	ldi	r20, 0x80	; 128
     276:	5d e3       	ldi	r21, 0x3D	; 61
     278:	0e 94 30 05 	call	0xa60	; 0xa60 <__mulsf3>
     27c:	90 58       	subi	r25, 0x80	; 128
     27e:	0c c0       	rjmp	.+24     	; 0x298 <ds18b20_read_temperature+0x64>
	} else { // Nhi?t ?? d??ng
		temperature = (float)raw_temp / 16.0;
     280:	07 2e       	mov	r0, r23
     282:	00 0c       	add	r0, r0
     284:	88 0b       	sbc	r24, r24
     286:	99 0b       	sbc	r25, r25
     288:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatsisf>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e8       	ldi	r20, 0x80	; 128
     292:	5d e3       	ldi	r21, 0x3D	; 61
     294:	0e 94 30 05 	call	0xa60	; 0xa60 <__mulsf3>
	}

	return temperature;
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <i2c_init>:
#include <compat/twi.h> // Th? vi?n TWI/I2C

// H‡m kh?i t?o giao ti?p I2C
void i2c_init(void) {
	// Thi?t l?p t?c ?? bit (SCL frequency)
	TWBR = ((F_CPU / I2C_SCL_FREQUENCY) - 16) / 2;
     29c:	88 e4       	ldi	r24, 0x48	; 72
     29e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	// B?t TWI
	TWCR = (1 << TWEN);
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2a8:	08 95       	ret

000002aa <i2c_start>:
}

// H‡m b?t ??u truy?n I2C (g?i START condition)
uint8_t i2c_start(uint8_t address) {
	// G?i START condition
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
     2aa:	94 ea       	ldi	r25, 0xA4	; 164
     2ac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho START condition ???c g?i
	while (!(TWCR & (1 << TWINT)));
     2b0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b4:	99 23       	and	r25, r25
     2b6:	e4 f7       	brge	.-8      	; 0x2b0 <i2c_start+0x6>

	// Ki?m tra tr?ng th·i
	if ((TWSR & 0xF8) != TW_START && (TWSR & 0xF8) != TW_REP_START) {
     2b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2bc:	98 7f       	andi	r25, 0xF8	; 248
     2be:	98 30       	cpi	r25, 0x08	; 8
     2c0:	29 f0       	breq	.+10     	; 0x2cc <i2c_start+0x22>
     2c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2c6:	98 7f       	andi	r25, 0xF8	; 248
     2c8:	90 31       	cpi	r25, 0x10	; 16
     2ca:	89 f4       	brne	.+34     	; 0x2ee <i2c_start+0x44>
		return 1; // L?i: START condition khÙng th‡nh cÙng
	}

	// G?i ??a ch? thi?t b? vÅEbit ghi (0)
	TWDR = (address << 1) | TW_WRITE;
     2cc:	88 0f       	add	r24, r24
     2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// XÛa c? TWINT ?? b?t ??u g?i ??a ch?
	TWCR = (1 << TWEN) | (1 << TWINT);
     2d2:	84 e8       	ldi	r24, 0x84	; 132
     2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho ??a ch? ???c g?i vÅEnh?n ACK
	while (!(TWCR & (1 << TWINT)));
     2d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2dc:	88 23       	and	r24, r24
     2de:	e4 f7       	brge	.-8      	; 0x2d8 <i2c_start+0x2e>

	// Ki?m tra tr?ng th·i ACK
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) {
     2e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2e4:	88 7f       	andi	r24, 0xF8	; 248
     2e6:	88 31       	cpi	r24, 0x18	; 24
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <i2c_start+0x48>
		return 2; // L?i: KhÙng nh?n ???c ACK t? slave
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	08 95       	ret
	// Ch? cho START condition ???c g?i
	while (!(TWCR & (1 << TWINT)));

	// Ki?m tra tr?ng th·i
	if ((TWSR & 0xF8) != TW_START && (TWSR & 0xF8) != TW_REP_START) {
		return 1; // L?i: START condition khÙng th‡nh cÙng
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret
	// Ki?m tra tr?ng th·i ACK
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) {
		return 2; // L?i: KhÙng nh?n ???c ACK t? slave
	}

	return 0; // Th‡nh cÙng
     2f2:	80 e0       	ldi	r24, 0x00	; 0
}
     2f4:	08 95       	ret

000002f6 <i2c_write>:

// H‡m g?i m?t byte d? li?u qua I2C
uint8_t i2c_write(uint8_t data) {
	// ??t d? li?u v‡o thanh ghi TWDR
	TWDR = data;
     2f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// XÛa c? TWINT ?? b?t ??u g?i d? li?u
	TWCR = (1 << TWEN) | (1 << TWINT);
     2fa:	84 e8       	ldi	r24, 0x84	; 132
     2fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho d? li?u ???c g?i vÅEnh?n ACK
	while (!(TWCR & (1 << TWINT)));
     300:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     304:	88 23       	and	r24, r24
     306:	e4 f7       	brge	.-8      	; 0x300 <i2c_write+0xa>

	// Ki?m tra tr?ng th·i ACK
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) {
     308:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     30c:	88 7f       	andi	r24, 0xF8	; 248
     30e:	88 32       	cpi	r24, 0x28	; 40
     310:	11 f0       	breq	.+4      	; 0x316 <i2c_write+0x20>
		return 1; // L?i: KhÙng nh?n ???c ACK t? slave
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	08 95       	ret
	}

	return 0; // Th‡nh cÙng
     316:	80 e0       	ldi	r24, 0x00	; 0
}
     318:	08 95       	ret

0000031a <i2c_stop>:

// H‡m d?ng truy?n I2C (g?i STOP condition)
void i2c_stop(void) {
	// G?i STOP condition
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
     31a:	84 e9       	ldi	r24, 0x94	; 148
     31c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho STOP condition ???c g?i (th?c t? cÅEth? khÙng c?n ch?)
	while (TWCR & (1 << TWSTO));
     320:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     324:	84 fd       	sbrc	r24, 4
     326:	fc cf       	rjmp	.-8      	; 0x320 <i2c_stop+0x6>
}
     328:	08 95       	ret

0000032a <lcd_send_nibble_i2c>:
#include <util/delay.h>
#include <string.h>
#include <stdio.h>
#include <inttypes.h>

static void lcd_send_nibble_i2c(uint8_t data) {
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
    uint8_t i2c_data;

    // G?i 4 bits cao + c·c ch‚n ?i?u khi?n
    i2c_data = (data & 0xF0) | LCD_BL_PIN; // Gi? backlight luÙn b?t (cÅEth? ?i?u ch?nh)
     32e:	c8 2f       	mov	r28, r24
     330:	c0 7f       	andi	r28, 0xF0	; 240
     332:	dc 2f       	mov	r29, r28
     334:	d8 60       	ori	r29, 0x08	; 8

    // Enable pulse
    i2c_start(LCD_I2C_ADDR);
     336:	87 e2       	ldi	r24, 0x27	; 39
     338:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_start>
    i2c_write(i2c_data | LCD_EN_PIN);
     33c:	8c 2f       	mov	r24, r28
     33e:	8c 60       	ori	r24, 0x0C	; 12
     340:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     344:	8a e1       	ldi	r24, 0x1A	; 26
     346:	8a 95       	dec	r24
     348:	f1 f7       	brne	.-4      	; 0x346 <lcd_send_nibble_i2c+0x1c>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_send_nibble_i2c+0x22>
    _delay_us(5); // T?ng th?i gian tr?
    i2c_write(i2c_data & ~LCD_EN_PIN);
     34c:	8d 2f       	mov	r24, r29
     34e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
    i2c_stop();
     352:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c_stop>
     356:	87 ec       	ldi	r24, 0xC7	; 199
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_send_nibble_i2c+0x30>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_send_nibble_i2c+0x36>
     360:	00 00       	nop
    _delay_us(50); // T?ng th?i gian tr?
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <lcd_send_byte_i2c>:

void lcd_send_byte_i2c(uint8_t data, uint8_t rs) {
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	18 2f       	mov	r17, r24
     370:	c6 2f       	mov	r28, r22
    uint8_t i2c_data_high, i2c_data_low;

    i2c_start(LCD_I2C_ADDR); // B?t ??u giao d?ch I2C
     372:	87 e2       	ldi	r24, 0x27	; 39
     374:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_start>

    // G?i 4 bits cao
    i2c_data_high = (data & 0xF0) | LCD_BL_PIN | (rs ? LCD_RS_PIN : 0) | LCD_EN_PIN;
     378:	d1 e0       	ldi	r29, 0x01	; 1
     37a:	c1 11       	cpse	r28, r1
     37c:	01 c0       	rjmp	.+2      	; 0x380 <lcd_send_byte_i2c+0x18>
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	c1 2f       	mov	r28, r17
     382:	c0 7f       	andi	r28, 0xF0	; 240
     384:	c8 60       	ori	r28, 0x08	; 8
     386:	cd 2b       	or	r28, r29
     388:	c4 60       	ori	r28, 0x04	; 4
    i2c_write(i2c_data_high);
     38a:	8c 2f       	mov	r24, r28
     38c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
    //_delay_us(5);
    i2c_data_high &= ~LCD_EN_PIN;
    i2c_write(i2c_data_high);
     390:	8c 2f       	mov	r24, r28
     392:	89 7f       	andi	r24, 0xF9	; 249
     394:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
    //_delay_us(5);

    // G?i 4 bits th?p
    i2c_data_low = ((data << 4) & 0xF0) | LCD_BL_PIN | (rs ? LCD_RS_PIN : 0) | LCD_EN_PIN;
     398:	20 e1       	ldi	r18, 0x10	; 16
     39a:	12 9f       	mul	r17, r18
     39c:	c0 01       	movw	r24, r0
     39e:	11 24       	eor	r1, r1
     3a0:	88 60       	ori	r24, 0x08	; 8
     3a2:	d8 2b       	or	r29, r24
     3a4:	d4 60       	ori	r29, 0x04	; 4
    i2c_write(i2c_data_low);
     3a6:	8d 2f       	mov	r24, r29
     3a8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
   // _delay_us(5);
    i2c_data_low &= ~LCD_EN_PIN;
    i2c_write(i2c_data_low);
     3ac:	8d 2f       	mov	r24, r29
     3ae:	8b 7f       	andi	r24, 0xFB	; 251
     3b0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>

    i2c_stop(); // K?t th˙c giao d?ch I2C
     3b4:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c_stop>
   // _delay_us(100);
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	08 95       	ret

000003c0 <lcd_send_char>:
    lcd_clear();
    lcd_send_byte_i2c(0x06, 0); // Ch? ?? d?ch con tr? sang ph?i sau m?i k˝ t?
}

void lcd_send_char(char data) {
    lcd_send_byte_i2c(data, 1); // rs = 1 cho d? li?u (k˝ t?)
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
     3c6:	08 95       	ret

000003c8 <lcd_send_string>:
}

void lcd_send_string(const char *str) {
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
    while (*str) {
     3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <lcd_send_string+0xe>
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
     3d0:	21 96       	adiw	r28, 0x01	; 1
     3d2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_send_char>
void lcd_send_char(char data) {
    lcd_send_byte_i2c(data, 1); // rs = 1 cho d? li?u (k˝ t?)
}

void lcd_send_string(const char *str) {
    while (*str) {
     3d6:	88 81       	ld	r24, Y
     3d8:	81 11       	cpse	r24, r1
     3da:	fa cf       	rjmp	.-12     	; 0x3d0 <lcd_send_string+0x8>
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
    }
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <lcd_set_cursor>:
}


void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t address;
    switch (row) {
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	11 f0       	breq	.+4      	; 0x3ea <lcd_set_cursor+0x8>
        case 0: address = 0x00; break;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <lcd_set_cursor+0xa>
        case 1: address = 0x40; break;
     3ea:	80 e4       	ldi	r24, 0x40	; 64
        default: address = 0x00; break;
    }
    lcd_send_byte_i2c(0x80 | (address + col), 0); // 0x80 lÅEl?nh ??t ??a ch? DDRAM
     3ec:	86 0f       	add	r24, r22
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
     3f6:	08 95       	ret

000003f8 <lcd_display_status>:
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
    }
}

void lcd_display_status(const SystemState* state) {
     3f8:	8f 92       	push	r8
     3fa:	9f 92       	push	r9
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	a1 97       	sbiw	r28, 0x21	; 33
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	8c 01       	movw	r16, r24
	
	lcd_set_cursor(0, 0);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_set_cursor>
	char line1[16];
	uint8_t temp_int = (uint8_t)state->temperature;
     426:	f8 01       	movw	r30, r16
     428:	80 80       	ld	r8, Z
     42a:	91 80       	ldd	r9, Z+1	; 0x01
     42c:	a2 80       	ldd	r10, Z+2	; 0x02
     42e:	b3 80       	ldd	r11, Z+3	; 0x03
     430:	c5 01       	movw	r24, r10
     432:	b4 01       	movw	r22, r8
     434:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fixunssfsi>
     438:	f6 2e       	mov	r15, r22
	uint8_t temp_frac = (uint8_t)((state->temperature - temp_int) * 10);
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatsisf>
     444:	9b 01       	movw	r18, r22
     446:	ac 01       	movw	r20, r24
     448:	c5 01       	movw	r24, r10
     44a:	b4 01       	movw	r22, r8
     44c:	0e 94 01 04 	call	0x802	; 0x802 <__subsf3>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e2       	ldi	r20, 0x20	; 32
     456:	51 e4       	ldi	r21, 0x41	; 65
     458:	0e 94 30 05 	call	0xa60	; 0xa60 <__mulsf3>
     45c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fixunssfsi>

	snprintf(line1, sizeof(line1), "Temp: %d.%d C", temp_int, temp_frac);	
     460:	1f 92       	push	r1
     462:	6f 93       	push	r22
     464:	1f 92       	push	r1
     466:	ff 92       	push	r15
     468:	8e e9       	ldi	r24, 0x9E	; 158
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	1f 92       	push	r1
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	8f 93       	push	r24
     476:	ae 01       	movw	r20, r28
     478:	4f 5f       	subi	r20, 0xFF	; 255
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	7a 01       	movw	r14, r20
     47e:	5f 93       	push	r21
     480:	4f 93       	push	r20
     482:	0e 94 00 06 	call	0xc00	; 0xc00 <snprintf>
	lcd_send_string(line1);
     486:	c7 01       	movw	r24, r14
     488:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_send_string>


	lcd_set_cursor(1, 0);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_set_cursor>
	char line2[17];
	snprintf(line2, sizeof(line2), "Pump:%s PWM:%3d%%",
	state->pump_status ? "ON " : "OFF", state->pump_pwm_value);
     494:	f8 01       	movw	r30, r16
     496:	25 81       	ldd	r18, Z+5	; 0x05
     498:	84 81       	ldd	r24, Z+4	; 0x04
	lcd_send_string(line1);


	lcd_set_cursor(1, 0);
	char line2[17];
	snprintf(line2, sizeof(line2), "Pump:%s PWM:%3d%%",
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	88 23       	and	r24, r24
     4a6:	19 f0       	breq	.+6      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4a8:	86 e9       	ldi	r24, 0x96	; 150
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4ae:	8a e9       	ldi	r24, 0x9A	; 154
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	1f 92       	push	r1
     4b4:	2f 93       	push	r18
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	8c ea       	ldi	r24, 0xAC	; 172
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	1f 92       	push	r1
     4c4:	81 e1       	ldi	r24, 0x11	; 17
     4c6:	8f 93       	push	r24
     4c8:	8e 01       	movw	r16, r28
     4ca:	0f 5e       	subi	r16, 0xEF	; 239
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	1f 93       	push	r17
     4d0:	0f 93       	push	r16
     4d2:	0e 94 00 06 	call	0xc00	; 0xc00 <snprintf>
	state->pump_status ? "ON " : "OFF", state->pump_pwm_value);
	lcd_send_string(line2);
     4d6:	c8 01       	movw	r24, r16
     4d8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_send_string>
}
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	a1 96       	adiw	r28, 0x21	; 33
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	9f 90       	pop	r9
     504:	8f 90       	pop	r8
     506:	08 95       	ret

00000508 <lcd_clear>:
    }
    lcd_send_byte_i2c(0x80 | (address + col), 0); // 0x80 lÅEl?nh ??t ??a ch? DDRAM
}

void lcd_clear(void) {
    lcd_send_byte_i2c(0x01, 0); // 0x01 lÅEl?nh xÛa m‡n hÅEh
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     510:	8f e1       	ldi	r24, 0x1F	; 31
     512:	9e e4       	ldi	r25, 0x4E	; 78
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <lcd_clear+0xc>
     518:	00 c0       	rjmp	.+0      	; 0x51a <lcd_clear+0x12>
     51a:	00 00       	nop
     51c:	08 95       	ret

0000051e <lcd_init>:
    i2c_stop(); // K?t th˙c giao d?ch I2C
   // _delay_us(100);
}

void lcd_init(void) {
    i2c_init(); // Kh?i t?o giao ti?p I2C
     51e:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_init>
     522:	2f ef       	ldi	r18, 0xFF	; 255
     524:	81 ee       	ldi	r24, 0xE1	; 225
     526:	94 e0       	ldi	r25, 0x04	; 4
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	80 40       	sbci	r24, 0x00	; 0
     52c:	90 40       	sbci	r25, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <lcd_init+0xa>
     530:	00 c0       	rjmp	.+0      	; 0x532 <lcd_init+0x14>
     532:	00 00       	nop
    _delay_ms(100); // T?ng th?i gian tr?

    // Kh?i t?o LCD ? ch? ?? 4-bit
    lcd_send_nibble_i2c(0x03 << 4);
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53a:	8f ec       	ldi	r24, 0xCF	; 207
     53c:	97 e0       	ldi	r25, 0x07	; 7
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <lcd_init+0x20>
     542:	00 c0       	rjmp	.+0      	; 0x544 <lcd_init+0x26>
     544:	00 00       	nop
    _delay_us(500); // T?ng th?i gian tr?
    lcd_send_nibble_i2c(0x03 << 4);
     546:	80 e3       	ldi	r24, 0x30	; 48
     548:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>
     54c:	8f ec       	ldi	r24, 0xCF	; 207
     54e:	97 e0       	ldi	r25, 0x07	; 7
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd_init+0x32>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd_init+0x38>
     556:	00 00       	nop
    _delay_us(500); // T?ng th?i gian tr?
    lcd_send_nibble_i2c(0x03 << 4);
     558:	80 e3       	ldi	r24, 0x30	; 48
     55a:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>
     55e:	8f e8       	ldi	r24, 0x8F	; 143
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <lcd_init+0x44>
     566:	00 c0       	rjmp	.+0      	; 0x568 <lcd_init+0x4a>
     568:	00 00       	nop
    _delay_us(100);  // T?ng th?i gian tr?
    lcd_send_nibble_i2c(0x02 << 4);
     56a:	80 e2       	ldi	r24, 0x20	; 32
     56c:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>

    // C‡i ??t c·c ch?c n?ng LCD
    lcd_send_byte_i2c(0x28, 0); // 4-bit, 2 dÚng, font 5x8
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	88 e2       	ldi	r24, 0x28	; 40
     574:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
    lcd_send_byte_i2c(0x0C, 0); // B?t hi?n th?, t?t con tr?, t?t nh?p nh·y con tr?
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	8c e0       	ldi	r24, 0x0C	; 12
     57c:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
    lcd_clear();
     580:	0e 94 84 02 	call	0x508	; 0x508 <lcd_clear>
    lcd_send_byte_i2c(0x06, 0); // Ch? ?? d?ch con tr? sang ph?i sau m?i k˝ t?
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
     58c:	08 95       	ret

0000058e <main>:
#define UBRR_VALUE F_CPU / 16 / BAUD - 1

SystemState systemState;

int main(void) {
  USART_Init(UBRR_VALUE); // Kh?i t?o UART
     58e:	87 e6       	ldi	r24, 0x67	; 103
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Init>
  printf("Hello from Arduino!\r\n");
     596:	8e eb       	ldi	r24, 0xBE	; 190
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>
  printf("Chuong trinh doc nhiet do DS18B20, hien thi LCD (I2C) va UART (AVR)\r\n");
     59e:	83 ed       	ldi	r24, 0xD3	; 211
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>

  i2c_init();
     5a6:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_init>
	ds18b20_init(DS18B20_PIN);
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	0e 94 53 00 	call	0xa6	; 0xa6 <ds18b20_init>
  lcd_init();
     5b0:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_init>
  pwm_init();
     5b4:	0e 94 25 03 	call	0x64a	; 0x64a <pwm_init>
// 	pwm_update_based_on_temp(systemState.temperature, &systemState);
// 	lcd_display_status(&systemState);
//   }
	
  while (1) {
    if (ds18b20_reset()) {
     5b8:	0e 94 63 00 	call	0xc6	; 0xc6 <ds18b20_reset>
     5bc:	88 23       	and	r24, r24
     5be:	49 f1       	breq	.+82     	; 0x612 <main+0x84>
		
        ds18b20_request_temperature();
     5c0:	0e 94 08 01 	call	0x210	; 0x210 <ds18b20_request_temperature>
		
		systemState.temperature = ds18b20_read_temperature();		
     5c4:	0e 94 1a 01 	call	0x234	; 0x234 <ds18b20_read_temperature>
     5c8:	c2 e8       	ldi	r28, 0x82	; 130
     5ca:	d2 e0       	ldi	r29, 0x02	; 2
     5cc:	68 83       	st	Y, r22
     5ce:	79 83       	std	Y+1, r23	; 0x01
     5d0:	8a 83       	std	Y+2, r24	; 0x02
     5d2:	9b 83       	std	Y+3, r25	; 0x03
		
		pwm_update_based_on_temp(systemState.temperature, &systemState);
     5d4:	ae 01       	movw	r20, r28
     5d6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <pwm_update_based_on_temp>
	
		lcd_display_status(&systemState);
     5da:	ce 01       	movw	r24, r28
     5dc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_display_status>

        printf("Reset Result: 1\r\n"); 
     5e0:	88 e1       	ldi	r24, 0x18	; 24
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>

        printf("Nhiet do: %.1f *C\r\n", systemState.temperature);
     5e8:	88 81       	ld	r24, Y
     5ea:	99 81       	ldd	r25, Y+1	; 0x01
     5ec:	2a 81       	ldd	r18, Y+2	; 0x02
     5ee:	3b 81       	ldd	r19, Y+3	; 0x03
     5f0:	3f 93       	push	r19
     5f2:	2f 93       	push	r18
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	89 e2       	ldi	r24, 0x29	; 41
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	12 c0       	rjmp	.+36     	; 0x636 <main+0xa8>
    } else {
        printf("Reset Result: 0\r\n"); 
     612:	8d e3       	ldi	r24, 0x3D	; 61
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>

        lcd_clear();
     61a:	0e 94 84 02 	call	0x508	; 0x508 <lcd_clear>
        lcd_set_cursor(0, 0);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_set_cursor>
        lcd_send_string("Sensor Error");
     626:	8e e4       	ldi	r24, 0x4E	; 78
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_send_string>

        printf("Loi: Khong tim thay cam bien DS18B20\r\n");
     62e:	8b e5       	ldi	r24, 0x5B	; 91
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0e 94 d0 05 	call	0xba0	; 0xba0 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	87 ea       	ldi	r24, 0xA7	; 167
     63a:	91 e6       	ldi	r25, 0x61	; 97
     63c:	21 50       	subi	r18, 0x01	; 1
     63e:	80 40       	sbci	r24, 0x00	; 0
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	e1 f7       	brne	.-8      	; 0x63c <main+0xae>
     644:	00 c0       	rjmp	.+0      	; 0x646 <main+0xb8>
     646:	00 00       	nop
     648:	b7 cf       	rjmp	.-146    	; 0x5b8 <main+0x2a>

0000064a <pwm_init>:
#define PWM_FREQ 1000
#define TOP 249	// TOP = OCR0A

void pwm_init()
{
	PWM_DDR |= (1 << PWM_PIN) | (1 << LEDBLUE_PIN) | (1 << LEDRED_PIN);  // PD5, PD4, PD7 = output
     64a:	8a b1       	in	r24, 0x0a	; 10
     64c:	80 6b       	ori	r24, 0xB0	; 176
     64e:	8a b9       	out	0x0a, r24	; 10
	COOLER_DDR |= (1 << COOLER_PIN);  // PB0 output control relay
     650:	84 b1       	in	r24, 0x04	; 4
     652:	81 60       	ori	r24, 0x01	; 1
     654:	84 b9       	out	0x04, r24	; 4

	TCCR0A = (1 << WGM01) | (1 << WGM00);
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02);
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	85 bd       	out	0x25, r24	; 37
	OCR0A = TOP;
     65e:	89 ef       	ldi	r24, 0xF9	; 249
     660:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     662:	18 bc       	out	0x28, r1	; 40
     664:	08 95       	ret

00000666 <pwm_set_duty>:
}

void pwm_set_duty(uint8_t duty)
{
     666:	48 2f       	mov	r20, r24
	if (duty > 100) duty = 100;
     668:	85 36       	cpi	r24, 0x65	; 101
     66a:	08 f0       	brcs	.+2      	; 0x66e <pwm_set_duty+0x8>
     66c:	44 e6       	ldi	r20, 0x64	; 100

	uint8_t ocr_value = ((uint16_t)(OCR0A + 1) * duty) / 100;
     66e:	87 b5       	in	r24, 0x27	; 39
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	48 9f       	mul	r20, r24
     676:	90 01       	movw	r18, r0
     678:	49 9f       	mul	r20, r25
     67a:	30 0d       	add	r19, r0
     67c:	11 24       	eor	r1, r1
     67e:	36 95       	lsr	r19
     680:	27 95       	ror	r18
     682:	36 95       	lsr	r19
     684:	27 95       	ror	r18
     686:	ab e7       	ldi	r26, 0x7B	; 123
     688:	b4 e1       	ldi	r27, 0x14	; 20
     68a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__umulhisi3>
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
	OCR0B = ocr_value;
     692:	88 bd       	out	0x28, r24	; 40

	if (duty > 0) {
     694:	44 23       	and	r20, r20
     696:	61 f0       	breq	.+24     	; 0x6b0 <pwm_set_duty+0x4a>
		
		TCCR0A |= (1 << COM0B1);		
     698:	84 b5       	in	r24, 0x24	; 36
     69a:	80 62       	ori	r24, 0x20	; 32
     69c:	84 bd       	out	0x24, r24	; 36
		TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00); // prescaler = 64		
     69e:	8b e0       	ldi	r24, 0x0B	; 11
     6a0:	85 bd       	out	0x25, r24	; 37
		PORTD |= (1 << LEDRED_PIN);   // PD7 ON
     6a2:	8b b1       	in	r24, 0x0b	; 11
     6a4:	80 68       	ori	r24, 0x80	; 128
     6a6:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << LEDBLUE_PIN);  // PD4 OFF
     6a8:	8b b1       	in	r24, 0x0b	; 11
     6aa:	8f 7e       	andi	r24, 0xEF	; 239
     6ac:	8b b9       	out	0x0b, r24	; 11
     6ae:	08 95       	ret
		} else {
		
		TCCR0A &= ~(1 << COM0B1);		
     6b0:	84 b5       	in	r24, 0x24	; 36
     6b2:	8f 7d       	andi	r24, 0xDF	; 223
     6b4:	84 bd       	out	0x24, r24	; 36
		TCCR0B = (1 << WGM02);		
     6b6:	88 e0       	ldi	r24, 0x08	; 8
     6b8:	85 bd       	out	0x25, r24	; 37
		PORTD |= (1 << LEDBLUE_PIN);   // PD4 ON
     6ba:	8b b1       	in	r24, 0x0b	; 11
     6bc:	80 61       	ori	r24, 0x10	; 16
     6be:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << LEDRED_PIN);  // PD7 OFF
     6c0:	8b b1       	in	r24, 0x0b	; 11
     6c2:	8f 77       	andi	r24, 0x7F	; 127
     6c4:	8b b9       	out	0x0b, r24	; 11
     6c6:	08 95       	ret

000006c8 <pwm_update_based_on_temp>:
	}
}

void pwm_update_based_on_temp(float temp, SystemState* state)
{
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
     6da:	8a 01       	movw	r16, r20
	uint8_t duty = 0;

	// Mapping temp to duty
	if (temp >= 29.0) duty = 100;
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	48 ee       	ldi	r20, 0xE8	; 232
     6e2:	51 e4       	ldi	r21, 0x41	; 65
     6e4:	0e 94 2b 05 	call	0xa56	; 0xa56 <__gesf2>
     6e8:	88 23       	and	r24, r24
     6ea:	b4 f4       	brge	.+44     	; 0x718 <pwm_update_based_on_temp+0x50>
	else if (temp >= 28.0) duty = 75;
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 ee       	ldi	r20, 0xE0	; 224
     6f2:	51 e4       	ldi	r21, 0x41	; 65
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	0e 94 2b 05 	call	0xa56	; 0xa56 <__gesf2>
     6fc:	88 23       	and	r24, r24
     6fe:	74 f4       	brge	.+28     	; 0x71c <pwm_update_based_on_temp+0x54>
	else if (temp >= 27.0) duty = 30;
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	48 ed       	ldi	r20, 0xD8	; 216
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	c7 01       	movw	r24, r14
     70a:	b6 01       	movw	r22, r12
     70c:	0e 94 2b 05 	call	0xa56	; 0xa56 <__gesf2>
     710:	88 23       	and	r24, r24
     712:	34 f0       	brlt	.+12     	; 0x720 <pwm_update_based_on_temp+0x58>
     714:	ce e1       	ldi	r28, 0x1E	; 30
     716:	05 c0       	rjmp	.+10     	; 0x722 <pwm_update_based_on_temp+0x5a>
void pwm_update_based_on_temp(float temp, SystemState* state)
{
	uint8_t duty = 0;

	// Mapping temp to duty
	if (temp >= 29.0) duty = 100;
     718:	c4 e6       	ldi	r28, 0x64	; 100
     71a:	03 c0       	rjmp	.+6      	; 0x722 <pwm_update_based_on_temp+0x5a>
	else if (temp >= 28.0) duty = 75;
     71c:	cb e4       	ldi	r28, 0x4B	; 75
     71e:	01 c0       	rjmp	.+2      	; 0x722 <pwm_update_based_on_temp+0x5a>
	else if (temp >= 27.0) duty = 30;
	else duty = 0;
     720:	c0 e0       	ldi	r28, 0x00	; 0

	// Set duty for PWM
	pwm_set_duty(duty);
     722:	8c 2f       	mov	r24, r28
     724:	0e 94 33 03 	call	0x666	; 0x666 <pwm_set_duty>

	// Update pump status in state
	state->pump_pwm_value = duty;  
     728:	f8 01       	movw	r30, r16
     72a:	c5 83       	std	Z+5, r28	; 0x05
	state->pump_status = (duty > 0) ? 1 : 0;  
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	c1 11       	cpse	r28, r1
     730:	01 c0       	rjmp	.+2      	; 0x734 <pwm_update_based_on_temp+0x6c>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	f8 01       	movw	r30, r16
     736:	84 83       	std	Z+4, r24	; 0x04

	// ?i?u khi?n relay
	if (duty > 0) {
     738:	cc 23       	and	r28, r28
     73a:	21 f0       	breq	.+8      	; 0x744 <pwm_update_based_on_temp+0x7c>
		COOLER_PORT |= (1 << COOLER_PIN);  // B?t relay
     73c:	85 b1       	in	r24, 0x05	; 5
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	85 b9       	out	0x05, r24	; 5
     742:	03 c0       	rjmp	.+6      	; 0x74a <pwm_update_based_on_temp+0x82>
		} else {
		COOLER_PORT &= ~(1 << COOLER_PIN);  // T?t relay
     744:	85 b1       	in	r24, 0x05	; 5
     746:	8e 7f       	andi	r24, 0xFE	; 254
     748:	85 b9       	out	0x05, r24	; 5
	}
}
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
#include <stdarg.h>

void USART_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
     75a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     75e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3 << UCSZ00);
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     76e:	08 95       	ret

00000770 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
     770:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     774:	95 ff       	sbrs	r25, 5
     776:	fc cf       	rjmp	.-8      	; 0x770 <USART_Transmit>
	UDR0 = data;
     778:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     77c:	08 95       	ret

0000077e <USART_PutString>:
}

void USART_PutString(char *str) {
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != 0; i++) {
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	d0 e0       	ldi	r29, 0x00	; 0
     78c:	03 c0       	rjmp	.+6      	; 0x794 <USART_PutString+0x16>
		USART_Transmit(str[i]);
     78e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_Transmit>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART_PutString(char *str) {
	for (int i = 0; str[i] != 0; i++) {
     792:	21 96       	adiw	r28, 0x01	; 1
     794:	f8 01       	movw	r30, r16
     796:	ec 0f       	add	r30, r28
     798:	fd 1f       	adc	r31, r29
     79a:	80 81       	ld	r24, Z
     79c:	81 11       	cpse	r24, r1
     79e:	f7 cf       	rjmp	.-18     	; 0x78e <USART_PutString+0x10>
		USART_Transmit(str[i]);
	}
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <printf>:

int printf(const char *fmt, ...) {
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	c0 58       	subi	r28, 0x80	; 128
     7b8:	d1 09       	sbc	r29, r1
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	9e 01       	movw	r18, r28
     7c6:	29 57       	subi	r18, 0x79	; 121
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	f9 01       	movw	r30, r18
     7cc:	41 91       	ld	r20, Z+
     7ce:	51 91       	ld	r21, Z+
     7d0:	9f 01       	movw	r18, r30
	char buffer[128];
	va_list args;
	va_start(args, fmt);
	int len = vsnprintf(buffer, sizeof(buffer), fmt, args);
     7d2:	60 e8       	ldi	r22, 0x80	; 128
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	0e 94 30 06 	call	0xc60	; 0xc60 <vsnprintf>
     7de:	8c 01       	movw	r16, r24
	va_end(args);
	USART_PutString(buffer);
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 bf 03 	call	0x77e	; 0x77e <USART_PutString>
	return len;
     7e8:	c8 01       	movw	r24, r16
     7ea:	c0 58       	subi	r28, 0x80	; 128
     7ec:	df 4f       	sbci	r29, 0xFF	; 255
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <__subsf3>:
     802:	50 58       	subi	r21, 0x80	; 128

00000804 <__addsf3>:
     804:	bb 27       	eor	r27, r27
     806:	aa 27       	eor	r26, r26
     808:	0e 94 19 04 	call	0x832	; 0x832 <__addsf3x>
     80c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_round>
     810:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscA>
     814:	38 f0       	brcs	.+14     	; 0x824 <__addsf3+0x20>
     816:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_pscB>
     81a:	20 f0       	brcs	.+8      	; 0x824 <__addsf3+0x20>
     81c:	39 f4       	brne	.+14     	; 0x82c <__addsf3+0x28>
     81e:	9f 3f       	cpi	r25, 0xFF	; 255
     820:	19 f4       	brne	.+6      	; 0x828 <__addsf3+0x24>
     822:	26 f4       	brtc	.+8      	; 0x82c <__addsf3+0x28>
     824:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_nan>
     828:	0e f4       	brtc	.+2      	; 0x82c <__addsf3+0x28>
     82a:	e0 95       	com	r30
     82c:	e7 fb       	bst	r30, 7
     82e:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_inf>

00000832 <__addsf3x>:
     832:	e9 2f       	mov	r30, r25
     834:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_split3>
     838:	58 f3       	brcs	.-42     	; 0x810 <__addsf3+0xc>
     83a:	ba 17       	cp	r27, r26
     83c:	62 07       	cpc	r22, r18
     83e:	73 07       	cpc	r23, r19
     840:	84 07       	cpc	r24, r20
     842:	95 07       	cpc	r25, r21
     844:	20 f0       	brcs	.+8      	; 0x84e <__addsf3x+0x1c>
     846:	79 f4       	brne	.+30     	; 0x866 <__addsf3x+0x34>
     848:	a6 f5       	brtc	.+104    	; 0x8b2 <__addsf3x+0x80>
     84a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_zero>
     84e:	0e f4       	brtc	.+2      	; 0x852 <__addsf3x+0x20>
     850:	e0 95       	com	r30
     852:	0b 2e       	mov	r0, r27
     854:	ba 2f       	mov	r27, r26
     856:	a0 2d       	mov	r26, r0
     858:	0b 01       	movw	r0, r22
     85a:	b9 01       	movw	r22, r18
     85c:	90 01       	movw	r18, r0
     85e:	0c 01       	movw	r0, r24
     860:	ca 01       	movw	r24, r20
     862:	a0 01       	movw	r20, r0
     864:	11 24       	eor	r1, r1
     866:	ff 27       	eor	r31, r31
     868:	59 1b       	sub	r21, r25
     86a:	99 f0       	breq	.+38     	; 0x892 <__addsf3x+0x60>
     86c:	59 3f       	cpi	r21, 0xF9	; 249
     86e:	50 f4       	brcc	.+20     	; 0x884 <__addsf3x+0x52>
     870:	50 3e       	cpi	r21, 0xE0	; 224
     872:	68 f1       	brcs	.+90     	; 0x8ce <__addsf3x+0x9c>
     874:	1a 16       	cp	r1, r26
     876:	f0 40       	sbci	r31, 0x00	; 0
     878:	a2 2f       	mov	r26, r18
     87a:	23 2f       	mov	r18, r19
     87c:	34 2f       	mov	r19, r20
     87e:	44 27       	eor	r20, r20
     880:	58 5f       	subi	r21, 0xF8	; 248
     882:	f3 cf       	rjmp	.-26     	; 0x86a <__addsf3x+0x38>
     884:	46 95       	lsr	r20
     886:	37 95       	ror	r19
     888:	27 95       	ror	r18
     88a:	a7 95       	ror	r26
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	53 95       	inc	r21
     890:	c9 f7       	brne	.-14     	; 0x884 <__addsf3x+0x52>
     892:	7e f4       	brtc	.+30     	; 0x8b2 <__addsf3x+0x80>
     894:	1f 16       	cp	r1, r31
     896:	ba 0b       	sbc	r27, r26
     898:	62 0b       	sbc	r22, r18
     89a:	73 0b       	sbc	r23, r19
     89c:	84 0b       	sbc	r24, r20
     89e:	ba f0       	brmi	.+46     	; 0x8ce <__addsf3x+0x9c>
     8a0:	91 50       	subi	r25, 0x01	; 1
     8a2:	a1 f0       	breq	.+40     	; 0x8cc <__addsf3x+0x9a>
     8a4:	ff 0f       	add	r31, r31
     8a6:	bb 1f       	adc	r27, r27
     8a8:	66 1f       	adc	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	88 1f       	adc	r24, r24
     8ae:	c2 f7       	brpl	.-16     	; 0x8a0 <__addsf3x+0x6e>
     8b0:	0e c0       	rjmp	.+28     	; 0x8ce <__addsf3x+0x9c>
     8b2:	ba 0f       	add	r27, r26
     8b4:	62 1f       	adc	r22, r18
     8b6:	73 1f       	adc	r23, r19
     8b8:	84 1f       	adc	r24, r20
     8ba:	48 f4       	brcc	.+18     	; 0x8ce <__addsf3x+0x9c>
     8bc:	87 95       	ror	r24
     8be:	77 95       	ror	r23
     8c0:	67 95       	ror	r22
     8c2:	b7 95       	ror	r27
     8c4:	f7 95       	ror	r31
     8c6:	9e 3f       	cpi	r25, 0xFE	; 254
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <__addsf3x+0x9a>
     8ca:	b0 cf       	rjmp	.-160    	; 0x82c <__addsf3+0x28>
     8cc:	93 95       	inc	r25
     8ce:	88 0f       	add	r24, r24
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__addsf3x+0xa2>
     8d2:	99 27       	eor	r25, r25
     8d4:	ee 0f       	add	r30, r30
     8d6:	97 95       	ror	r25
     8d8:	87 95       	ror	r24
     8da:	08 95       	ret

000008dc <__fixunssfsi>:
     8dc:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_splitA>
     8e0:	88 f0       	brcs	.+34     	; 0x904 <__stack+0x5>
     8e2:	9f 57       	subi	r25, 0x7F	; 127
     8e4:	98 f0       	brcs	.+38     	; 0x90c <__stack+0xd>
     8e6:	b9 2f       	mov	r27, r25
     8e8:	99 27       	eor	r25, r25
     8ea:	b7 51       	subi	r27, 0x17	; 23
     8ec:	b0 f0       	brcs	.+44     	; 0x91a <__stack+0x1b>
     8ee:	e1 f0       	breq	.+56     	; 0x928 <__stack+0x29>
     8f0:	66 0f       	add	r22, r22
     8f2:	77 1f       	adc	r23, r23
     8f4:	88 1f       	adc	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	1a f0       	brmi	.+6      	; 0x900 <__stack+0x1>
     8fa:	ba 95       	dec	r27
     8fc:	c9 f7       	brne	.-14     	; 0x8f0 <__fixunssfsi+0x14>
     8fe:	14 c0       	rjmp	.+40     	; 0x928 <__stack+0x29>
     900:	b1 30       	cpi	r27, 0x01	; 1
     902:	91 f0       	breq	.+36     	; 0x928 <__stack+0x29>
     904:	0e 94 24 05 	call	0xa48	; 0xa48 <__fp_zero>
     908:	b1 e0       	ldi	r27, 0x01	; 1
     90a:	08 95       	ret
     90c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_zero>
     910:	67 2f       	mov	r22, r23
     912:	78 2f       	mov	r23, r24
     914:	88 27       	eor	r24, r24
     916:	b8 5f       	subi	r27, 0xF8	; 248
     918:	39 f0       	breq	.+14     	; 0x928 <__stack+0x29>
     91a:	b9 3f       	cpi	r27, 0xF9	; 249
     91c:	cc f3       	brlt	.-14     	; 0x910 <__stack+0x11>
     91e:	86 95       	lsr	r24
     920:	77 95       	ror	r23
     922:	67 95       	ror	r22
     924:	b3 95       	inc	r27
     926:	d9 f7       	brne	.-10     	; 0x91e <__stack+0x1f>
     928:	3e f4       	brtc	.+14     	; 0x938 <__stack+0x39>
     92a:	90 95       	com	r25
     92c:	80 95       	com	r24
     92e:	70 95       	com	r23
     930:	61 95       	neg	r22
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	8f 4f       	sbci	r24, 0xFF	; 255
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	08 95       	ret

0000093a <__floatunsisf>:
     93a:	e8 94       	clt
     93c:	09 c0       	rjmp	.+18     	; 0x950 <__floatsisf+0x12>

0000093e <__floatsisf>:
     93e:	97 fb       	bst	r25, 7
     940:	3e f4       	brtc	.+14     	; 0x950 <__floatsisf+0x12>
     942:	90 95       	com	r25
     944:	80 95       	com	r24
     946:	70 95       	com	r23
     948:	61 95       	neg	r22
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	8f 4f       	sbci	r24, 0xFF	; 255
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	99 23       	and	r25, r25
     952:	a9 f0       	breq	.+42     	; 0x97e <__floatsisf+0x40>
     954:	f9 2f       	mov	r31, r25
     956:	96 e9       	ldi	r25, 0x96	; 150
     958:	bb 27       	eor	r27, r27
     95a:	93 95       	inc	r25
     95c:	f6 95       	lsr	r31
     95e:	87 95       	ror	r24
     960:	77 95       	ror	r23
     962:	67 95       	ror	r22
     964:	b7 95       	ror	r27
     966:	f1 11       	cpse	r31, r1
     968:	f8 cf       	rjmp	.-16     	; 0x95a <__floatsisf+0x1c>
     96a:	fa f4       	brpl	.+62     	; 0x9aa <__floatsisf+0x6c>
     96c:	bb 0f       	add	r27, r27
     96e:	11 f4       	brne	.+4      	; 0x974 <__floatsisf+0x36>
     970:	60 ff       	sbrs	r22, 0
     972:	1b c0       	rjmp	.+54     	; 0x9aa <__floatsisf+0x6c>
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	8f 4f       	sbci	r24, 0xFF	; 255
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	16 c0       	rjmp	.+44     	; 0x9aa <__floatsisf+0x6c>
     97e:	88 23       	and	r24, r24
     980:	11 f0       	breq	.+4      	; 0x986 <__floatsisf+0x48>
     982:	96 e9       	ldi	r25, 0x96	; 150
     984:	11 c0       	rjmp	.+34     	; 0x9a8 <__floatsisf+0x6a>
     986:	77 23       	and	r23, r23
     988:	21 f0       	breq	.+8      	; 0x992 <__floatsisf+0x54>
     98a:	9e e8       	ldi	r25, 0x8E	; 142
     98c:	87 2f       	mov	r24, r23
     98e:	76 2f       	mov	r23, r22
     990:	05 c0       	rjmp	.+10     	; 0x99c <__floatsisf+0x5e>
     992:	66 23       	and	r22, r22
     994:	71 f0       	breq	.+28     	; 0x9b2 <__floatsisf+0x74>
     996:	96 e8       	ldi	r25, 0x86	; 134
     998:	86 2f       	mov	r24, r22
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	2a f0       	brmi	.+10     	; 0x9aa <__floatsisf+0x6c>
     9a0:	9a 95       	dec	r25
     9a2:	66 0f       	add	r22, r22
     9a4:	77 1f       	adc	r23, r23
     9a6:	88 1f       	adc	r24, r24
     9a8:	da f7       	brpl	.-10     	; 0x9a0 <__floatsisf+0x62>
     9aa:	88 0f       	add	r24, r24
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	97 f9       	bld	r25, 7
     9b2:	08 95       	ret

000009b4 <__fp_inf>:
     9b4:	97 f9       	bld	r25, 7
     9b6:	9f 67       	ori	r25, 0x7F	; 127
     9b8:	80 e8       	ldi	r24, 0x80	; 128
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	08 95       	ret

000009c0 <__fp_nan>:
     9c0:	9f ef       	ldi	r25, 0xFF	; 255
     9c2:	80 ec       	ldi	r24, 0xC0	; 192
     9c4:	08 95       	ret

000009c6 <__fp_pscA>:
     9c6:	00 24       	eor	r0, r0
     9c8:	0a 94       	dec	r0
     9ca:	16 16       	cp	r1, r22
     9cc:	17 06       	cpc	r1, r23
     9ce:	18 06       	cpc	r1, r24
     9d0:	09 06       	cpc	r0, r25
     9d2:	08 95       	ret

000009d4 <__fp_pscB>:
     9d4:	00 24       	eor	r0, r0
     9d6:	0a 94       	dec	r0
     9d8:	12 16       	cp	r1, r18
     9da:	13 06       	cpc	r1, r19
     9dc:	14 06       	cpc	r1, r20
     9de:	05 06       	cpc	r0, r21
     9e0:	08 95       	ret

000009e2 <__fp_round>:
     9e2:	09 2e       	mov	r0, r25
     9e4:	03 94       	inc	r0
     9e6:	00 0c       	add	r0, r0
     9e8:	11 f4       	brne	.+4      	; 0x9ee <__fp_round+0xc>
     9ea:	88 23       	and	r24, r24
     9ec:	52 f0       	brmi	.+20     	; 0xa02 <__fp_round+0x20>
     9ee:	bb 0f       	add	r27, r27
     9f0:	40 f4       	brcc	.+16     	; 0xa02 <__fp_round+0x20>
     9f2:	bf 2b       	or	r27, r31
     9f4:	11 f4       	brne	.+4      	; 0x9fa <__fp_round+0x18>
     9f6:	60 ff       	sbrs	r22, 0
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fp_round+0x20>
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	8f 4f       	sbci	r24, 0xFF	; 255
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	08 95       	ret

00000a04 <__fp_split3>:
     a04:	57 fd       	sbrc	r21, 7
     a06:	90 58       	subi	r25, 0x80	; 128
     a08:	44 0f       	add	r20, r20
     a0a:	55 1f       	adc	r21, r21
     a0c:	59 f0       	breq	.+22     	; 0xa24 <__fp_splitA+0x10>
     a0e:	5f 3f       	cpi	r21, 0xFF	; 255
     a10:	71 f0       	breq	.+28     	; 0xa2e <__fp_splitA+0x1a>
     a12:	47 95       	ror	r20

00000a14 <__fp_splitA>:
     a14:	88 0f       	add	r24, r24
     a16:	97 fb       	bst	r25, 7
     a18:	99 1f       	adc	r25, r25
     a1a:	61 f0       	breq	.+24     	; 0xa34 <__fp_splitA+0x20>
     a1c:	9f 3f       	cpi	r25, 0xFF	; 255
     a1e:	79 f0       	breq	.+30     	; 0xa3e <__fp_splitA+0x2a>
     a20:	87 95       	ror	r24
     a22:	08 95       	ret
     a24:	12 16       	cp	r1, r18
     a26:	13 06       	cpc	r1, r19
     a28:	14 06       	cpc	r1, r20
     a2a:	55 1f       	adc	r21, r21
     a2c:	f2 cf       	rjmp	.-28     	; 0xa12 <__fp_split3+0xe>
     a2e:	46 95       	lsr	r20
     a30:	f1 df       	rcall	.-30     	; 0xa14 <__fp_splitA>
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <__fp_splitA+0x30>
     a34:	16 16       	cp	r1, r22
     a36:	17 06       	cpc	r1, r23
     a38:	18 06       	cpc	r1, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	f1 cf       	rjmp	.-30     	; 0xa20 <__fp_splitA+0xc>
     a3e:	86 95       	lsr	r24
     a40:	71 05       	cpc	r23, r1
     a42:	61 05       	cpc	r22, r1
     a44:	08 94       	sec
     a46:	08 95       	ret

00000a48 <__fp_zero>:
     a48:	e8 94       	clt

00000a4a <__fp_szero>:
     a4a:	bb 27       	eor	r27, r27
     a4c:	66 27       	eor	r22, r22
     a4e:	77 27       	eor	r23, r23
     a50:	cb 01       	movw	r24, r22
     a52:	97 f9       	bld	r25, 7
     a54:	08 95       	ret

00000a56 <__gesf2>:
     a56:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_cmp>
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <__gesf2+0x8>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	08 95       	ret

00000a60 <__mulsf3>:
     a60:	0e 94 43 05 	call	0xa86	; 0xa86 <__mulsf3x>
     a64:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_round>
     a68:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscA>
     a6c:	38 f0       	brcs	.+14     	; 0xa7c <__mulsf3+0x1c>
     a6e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_pscB>
     a72:	20 f0       	brcs	.+8      	; 0xa7c <__mulsf3+0x1c>
     a74:	95 23       	and	r25, r21
     a76:	11 f0       	breq	.+4      	; 0xa7c <__mulsf3+0x1c>
     a78:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_inf>
     a7c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_nan>
     a80:	11 24       	eor	r1, r1
     a82:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_szero>

00000a86 <__mulsf3x>:
     a86:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_split3>
     a8a:	70 f3       	brcs	.-36     	; 0xa68 <__mulsf3+0x8>

00000a8c <__mulsf3_pse>:
     a8c:	95 9f       	mul	r25, r21
     a8e:	c1 f3       	breq	.-16     	; 0xa80 <__mulsf3+0x20>
     a90:	95 0f       	add	r25, r21
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	55 1f       	adc	r21, r21
     a96:	62 9f       	mul	r22, r18
     a98:	f0 01       	movw	r30, r0
     a9a:	72 9f       	mul	r23, r18
     a9c:	bb 27       	eor	r27, r27
     a9e:	f0 0d       	add	r31, r0
     aa0:	b1 1d       	adc	r27, r1
     aa2:	63 9f       	mul	r22, r19
     aa4:	aa 27       	eor	r26, r26
     aa6:	f0 0d       	add	r31, r0
     aa8:	b1 1d       	adc	r27, r1
     aaa:	aa 1f       	adc	r26, r26
     aac:	64 9f       	mul	r22, r20
     aae:	66 27       	eor	r22, r22
     ab0:	b0 0d       	add	r27, r0
     ab2:	a1 1d       	adc	r26, r1
     ab4:	66 1f       	adc	r22, r22
     ab6:	82 9f       	mul	r24, r18
     ab8:	22 27       	eor	r18, r18
     aba:	b0 0d       	add	r27, r0
     abc:	a1 1d       	adc	r26, r1
     abe:	62 1f       	adc	r22, r18
     ac0:	73 9f       	mul	r23, r19
     ac2:	b0 0d       	add	r27, r0
     ac4:	a1 1d       	adc	r26, r1
     ac6:	62 1f       	adc	r22, r18
     ac8:	83 9f       	mul	r24, r19
     aca:	a0 0d       	add	r26, r0
     acc:	61 1d       	adc	r22, r1
     ace:	22 1f       	adc	r18, r18
     ad0:	74 9f       	mul	r23, r20
     ad2:	33 27       	eor	r19, r19
     ad4:	a0 0d       	add	r26, r0
     ad6:	61 1d       	adc	r22, r1
     ad8:	23 1f       	adc	r18, r19
     ada:	84 9f       	mul	r24, r20
     adc:	60 0d       	add	r22, r0
     ade:	21 1d       	adc	r18, r1
     ae0:	82 2f       	mov	r24, r18
     ae2:	76 2f       	mov	r23, r22
     ae4:	6a 2f       	mov	r22, r26
     ae6:	11 24       	eor	r1, r1
     ae8:	9f 57       	subi	r25, 0x7F	; 127
     aea:	50 40       	sbci	r21, 0x00	; 0
     aec:	9a f0       	brmi	.+38     	; 0xb14 <__mulsf3_pse+0x88>
     aee:	f1 f0       	breq	.+60     	; 0xb2c <__mulsf3_pse+0xa0>
     af0:	88 23       	and	r24, r24
     af2:	4a f0       	brmi	.+18     	; 0xb06 <__mulsf3_pse+0x7a>
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	bb 1f       	adc	r27, r27
     afa:	66 1f       	adc	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	88 1f       	adc	r24, r24
     b00:	91 50       	subi	r25, 0x01	; 1
     b02:	50 40       	sbci	r21, 0x00	; 0
     b04:	a9 f7       	brne	.-22     	; 0xaf0 <__mulsf3_pse+0x64>
     b06:	9e 3f       	cpi	r25, 0xFE	; 254
     b08:	51 05       	cpc	r21, r1
     b0a:	80 f0       	brcs	.+32     	; 0xb2c <__mulsf3_pse+0xa0>
     b0c:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_inf>
     b10:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_szero>
     b14:	5f 3f       	cpi	r21, 0xFF	; 255
     b16:	e4 f3       	brlt	.-8      	; 0xb10 <__mulsf3_pse+0x84>
     b18:	98 3e       	cpi	r25, 0xE8	; 232
     b1a:	d4 f3       	brlt	.-12     	; 0xb10 <__mulsf3_pse+0x84>
     b1c:	86 95       	lsr	r24
     b1e:	77 95       	ror	r23
     b20:	67 95       	ror	r22
     b22:	b7 95       	ror	r27
     b24:	f7 95       	ror	r31
     b26:	e7 95       	ror	r30
     b28:	9f 5f       	subi	r25, 0xFF	; 255
     b2a:	c1 f7       	brne	.-16     	; 0xb1c <__mulsf3_pse+0x90>
     b2c:	fe 2b       	or	r31, r30
     b2e:	88 0f       	add	r24, r24
     b30:	91 1d       	adc	r25, r1
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	97 f9       	bld	r25, 7
     b38:	08 95       	ret

00000b3a <__fp_cmp>:
     b3a:	99 0f       	add	r25, r25
     b3c:	00 08       	sbc	r0, r0
     b3e:	55 0f       	add	r21, r21
     b40:	aa 0b       	sbc	r26, r26
     b42:	e0 e8       	ldi	r30, 0x80	; 128
     b44:	fe ef       	ldi	r31, 0xFE	; 254
     b46:	16 16       	cp	r1, r22
     b48:	17 06       	cpc	r1, r23
     b4a:	e8 07       	cpc	r30, r24
     b4c:	f9 07       	cpc	r31, r25
     b4e:	c0 f0       	brcs	.+48     	; 0xb80 <__fp_cmp+0x46>
     b50:	12 16       	cp	r1, r18
     b52:	13 06       	cpc	r1, r19
     b54:	e4 07       	cpc	r30, r20
     b56:	f5 07       	cpc	r31, r21
     b58:	98 f0       	brcs	.+38     	; 0xb80 <__fp_cmp+0x46>
     b5a:	62 1b       	sub	r22, r18
     b5c:	73 0b       	sbc	r23, r19
     b5e:	84 0b       	sbc	r24, r20
     b60:	95 0b       	sbc	r25, r21
     b62:	39 f4       	brne	.+14     	; 0xb72 <__fp_cmp+0x38>
     b64:	0a 26       	eor	r0, r26
     b66:	61 f0       	breq	.+24     	; 0xb80 <__fp_cmp+0x46>
     b68:	23 2b       	or	r18, r19
     b6a:	24 2b       	or	r18, r20
     b6c:	25 2b       	or	r18, r21
     b6e:	21 f4       	brne	.+8      	; 0xb78 <__fp_cmp+0x3e>
     b70:	08 95       	ret
     b72:	0a 26       	eor	r0, r26
     b74:	09 f4       	brne	.+2      	; 0xb78 <__fp_cmp+0x3e>
     b76:	a1 40       	sbci	r26, 0x01	; 1
     b78:	a6 95       	lsr	r26
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	81 1d       	adc	r24, r1
     b7e:	81 1d       	adc	r24, r1
     b80:	08 95       	ret

00000b82 <__umulhisi3>:
     b82:	a2 9f       	mul	r26, r18
     b84:	b0 01       	movw	r22, r0
     b86:	b3 9f       	mul	r27, r19
     b88:	c0 01       	movw	r24, r0
     b8a:	a3 9f       	mul	r26, r19
     b8c:	70 0d       	add	r23, r0
     b8e:	81 1d       	adc	r24, r1
     b90:	11 24       	eor	r1, r1
     b92:	91 1d       	adc	r25, r1
     b94:	b2 9f       	mul	r27, r18
     b96:	70 0d       	add	r23, r0
     b98:	81 1d       	adc	r24, r1
     b9a:	11 24       	eor	r1, r1
     b9c:	91 1d       	adc	r25, r1
     b9e:	08 95       	ret

00000ba0 <puts>:
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <__iob+0x2>
     bac:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <__iob+0x3>
     bb0:	23 81       	ldd	r18, Z+3	; 0x03
     bb2:	21 ff       	sbrs	r18, 1
     bb4:	1b c0       	rjmp	.+54     	; 0xbec <puts+0x4c>
     bb6:	8c 01       	movw	r16, r24
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	f8 01       	movw	r30, r16
     bbe:	81 91       	ld	r24, Z+
     bc0:	8f 01       	movw	r16, r30
     bc2:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <__iob+0x2>
     bc6:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <__iob+0x3>
     bca:	db 01       	movw	r26, r22
     bcc:	18 96       	adiw	r26, 0x08	; 8
     bce:	ed 91       	ld	r30, X+
     bd0:	fc 91       	ld	r31, X
     bd2:	19 97       	sbiw	r26, 0x09	; 9
     bd4:	88 23       	and	r24, r24
     bd6:	31 f0       	breq	.+12     	; 0xbe4 <puts+0x44>
     bd8:	09 95       	icall
     bda:	89 2b       	or	r24, r25
     bdc:	79 f3       	breq	.-34     	; 0xbbc <puts+0x1c>
     bde:	df ef       	ldi	r29, 0xFF	; 255
     be0:	cf ef       	ldi	r28, 0xFF	; 255
     be2:	ec cf       	rjmp	.-40     	; 0xbbc <puts+0x1c>
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	09 95       	icall
     be8:	89 2b       	or	r24, r25
     bea:	19 f0       	breq	.+6      	; 0xbf2 <puts+0x52>
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	9f ef       	ldi	r25, 0xFF	; 255
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <puts+0x56>
     bf2:	8d 2f       	mov	r24, r29
     bf4:	9c 2f       	mov	r25, r28
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <snprintf>:
     c00:	ae e0       	ldi	r26, 0x0E	; 14
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e0       	ldi	r30, 0x06	; 6
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__prologue_saves__+0x1c>
     c0c:	0d 89       	ldd	r16, Y+21	; 0x15
     c0e:	1e 89       	ldd	r17, Y+22	; 0x16
     c10:	8f 89       	ldd	r24, Y+23	; 0x17
     c12:	98 8d       	ldd	r25, Y+24	; 0x18
     c14:	26 e0       	ldi	r18, 0x06	; 6
     c16:	2c 83       	std	Y+4, r18	; 0x04
     c18:	1a 83       	std	Y+2, r17	; 0x02
     c1a:	09 83       	std	Y+1, r16	; 0x01
     c1c:	97 ff       	sbrs	r25, 7
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <snprintf+0x24>
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e8       	ldi	r25, 0x80	; 128
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
     c2a:	ae 01       	movw	r20, r28
     c2c:	45 5e       	subi	r20, 0xE5	; 229
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
     c30:	69 8d       	ldd	r22, Y+25	; 0x19
     c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vfprintf>
     c3c:	4d 81       	ldd	r20, Y+5	; 0x05
     c3e:	5e 81       	ldd	r21, Y+6	; 0x06
     c40:	57 fd       	sbrc	r21, 7
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <snprintf+0x58>
     c44:	2f 81       	ldd	r18, Y+7	; 0x07
     c46:	38 85       	ldd	r19, Y+8	; 0x08
     c48:	42 17       	cp	r20, r18
     c4a:	53 07       	cpc	r21, r19
     c4c:	0c f4       	brge	.+2      	; 0xc50 <snprintf+0x50>
     c4e:	9a 01       	movw	r18, r20
     c50:	f8 01       	movw	r30, r16
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	10 82       	st	Z, r1
     c58:	2e 96       	adiw	r28, 0x0e	; 14
     c5a:	e4 e0       	ldi	r30, 0x04	; 4
     c5c:	0c 94 17 09 	jmp	0x122e	; 0x122e <__epilogue_restores__+0x1c>

00000c60 <vsnprintf>:
     c60:	ae e0       	ldi	r26, 0x0E	; 14
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e6 e3       	ldi	r30, 0x36	; 54
     c66:	f6 e0       	ldi	r31, 0x06	; 6
     c68:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__prologue_saves__+0x1c>
     c6c:	8c 01       	movw	r16, r24
     c6e:	fa 01       	movw	r30, r20
     c70:	86 e0       	ldi	r24, 0x06	; 6
     c72:	8c 83       	std	Y+4, r24	; 0x04
     c74:	1a 83       	std	Y+2, r17	; 0x02
     c76:	09 83       	std	Y+1, r16	; 0x01
     c78:	77 ff       	sbrs	r23, 7
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vsnprintf+0x20>
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e8       	ldi	r23, 0x80	; 128
     c80:	cb 01       	movw	r24, r22
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	a9 01       	movw	r20, r18
     c8a:	bf 01       	movw	r22, r30
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vfprintf>
     c94:	4d 81       	ldd	r20, Y+5	; 0x05
     c96:	5e 81       	ldd	r21, Y+6	; 0x06
     c98:	57 fd       	sbrc	r21, 7
     c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <vsnprintf+0x50>
     c9c:	2f 81       	ldd	r18, Y+7	; 0x07
     c9e:	38 85       	ldd	r19, Y+8	; 0x08
     ca0:	42 17       	cp	r20, r18
     ca2:	53 07       	cpc	r21, r19
     ca4:	0c f4       	brge	.+2      	; 0xca8 <vsnprintf+0x48>
     ca6:	9a 01       	movw	r18, r20
     ca8:	f8 01       	movw	r30, r16
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	10 82       	st	Z, r1
     cb0:	2e 96       	adiw	r28, 0x0e	; 14
     cb2:	e4 e0       	ldi	r30, 0x04	; 4
     cb4:	0c 94 17 09 	jmp	0x122e	; 0x122e <__epilogue_restores__+0x1c>

00000cb8 <vfprintf>:
     cb8:	ab e0       	ldi	r26, 0x0B	; 11
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e2 e6       	ldi	r30, 0x62	; 98
     cbe:	f6 e0       	ldi	r31, 0x06	; 6
     cc0:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__prologue_saves__>
     cc4:	6c 01       	movw	r12, r24
     cc6:	7b 01       	movw	r14, r22
     cc8:	8a 01       	movw	r16, r20
     cca:	fc 01       	movw	r30, r24
     ccc:	17 82       	std	Z+7, r1	; 0x07
     cce:	16 82       	std	Z+6, r1	; 0x06
     cd0:	83 81       	ldd	r24, Z+3	; 0x03
     cd2:	81 ff       	sbrs	r24, 1
     cd4:	cc c1       	rjmp	.+920    	; 0x106e <vfprintf+0x3b6>
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	3c 01       	movw	r6, r24
     cdc:	f6 01       	movw	r30, r12
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	f7 01       	movw	r30, r14
     ce2:	93 fd       	sbrc	r25, 3
     ce4:	85 91       	lpm	r24, Z+
     ce6:	93 ff       	sbrs	r25, 3
     ce8:	81 91       	ld	r24, Z+
     cea:	7f 01       	movw	r14, r30
     cec:	88 23       	and	r24, r24
     cee:	09 f4       	brne	.+2      	; 0xcf2 <vfprintf+0x3a>
     cf0:	ba c1       	rjmp	.+884    	; 0x1066 <vfprintf+0x3ae>
     cf2:	85 32       	cpi	r24, 0x25	; 37
     cf4:	39 f4       	brne	.+14     	; 0xd04 <vfprintf+0x4c>
     cf6:	93 fd       	sbrc	r25, 3
     cf8:	85 91       	lpm	r24, Z+
     cfa:	93 ff       	sbrs	r25, 3
     cfc:	81 91       	ld	r24, Z+
     cfe:	7f 01       	movw	r14, r30
     d00:	85 32       	cpi	r24, 0x25	; 37
     d02:	29 f4       	brne	.+10     	; 0xd0e <vfprintf+0x56>
     d04:	b6 01       	movw	r22, r12
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
     d0c:	e7 cf       	rjmp	.-50     	; 0xcdc <vfprintf+0x24>
     d0e:	91 2c       	mov	r9, r1
     d10:	21 2c       	mov	r2, r1
     d12:	31 2c       	mov	r3, r1
     d14:	ff e1       	ldi	r31, 0x1F	; 31
     d16:	f3 15       	cp	r31, r3
     d18:	d8 f0       	brcs	.+54     	; 0xd50 <vfprintf+0x98>
     d1a:	8b 32       	cpi	r24, 0x2B	; 43
     d1c:	79 f0       	breq	.+30     	; 0xd3c <vfprintf+0x84>
     d1e:	38 f4       	brcc	.+14     	; 0xd2e <vfprintf+0x76>
     d20:	80 32       	cpi	r24, 0x20	; 32
     d22:	79 f0       	breq	.+30     	; 0xd42 <vfprintf+0x8a>
     d24:	83 32       	cpi	r24, 0x23	; 35
     d26:	a1 f4       	brne	.+40     	; 0xd50 <vfprintf+0x98>
     d28:	23 2d       	mov	r18, r3
     d2a:	20 61       	ori	r18, 0x10	; 16
     d2c:	1d c0       	rjmp	.+58     	; 0xd68 <vfprintf+0xb0>
     d2e:	8d 32       	cpi	r24, 0x2D	; 45
     d30:	61 f0       	breq	.+24     	; 0xd4a <vfprintf+0x92>
     d32:	80 33       	cpi	r24, 0x30	; 48
     d34:	69 f4       	brne	.+26     	; 0xd50 <vfprintf+0x98>
     d36:	23 2d       	mov	r18, r3
     d38:	21 60       	ori	r18, 0x01	; 1
     d3a:	16 c0       	rjmp	.+44     	; 0xd68 <vfprintf+0xb0>
     d3c:	83 2d       	mov	r24, r3
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	38 2e       	mov	r3, r24
     d42:	e3 2d       	mov	r30, r3
     d44:	e4 60       	ori	r30, 0x04	; 4
     d46:	3e 2e       	mov	r3, r30
     d48:	2a c0       	rjmp	.+84     	; 0xd9e <vfprintf+0xe6>
     d4a:	f3 2d       	mov	r31, r3
     d4c:	f8 60       	ori	r31, 0x08	; 8
     d4e:	1d c0       	rjmp	.+58     	; 0xd8a <vfprintf+0xd2>
     d50:	37 fc       	sbrc	r3, 7
     d52:	2d c0       	rjmp	.+90     	; 0xdae <vfprintf+0xf6>
     d54:	20 ed       	ldi	r18, 0xD0	; 208
     d56:	28 0f       	add	r18, r24
     d58:	2a 30       	cpi	r18, 0x0A	; 10
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <vfprintf+0xb4>
     d5c:	8e 32       	cpi	r24, 0x2E	; 46
     d5e:	b9 f4       	brne	.+46     	; 0xd8e <vfprintf+0xd6>
     d60:	36 fc       	sbrc	r3, 6
     d62:	81 c1       	rjmp	.+770    	; 0x1066 <vfprintf+0x3ae>
     d64:	23 2d       	mov	r18, r3
     d66:	20 64       	ori	r18, 0x40	; 64
     d68:	32 2e       	mov	r3, r18
     d6a:	19 c0       	rjmp	.+50     	; 0xd9e <vfprintf+0xe6>
     d6c:	36 fe       	sbrs	r3, 6
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0xc4>
     d70:	8a e0       	ldi	r24, 0x0A	; 10
     d72:	98 9e       	mul	r9, r24
     d74:	20 0d       	add	r18, r0
     d76:	11 24       	eor	r1, r1
     d78:	92 2e       	mov	r9, r18
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <vfprintf+0xe6>
     d7c:	ea e0       	ldi	r30, 0x0A	; 10
     d7e:	2e 9e       	mul	r2, r30
     d80:	20 0d       	add	r18, r0
     d82:	11 24       	eor	r1, r1
     d84:	22 2e       	mov	r2, r18
     d86:	f3 2d       	mov	r31, r3
     d88:	f0 62       	ori	r31, 0x20	; 32
     d8a:	3f 2e       	mov	r3, r31
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <vfprintf+0xe6>
     d8e:	8c 36       	cpi	r24, 0x6C	; 108
     d90:	21 f4       	brne	.+8      	; 0xd9a <vfprintf+0xe2>
     d92:	83 2d       	mov	r24, r3
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	38 2e       	mov	r3, r24
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0xe6>
     d9a:	88 36       	cpi	r24, 0x68	; 104
     d9c:	41 f4       	brne	.+16     	; 0xdae <vfprintf+0xf6>
     d9e:	f7 01       	movw	r30, r14
     da0:	93 fd       	sbrc	r25, 3
     da2:	85 91       	lpm	r24, Z+
     da4:	93 ff       	sbrs	r25, 3
     da6:	81 91       	ld	r24, Z+
     da8:	7f 01       	movw	r14, r30
     daa:	81 11       	cpse	r24, r1
     dac:	b3 cf       	rjmp	.-154    	; 0xd14 <vfprintf+0x5c>
     dae:	98 2f       	mov	r25, r24
     db0:	9f 7d       	andi	r25, 0xDF	; 223
     db2:	95 54       	subi	r25, 0x45	; 69
     db4:	93 30       	cpi	r25, 0x03	; 3
     db6:	28 f4       	brcc	.+10     	; 0xdc2 <vfprintf+0x10a>
     db8:	0c 5f       	subi	r16, 0xFC	; 252
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	9f e3       	ldi	r25, 0x3F	; 63
     dbe:	99 83       	std	Y+1, r25	; 0x01
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <vfprintf+0x124>
     dc2:	83 36       	cpi	r24, 0x63	; 99
     dc4:	31 f0       	breq	.+12     	; 0xdd2 <vfprintf+0x11a>
     dc6:	83 37       	cpi	r24, 0x73	; 115
     dc8:	71 f0       	breq	.+28     	; 0xde6 <vfprintf+0x12e>
     dca:	83 35       	cpi	r24, 0x53	; 83
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <vfprintf+0x118>
     dce:	59 c0       	rjmp	.+178    	; 0xe82 <vfprintf+0x1ca>
     dd0:	21 c0       	rjmp	.+66     	; 0xe14 <vfprintf+0x15c>
     dd2:	f8 01       	movw	r30, r16
     dd4:	80 81       	ld	r24, Z
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	0e 5f       	subi	r16, 0xFE	; 254
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	88 24       	eor	r8, r8
     dde:	83 94       	inc	r8
     de0:	91 2c       	mov	r9, r1
     de2:	53 01       	movw	r10, r6
     de4:	13 c0       	rjmp	.+38     	; 0xe0c <vfprintf+0x154>
     de6:	28 01       	movw	r4, r16
     de8:	f2 e0       	ldi	r31, 0x02	; 2
     dea:	4f 0e       	add	r4, r31
     dec:	51 1c       	adc	r5, r1
     dee:	f8 01       	movw	r30, r16
     df0:	a0 80       	ld	r10, Z
     df2:	b1 80       	ldd	r11, Z+1	; 0x01
     df4:	36 fe       	sbrs	r3, 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <vfprintf+0x146>
     df8:	69 2d       	mov	r22, r9
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x14a>
     dfe:	6f ef       	ldi	r22, 0xFF	; 255
     e00:	7f ef       	ldi	r23, 0xFF	; 255
     e02:	c5 01       	movw	r24, r10
     e04:	0e 94 48 08 	call	0x1090	; 0x1090 <strnlen>
     e08:	4c 01       	movw	r8, r24
     e0a:	82 01       	movw	r16, r4
     e0c:	f3 2d       	mov	r31, r3
     e0e:	ff 77       	andi	r31, 0x7F	; 127
     e10:	3f 2e       	mov	r3, r31
     e12:	16 c0       	rjmp	.+44     	; 0xe40 <vfprintf+0x188>
     e14:	28 01       	movw	r4, r16
     e16:	22 e0       	ldi	r18, 0x02	; 2
     e18:	42 0e       	add	r4, r18
     e1a:	51 1c       	adc	r5, r1
     e1c:	f8 01       	movw	r30, r16
     e1e:	a0 80       	ld	r10, Z
     e20:	b1 80       	ldd	r11, Z+1	; 0x01
     e22:	36 fe       	sbrs	r3, 6
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <vfprintf+0x174>
     e26:	69 2d       	mov	r22, r9
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <vfprintf+0x178>
     e2c:	6f ef       	ldi	r22, 0xFF	; 255
     e2e:	7f ef       	ldi	r23, 0xFF	; 255
     e30:	c5 01       	movw	r24, r10
     e32:	0e 94 3d 08 	call	0x107a	; 0x107a <strnlen_P>
     e36:	4c 01       	movw	r8, r24
     e38:	f3 2d       	mov	r31, r3
     e3a:	f0 68       	ori	r31, 0x80	; 128
     e3c:	3f 2e       	mov	r3, r31
     e3e:	82 01       	movw	r16, r4
     e40:	33 fc       	sbrc	r3, 3
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <vfprintf+0x1c2>
     e44:	82 2d       	mov	r24, r2
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	88 16       	cp	r8, r24
     e4a:	99 06       	cpc	r9, r25
     e4c:	b0 f4       	brcc	.+44     	; 0xe7a <vfprintf+0x1c2>
     e4e:	b6 01       	movw	r22, r12
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
     e58:	2a 94       	dec	r2
     e5a:	f4 cf       	rjmp	.-24     	; 0xe44 <vfprintf+0x18c>
     e5c:	f5 01       	movw	r30, r10
     e5e:	37 fc       	sbrc	r3, 7
     e60:	85 91       	lpm	r24, Z+
     e62:	37 fe       	sbrs	r3, 7
     e64:	81 91       	ld	r24, Z+
     e66:	5f 01       	movw	r10, r30
     e68:	b6 01       	movw	r22, r12
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
     e70:	21 10       	cpse	r2, r1
     e72:	2a 94       	dec	r2
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	82 1a       	sub	r8, r18
     e78:	91 08       	sbc	r9, r1
     e7a:	81 14       	cp	r8, r1
     e7c:	91 04       	cpc	r9, r1
     e7e:	71 f7       	brne	.-36     	; 0xe5c <vfprintf+0x1a4>
     e80:	e8 c0       	rjmp	.+464    	; 0x1052 <vfprintf+0x39a>
     e82:	84 36       	cpi	r24, 0x64	; 100
     e84:	11 f0       	breq	.+4      	; 0xe8a <vfprintf+0x1d2>
     e86:	89 36       	cpi	r24, 0x69	; 105
     e88:	41 f5       	brne	.+80     	; 0xeda <vfprintf+0x222>
     e8a:	f8 01       	movw	r30, r16
     e8c:	37 fe       	sbrs	r3, 7
     e8e:	07 c0       	rjmp	.+14     	; 0xe9e <vfprintf+0x1e6>
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	0c 5f       	subi	r16, 0xFC	; 252
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <vfprintf+0x1f6>
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	07 2e       	mov	r0, r23
     ea4:	00 0c       	add	r0, r0
     ea6:	88 0b       	sbc	r24, r24
     ea8:	99 0b       	sbc	r25, r25
     eaa:	0e 5f       	subi	r16, 0xFE	; 254
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	f3 2d       	mov	r31, r3
     eb0:	ff 76       	andi	r31, 0x6F	; 111
     eb2:	3f 2e       	mov	r3, r31
     eb4:	97 ff       	sbrs	r25, 7
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <vfprintf+0x212>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	f0 68       	ori	r31, 0x80	; 128
     ec8:	3f 2e       	mov	r3, r31
     eca:	2a e0       	ldi	r18, 0x0A	; 10
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	a3 01       	movw	r20, r6
     ed0:	0e 94 8f 08 	call	0x111e	; 0x111e <__ultoa_invert>
     ed4:	88 2e       	mov	r8, r24
     ed6:	86 18       	sub	r8, r6
     ed8:	45 c0       	rjmp	.+138    	; 0xf64 <vfprintf+0x2ac>
     eda:	85 37       	cpi	r24, 0x75	; 117
     edc:	31 f4       	brne	.+12     	; 0xeea <vfprintf+0x232>
     ede:	23 2d       	mov	r18, r3
     ee0:	2f 7e       	andi	r18, 0xEF	; 239
     ee2:	b2 2e       	mov	r11, r18
     ee4:	2a e0       	ldi	r18, 0x0A	; 10
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	25 c0       	rjmp	.+74     	; 0xf34 <vfprintf+0x27c>
     eea:	93 2d       	mov	r25, r3
     eec:	99 7f       	andi	r25, 0xF9	; 249
     eee:	b9 2e       	mov	r11, r25
     ef0:	8f 36       	cpi	r24, 0x6F	; 111
     ef2:	c1 f0       	breq	.+48     	; 0xf24 <vfprintf+0x26c>
     ef4:	18 f4       	brcc	.+6      	; 0xefc <vfprintf+0x244>
     ef6:	88 35       	cpi	r24, 0x58	; 88
     ef8:	79 f0       	breq	.+30     	; 0xf18 <vfprintf+0x260>
     efa:	b5 c0       	rjmp	.+362    	; 0x1066 <vfprintf+0x3ae>
     efc:	80 37       	cpi	r24, 0x70	; 112
     efe:	19 f0       	breq	.+6      	; 0xf06 <vfprintf+0x24e>
     f00:	88 37       	cpi	r24, 0x78	; 120
     f02:	21 f0       	breq	.+8      	; 0xf0c <vfprintf+0x254>
     f04:	b0 c0       	rjmp	.+352    	; 0x1066 <vfprintf+0x3ae>
     f06:	e9 2f       	mov	r30, r25
     f08:	e0 61       	ori	r30, 0x10	; 16
     f0a:	be 2e       	mov	r11, r30
     f0c:	b4 fe       	sbrs	r11, 4
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <vfprintf+0x272>
     f10:	fb 2d       	mov	r31, r11
     f12:	f4 60       	ori	r31, 0x04	; 4
     f14:	bf 2e       	mov	r11, r31
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <vfprintf+0x272>
     f18:	34 fe       	sbrs	r3, 4
     f1a:	0a c0       	rjmp	.+20     	; 0xf30 <vfprintf+0x278>
     f1c:	29 2f       	mov	r18, r25
     f1e:	26 60       	ori	r18, 0x06	; 6
     f20:	b2 2e       	mov	r11, r18
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0x278>
     f24:	28 e0       	ldi	r18, 0x08	; 8
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <vfprintf+0x27c>
     f2a:	20 e1       	ldi	r18, 0x10	; 16
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x27c>
     f30:	20 e1       	ldi	r18, 0x10	; 16
     f32:	32 e0       	ldi	r19, 0x02	; 2
     f34:	f8 01       	movw	r30, r16
     f36:	b7 fe       	sbrs	r11, 7
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <vfprintf+0x290>
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	0c 5f       	subi	r16, 0xFC	; 252
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <vfprintf+0x29c>
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	a3 01       	movw	r20, r6
     f56:	0e 94 8f 08 	call	0x111e	; 0x111e <__ultoa_invert>
     f5a:	88 2e       	mov	r8, r24
     f5c:	86 18       	sub	r8, r6
     f5e:	fb 2d       	mov	r31, r11
     f60:	ff 77       	andi	r31, 0x7F	; 127
     f62:	3f 2e       	mov	r3, r31
     f64:	36 fe       	sbrs	r3, 6
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <vfprintf+0x2ca>
     f68:	23 2d       	mov	r18, r3
     f6a:	2e 7f       	andi	r18, 0xFE	; 254
     f6c:	a2 2e       	mov	r10, r18
     f6e:	89 14       	cp	r8, r9
     f70:	58 f4       	brcc	.+22     	; 0xf88 <vfprintf+0x2d0>
     f72:	34 fe       	sbrs	r3, 4
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <vfprintf+0x2d4>
     f76:	32 fc       	sbrc	r3, 2
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <vfprintf+0x2d4>
     f7a:	83 2d       	mov	r24, r3
     f7c:	8e 7e       	andi	r24, 0xEE	; 238
     f7e:	a8 2e       	mov	r10, r24
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <vfprintf+0x2d4>
     f82:	b8 2c       	mov	r11, r8
     f84:	a3 2c       	mov	r10, r3
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <vfprintf+0x2d6>
     f88:	b8 2c       	mov	r11, r8
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <vfprintf+0x2d6>
     f8c:	b9 2c       	mov	r11, r9
     f8e:	a4 fe       	sbrs	r10, 4
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <vfprintf+0x2f8>
     f92:	fe 01       	movw	r30, r28
     f94:	e8 0d       	add	r30, r8
     f96:	f1 1d       	adc	r31, r1
     f98:	80 81       	ld	r24, Z
     f9a:	80 33       	cpi	r24, 0x30	; 48
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <vfprintf+0x2ee>
     f9e:	9a 2d       	mov	r25, r10
     fa0:	99 7e       	andi	r25, 0xE9	; 233
     fa2:	a9 2e       	mov	r10, r25
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <vfprintf+0x300>
     fa6:	a2 fe       	sbrs	r10, 2
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <vfprintf+0x2fe>
     faa:	b3 94       	inc	r11
     fac:	b3 94       	inc	r11
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <vfprintf+0x300>
     fb0:	8a 2d       	mov	r24, r10
     fb2:	86 78       	andi	r24, 0x86	; 134
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <vfprintf+0x300>
     fb6:	b3 94       	inc	r11
     fb8:	a3 fc       	sbrc	r10, 3
     fba:	11 c0       	rjmp	.+34     	; 0xfde <vfprintf+0x326>
     fbc:	a0 fe       	sbrs	r10, 0
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <vfprintf+0x314>
     fc0:	b2 14       	cp	r11, r2
     fc2:	88 f4       	brcc	.+34     	; 0xfe6 <vfprintf+0x32e>
     fc4:	28 0c       	add	r2, r8
     fc6:	92 2c       	mov	r9, r2
     fc8:	9b 18       	sub	r9, r11
     fca:	0e c0       	rjmp	.+28     	; 0xfe8 <vfprintf+0x330>
     fcc:	b2 14       	cp	r11, r2
     fce:	60 f4       	brcc	.+24     	; 0xfe8 <vfprintf+0x330>
     fd0:	b6 01       	movw	r22, r12
     fd2:	80 e2       	ldi	r24, 0x20	; 32
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
     fda:	b3 94       	inc	r11
     fdc:	f7 cf       	rjmp	.-18     	; 0xfcc <vfprintf+0x314>
     fde:	b2 14       	cp	r11, r2
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <vfprintf+0x330>
     fe2:	2b 18       	sub	r2, r11
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x332>
     fe6:	98 2c       	mov	r9, r8
     fe8:	21 2c       	mov	r2, r1
     fea:	a4 fe       	sbrs	r10, 4
     fec:	10 c0       	rjmp	.+32     	; 0x100e <vfprintf+0x356>
     fee:	b6 01       	movw	r22, r12
     ff0:	80 e3       	ldi	r24, 0x30	; 48
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
     ff8:	a2 fe       	sbrs	r10, 2
     ffa:	17 c0       	rjmp	.+46     	; 0x102a <vfprintf+0x372>
     ffc:	a1 fc       	sbrc	r10, 1
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <vfprintf+0x34e>
    1000:	88 e7       	ldi	r24, 0x78	; 120
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x352>
    1006:	88 e5       	ldi	r24, 0x58	; 88
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	b6 01       	movw	r22, r12
    100c:	0c c0       	rjmp	.+24     	; 0x1026 <vfprintf+0x36e>
    100e:	8a 2d       	mov	r24, r10
    1010:	86 78       	andi	r24, 0x86	; 134
    1012:	59 f0       	breq	.+22     	; 0x102a <vfprintf+0x372>
    1014:	a1 fe       	sbrs	r10, 1
    1016:	02 c0       	rjmp	.+4      	; 0x101c <vfprintf+0x364>
    1018:	8b e2       	ldi	r24, 0x2B	; 43
    101a:	01 c0       	rjmp	.+2      	; 0x101e <vfprintf+0x366>
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	a7 fc       	sbrc	r10, 7
    1020:	8d e2       	ldi	r24, 0x2D	; 45
    1022:	b6 01       	movw	r22, r12
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
    102a:	89 14       	cp	r8, r9
    102c:	38 f4       	brcc	.+14     	; 0x103c <vfprintf+0x384>
    102e:	b6 01       	movw	r22, r12
    1030:	80 e3       	ldi	r24, 0x30	; 48
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
    1038:	9a 94       	dec	r9
    103a:	f7 cf       	rjmp	.-18     	; 0x102a <vfprintf+0x372>
    103c:	8a 94       	dec	r8
    103e:	f3 01       	movw	r30, r6
    1040:	e8 0d       	add	r30, r8
    1042:	f1 1d       	adc	r31, r1
    1044:	80 81       	ld	r24, Z
    1046:	b6 01       	movw	r22, r12
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
    104e:	81 10       	cpse	r8, r1
    1050:	f5 cf       	rjmp	.-22     	; 0x103c <vfprintf+0x384>
    1052:	22 20       	and	r2, r2
    1054:	09 f4       	brne	.+2      	; 0x1058 <vfprintf+0x3a0>
    1056:	42 ce       	rjmp	.-892    	; 0xcdc <vfprintf+0x24>
    1058:	b6 01       	movw	r22, r12
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <fputc>
    1062:	2a 94       	dec	r2
    1064:	f6 cf       	rjmp	.-20     	; 0x1052 <vfprintf+0x39a>
    1066:	f6 01       	movw	r30, r12
    1068:	86 81       	ldd	r24, Z+6	; 0x06
    106a:	97 81       	ldd	r25, Z+7	; 0x07
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <vfprintf+0x3ba>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	2b 96       	adiw	r28, 0x0b	; 11
    1074:	e2 e1       	ldi	r30, 0x12	; 18
    1076:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__epilogue_restores__>

0000107a <strnlen_P>:
    107a:	fc 01       	movw	r30, r24
    107c:	05 90       	lpm	r0, Z+
    107e:	61 50       	subi	r22, 0x01	; 1
    1080:	70 40       	sbci	r23, 0x00	; 0
    1082:	01 10       	cpse	r0, r1
    1084:	d8 f7       	brcc	.-10     	; 0x107c <strnlen_P+0x2>
    1086:	80 95       	com	r24
    1088:	90 95       	com	r25
    108a:	8e 0f       	add	r24, r30
    108c:	9f 1f       	adc	r25, r31
    108e:	08 95       	ret

00001090 <strnlen>:
    1090:	fc 01       	movw	r30, r24
    1092:	61 50       	subi	r22, 0x01	; 1
    1094:	70 40       	sbci	r23, 0x00	; 0
    1096:	01 90       	ld	r0, Z+
    1098:	01 10       	cpse	r0, r1
    109a:	d8 f7       	brcc	.-10     	; 0x1092 <strnlen+0x2>
    109c:	80 95       	com	r24
    109e:	90 95       	com	r25
    10a0:	8e 0f       	add	r24, r30
    10a2:	9f 1f       	adc	r25, r31
    10a4:	08 95       	ret

000010a6 <fputc>:
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	fb 01       	movw	r30, r22
    10b0:	23 81       	ldd	r18, Z+3	; 0x03
    10b2:	21 fd       	sbrc	r18, 1
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <fputc+0x16>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	2c c0       	rjmp	.+88     	; 0x1114 <fputc+0x6e>
    10bc:	22 ff       	sbrs	r18, 2
    10be:	16 c0       	rjmp	.+44     	; 0x10ec <fputc+0x46>
    10c0:	46 81       	ldd	r20, Z+6	; 0x06
    10c2:	57 81       	ldd	r21, Z+7	; 0x07
    10c4:	24 81       	ldd	r18, Z+4	; 0x04
    10c6:	35 81       	ldd	r19, Z+5	; 0x05
    10c8:	42 17       	cp	r20, r18
    10ca:	53 07       	cpc	r21, r19
    10cc:	44 f4       	brge	.+16     	; 0x10de <fputc+0x38>
    10ce:	a0 81       	ld	r26, Z
    10d0:	b1 81       	ldd	r27, Z+1	; 0x01
    10d2:	9d 01       	movw	r18, r26
    10d4:	2f 5f       	subi	r18, 0xFF	; 255
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	31 83       	std	Z+1, r19	; 0x01
    10da:	20 83       	st	Z, r18
    10dc:	8c 93       	st	X, r24
    10de:	26 81       	ldd	r18, Z+6	; 0x06
    10e0:	37 81       	ldd	r19, Z+7	; 0x07
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	37 83       	std	Z+7, r19	; 0x07
    10e8:	26 83       	std	Z+6, r18	; 0x06
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <fputc+0x6e>
    10ec:	8b 01       	movw	r16, r22
    10ee:	ec 01       	movw	r28, r24
    10f0:	fb 01       	movw	r30, r22
    10f2:	00 84       	ldd	r0, Z+8	; 0x08
    10f4:	f1 85       	ldd	r31, Z+9	; 0x09
    10f6:	e0 2d       	mov	r30, r0
    10f8:	09 95       	icall
    10fa:	89 2b       	or	r24, r25
    10fc:	e1 f6       	brne	.-72     	; 0x10b6 <fputc+0x10>
    10fe:	d8 01       	movw	r26, r16
    1100:	16 96       	adiw	r26, 0x06	; 6
    1102:	8d 91       	ld	r24, X+
    1104:	9c 91       	ld	r25, X
    1106:	17 97       	sbiw	r26, 0x07	; 7
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	17 96       	adiw	r26, 0x07	; 7
    110c:	9c 93       	st	X, r25
    110e:	8e 93       	st	-X, r24
    1110:	16 97       	sbiw	r26, 0x06	; 6
    1112:	ce 01       	movw	r24, r28
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <__ultoa_invert>:
    111e:	fa 01       	movw	r30, r20
    1120:	aa 27       	eor	r26, r26
    1122:	28 30       	cpi	r18, 0x08	; 8
    1124:	51 f1       	breq	.+84     	; 0x117a <__ultoa_invert+0x5c>
    1126:	20 31       	cpi	r18, 0x10	; 16
    1128:	81 f1       	breq	.+96     	; 0x118a <__ultoa_invert+0x6c>
    112a:	e8 94       	clt
    112c:	6f 93       	push	r22
    112e:	6e 7f       	andi	r22, 0xFE	; 254
    1130:	6e 5f       	subi	r22, 0xFE	; 254
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	af 4f       	sbci	r26, 0xFF	; 255
    113a:	b1 e0       	ldi	r27, 0x01	; 1
    113c:	3e d0       	rcall	.+124    	; 0x11ba <__ultoa_invert+0x9c>
    113e:	b4 e0       	ldi	r27, 0x04	; 4
    1140:	3c d0       	rcall	.+120    	; 0x11ba <__ultoa_invert+0x9c>
    1142:	67 0f       	add	r22, r23
    1144:	78 1f       	adc	r23, r24
    1146:	89 1f       	adc	r24, r25
    1148:	9a 1f       	adc	r25, r26
    114a:	a1 1d       	adc	r26, r1
    114c:	68 0f       	add	r22, r24
    114e:	79 1f       	adc	r23, r25
    1150:	8a 1f       	adc	r24, r26
    1152:	91 1d       	adc	r25, r1
    1154:	a1 1d       	adc	r26, r1
    1156:	6a 0f       	add	r22, r26
    1158:	71 1d       	adc	r23, r1
    115a:	81 1d       	adc	r24, r1
    115c:	91 1d       	adc	r25, r1
    115e:	a1 1d       	adc	r26, r1
    1160:	20 d0       	rcall	.+64     	; 0x11a2 <__ultoa_invert+0x84>
    1162:	09 f4       	brne	.+2      	; 0x1166 <__ultoa_invert+0x48>
    1164:	68 94       	set
    1166:	3f 91       	pop	r19
    1168:	2a e0       	ldi	r18, 0x0A	; 10
    116a:	26 9f       	mul	r18, r22
    116c:	11 24       	eor	r1, r1
    116e:	30 19       	sub	r19, r0
    1170:	30 5d       	subi	r19, 0xD0	; 208
    1172:	31 93       	st	Z+, r19
    1174:	de f6       	brtc	.-74     	; 0x112c <__ultoa_invert+0xe>
    1176:	cf 01       	movw	r24, r30
    1178:	08 95       	ret
    117a:	46 2f       	mov	r20, r22
    117c:	47 70       	andi	r20, 0x07	; 7
    117e:	40 5d       	subi	r20, 0xD0	; 208
    1180:	41 93       	st	Z+, r20
    1182:	b3 e0       	ldi	r27, 0x03	; 3
    1184:	0f d0       	rcall	.+30     	; 0x11a4 <__ultoa_invert+0x86>
    1186:	c9 f7       	brne	.-14     	; 0x117a <__ultoa_invert+0x5c>
    1188:	f6 cf       	rjmp	.-20     	; 0x1176 <__ultoa_invert+0x58>
    118a:	46 2f       	mov	r20, r22
    118c:	4f 70       	andi	r20, 0x0F	; 15
    118e:	40 5d       	subi	r20, 0xD0	; 208
    1190:	4a 33       	cpi	r20, 0x3A	; 58
    1192:	18 f0       	brcs	.+6      	; 0x119a <__ultoa_invert+0x7c>
    1194:	49 5d       	subi	r20, 0xD9	; 217
    1196:	31 fd       	sbrc	r19, 1
    1198:	40 52       	subi	r20, 0x20	; 32
    119a:	41 93       	st	Z+, r20
    119c:	02 d0       	rcall	.+4      	; 0x11a2 <__ultoa_invert+0x84>
    119e:	a9 f7       	brne	.-22     	; 0x118a <__ultoa_invert+0x6c>
    11a0:	ea cf       	rjmp	.-44     	; 0x1176 <__ultoa_invert+0x58>
    11a2:	b4 e0       	ldi	r27, 0x04	; 4
    11a4:	a6 95       	lsr	r26
    11a6:	97 95       	ror	r25
    11a8:	87 95       	ror	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	ba 95       	dec	r27
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <__ultoa_invert+0x86>
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	61 05       	cpc	r22, r1
    11b6:	71 05       	cpc	r23, r1
    11b8:	08 95       	ret
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	0a 2e       	mov	r0, r26
    11c0:	06 94       	lsr	r0
    11c2:	57 95       	ror	r21
    11c4:	47 95       	ror	r20
    11c6:	37 95       	ror	r19
    11c8:	27 95       	ror	r18
    11ca:	ba 95       	dec	r27
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__ultoa_invert+0xa2>
    11ce:	62 0f       	add	r22, r18
    11d0:	73 1f       	adc	r23, r19
    11d2:	84 1f       	adc	r24, r20
    11d4:	95 1f       	adc	r25, r21
    11d6:	a0 1d       	adc	r26, r0
    11d8:	08 95       	ret

000011da <__prologue_saves__>:
    11da:	2f 92       	push	r2
    11dc:	3f 92       	push	r3
    11de:	4f 92       	push	r4
    11e0:	5f 92       	push	r5
    11e2:	6f 92       	push	r6
    11e4:	7f 92       	push	r7
    11e6:	8f 92       	push	r8
    11e8:	9f 92       	push	r9
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	ca 1b       	sub	r28, r26
    1204:	db 0b       	sbc	r29, r27
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	09 94       	ijmp

00001212 <__epilogue_restores__>:
    1212:	2a 88       	ldd	r2, Y+18	; 0x12
    1214:	39 88       	ldd	r3, Y+17	; 0x11
    1216:	48 88       	ldd	r4, Y+16	; 0x10
    1218:	5f 84       	ldd	r5, Y+15	; 0x0f
    121a:	6e 84       	ldd	r6, Y+14	; 0x0e
    121c:	7d 84       	ldd	r7, Y+13	; 0x0d
    121e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1220:	9b 84       	ldd	r9, Y+11	; 0x0b
    1222:	aa 84       	ldd	r10, Y+10	; 0x0a
    1224:	b9 84       	ldd	r11, Y+9	; 0x09
    1226:	c8 84       	ldd	r12, Y+8	; 0x08
    1228:	df 80       	ldd	r13, Y+7	; 0x07
    122a:	ee 80       	ldd	r14, Y+6	; 0x06
    122c:	fd 80       	ldd	r15, Y+5	; 0x05
    122e:	0c 81       	ldd	r16, Y+4	; 0x04
    1230:	1b 81       	ldd	r17, Y+3	; 0x03
    1232:	aa 81       	ldd	r26, Y+2	; 0x02
    1234:	b9 81       	ldd	r27, Y+1	; 0x01
    1236:	ce 0f       	add	r28, r30
    1238:	d1 1d       	adc	r29, r1
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	ed 01       	movw	r28, r26
    1246:	08 95       	ret

00001248 <_exit>:
    1248:	f8 94       	cli

0000124a <__stop_program>:
    124a:	ff cf       	rjmp	.-2      	; 0x124a <__stop_program>
