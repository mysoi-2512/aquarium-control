
Aquarium_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da5  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000970  00000000  00000000  000011a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a8  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c9  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fb  00000000  00000000  00002909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//   }

//   return 0;
// }
int main(void) {
    led_chasing_init();   // Setup LED pins
  a6:	0e 94 7e 00 	call	0xfc	; 0xfc <led_chasing_init>
    initPCINT();          // Setup PCINT for button
  aa:	0e 94 88 00 	call	0x110	; 0x110 <initPCINT>
    sei();                // Enable global interrupts
  ae:	78 94       	sei

    while (1) {
        led_right_to_left();
  b0:	0e 94 c4 00 	call	0x188	; 0x188 <led_right_to_left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x14>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x1e>
  c4:	00 00       	nop
        _delay_ms(500);
        led_left_to_right();
  c6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <led_left_to_right>
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	89 e6       	ldi	r24, 0x69	; 105
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x34>
  da:	00 00       	nop
  dc:	e9 cf       	rjmp	.-46     	; 0xb0 <main+0xa>

000000de <__vector_2>:

        EIMSK |= (1 << INT1);  
    }
}

ISR(INT1_vect) {
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
    button_pressed = 1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <led_chasing_init>:
        led_right_to_left();
        button_event[2] = 0;  // Clear the event
    }
    else if (button_event[3]) { // Button D17 pressed
        led_left_to_right();
        button_event[3] = 0;  // Clear the event
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	84 b9       	out	0x04, r24	; 4
 102:	84 b1       	in	r24, 0x04	; 4
 104:	8c 62       	ori	r24, 0x2C	; 44
 106:	84 b9       	out	0x04, r24	; 4
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	83 7d       	andi	r24, 0xD3	; 211
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	08 95       	ret

00000110 <initPCINT>:
 110:	87 b1       	in	r24, 0x07	; 7
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	87 b9       	out	0x07, r24	; 7
 116:	88 b1       	in	r24, 0x08	; 8
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	e8 e6       	ldi	r30, 0x68	; 104
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	84 60       	ori	r24, 0x04	; 4
 124:	80 83       	st	Z, r24
 126:	ed e6       	ldi	r30, 0x6D	; 109
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <shiftOut16>:
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	1b c0       	rjmp	.+54     	; 0x16c <shiftOut16+0x3a>
 136:	47 e0       	ldi	r20, 0x07	; 7
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	49 1b       	sub	r20, r25
 13c:	51 09       	sbc	r21, r1
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <shiftOut16+0x16>
 144:	35 95       	asr	r19
 146:	27 95       	ror	r18
 148:	4a 95       	dec	r20
 14a:	e2 f7       	brpl	.-8      	; 0x144 <shiftOut16+0x12>
 14c:	20 ff       	sbrs	r18, 0
 14e:	04 c0       	rjmp	.+8      	; 0x158 <shiftOut16+0x26>
 150:	25 b1       	in	r18, 0x05	; 5
 152:	28 60       	ori	r18, 0x08	; 8
 154:	25 b9       	out	0x05, r18	; 5
 156:	03 c0       	rjmp	.+6      	; 0x15e <shiftOut16+0x2c>
 158:	25 b1       	in	r18, 0x05	; 5
 15a:	27 7f       	andi	r18, 0xF7	; 247
 15c:	25 b9       	out	0x05, r18	; 5
 15e:	25 b1       	in	r18, 0x05	; 5
 160:	20 62       	ori	r18, 0x20	; 32
 162:	25 b9       	out	0x05, r18	; 5
 164:	25 b1       	in	r18, 0x05	; 5
 166:	2f 7d       	andi	r18, 0xDF	; 223
 168:	25 b9       	out	0x05, r18	; 5
 16a:	9f 5f       	subi	r25, 0xFF	; 255
 16c:	98 30       	cpi	r25, 0x08	; 8
 16e:	18 f3       	brcs	.-58     	; 0x136 <shiftOut16+0x4>
 170:	08 95       	ret

00000172 <latch>:
 172:	85 b1       	in	r24, 0x05	; 5
 174:	84 60       	ori	r24, 0x04	; 4
 176:	85 b9       	out	0x05, r24	; 5
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <latch+0x8>
 17e:	00 00       	nop
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <led_right_to_left>:
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	c1 e0       	ldi	r28, 0x01	; 1
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	14 c0       	rjmp	.+40     	; 0x1be <led_right_to_left+0x36>
 196:	8d 2f       	mov	r24, r29
 198:	0e 94 99 00 	call	0x132	; 0x132 <shiftOut16>
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 99 00 	call	0x132	; 0x132 <shiftOut16>
 1a2:	0e 94 b9 00 	call	0x172	; 0x172 <latch>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <led_right_to_left+0x24>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <led_right_to_left+0x2e>
 1b6:	00 00       	nop
 1b8:	cc 0f       	add	r28, r28
 1ba:	dd 1f       	adc	r29, r29
 1bc:	1f 5f       	subi	r17, 0xFF	; 255
 1be:	10 31       	cpi	r17, 0x10	; 16
 1c0:	50 f3       	brcs	.-44     	; 0x196 <led_right_to_left+0xe>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	08 95       	ret

000001ca <led_left_to_right>:
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d0 e8       	ldi	r29, 0x80	; 128
 1d6:	14 c0       	rjmp	.+40     	; 0x200 <led_left_to_right+0x36>
 1d8:	8d 2f       	mov	r24, r29
 1da:	0e 94 99 00 	call	0x132	; 0x132 <shiftOut16>
 1de:	8c 2f       	mov	r24, r28
 1e0:	0e 94 99 00 	call	0x132	; 0x132 <shiftOut16>
 1e4:	0e 94 b9 00 	call	0x172	; 0x172 <latch>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	81 ee       	ldi	r24, 0xE1	; 225
 1ec:	94 e0       	ldi	r25, 0x04	; 4
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <led_left_to_right+0x24>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <led_left_to_right+0x2e>
 1f8:	00 00       	nop
 1fa:	d6 95       	lsr	r29
 1fc:	c7 95       	ror	r28
 1fe:	1f 5f       	subi	r17, 0xFF	; 255
 200:	10 31       	cpi	r17, 0x10	; 16
 202:	50 f3       	brcs	.-44     	; 0x1d8 <led_left_to_right+0xe>
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <__vector_5>:
    }
}

ISR(PCINT2_vect) {
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24

    PORTB |= (1 << PB4);  // Bật LED test
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	85 b9       	out	0x05, r24	; 5

    // Check each button and set corresponding event flag
    if (!(PINC & (1 << PC0))) button_event[0] = 1; // D14
 21e:	30 99       	sbic	0x06, 0	; 6
 220:	03 c0       	rjmp	.+6      	; 0x228 <__vector_5+0x1c>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button_event>
    if (!(PINC & (1 << PC1))) button_event[1] = 1; // D15
 228:	31 99       	sbic	0x06, 1	; 6
 22a:	03 c0       	rjmp	.+6      	; 0x232 <__vector_5+0x26>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <button_event+0x1>
    if (!(PINC & (1 << PC2))) button_event[2] = 1; // D16
 232:	32 99       	sbic	0x06, 2	; 6
 234:	03 c0       	rjmp	.+6      	; 0x23c <__vector_5+0x30>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <button_event+0x2>
    if (!(PINC & (1 << PC3))) button_event[3] = 1; // D17
 23c:	33 99       	sbic	0x06, 3	; 6
 23e:	03 c0       	rjmp	.+6      	; 0x246 <__vector_5+0x3a>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_event+0x3>
}
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
