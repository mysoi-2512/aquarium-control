
Aquarium_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800100  00001422  000014b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800282  00800282  00001638  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002140  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001071  00000000  00000000  000039fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001332  00000000  00000000  00004a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00005da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079d  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001285  00000000  00000000  00006955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007bda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_1>
       8:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e2       	ldi	r30, 0x22	; 34
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 38       	cpi	r26, 0x82	; 130
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e8       	ldi	r26, 0x82	; 130
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 39       	cpi	r26, 0x90	; 144
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 02 03 	call	0x604	; 0x604 <main>
      9e:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ds18b20_init>:
#include "../Uart/uart_utils.h" 

#define DS18B20_PIN PD6

void ds18b20_init() {
	DDRD |= (1 << DS18B20_PIN);
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	80 64       	ori	r24, 0x40	; 64
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DS18B20_PIN);
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 64       	ori	r24, 0x40	; 64
      b0:	8b b9       	out	0x0b, r24	; 11
      b2:	08 95       	ret

000000b4 <ds18b20_reset>:
}

uint8_t ds18b20_reset(void) {
      b4:	cf 93       	push	r28
	uint8_t presence = 0;

	printf("Bat dau reset DS18B20...\r\n");
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	91 e0       	ldi	r25, 0x01	; 1
      ba:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>

	DDRD |= (1 << DS18B20_PIN);
      be:	8a b1       	in	r24, 0x0a	; 10
      c0:	80 64       	ori	r24, 0x40	; 64
      c2:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DS18B20_PIN);
      c4:	8b b1       	in	r24, 0x0b	; 11
      c6:	8f 7b       	andi	r24, 0xBF	; 191
      c8:	8b b9       	out	0x0b, r24	; 11
	printf("Keo chan xuong...\r\n");
      ca:	8a e1       	ldi	r24, 0x1A	; 26
      cc:	91 e0       	ldi	r25, 0x01	; 1
      ce:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d2:	8f ec       	ldi	r24, 0xCF	; 207
      d4:	97 e0       	ldi	r25, 0x07	; 7
      d6:	01 97       	sbiw	r24, 0x01	; 1
      d8:	f1 f7       	brne	.-4      	; 0xd6 <ds18b20_reset+0x22>
      da:	00 c0       	rjmp	.+0      	; 0xdc <ds18b20_reset+0x28>
      dc:	00 00       	nop
	_delay_us(500);

	DDRD &= ~(1 << DS18B20_PIN);
      de:	8a b1       	in	r24, 0x0a	; 10
      e0:	8f 7b       	andi	r24, 0xBF	; 191
      e2:	8a b9       	out	0x0a, r24	; 10
	printf("Tha chan...\r\n");
      e4:	8d e2       	ldi	r24, 0x2D	; 45
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
      ec:	87 e1       	ldi	r24, 0x17	; 23
      ee:	91 e0       	ldi	r25, 0x01	; 1
      f0:	01 97       	sbiw	r24, 0x01	; 1
      f2:	f1 f7       	brne	.-4      	; 0xf0 <ds18b20_reset+0x3c>
      f4:	00 c0       	rjmp	.+0      	; 0xf6 <ds18b20_reset+0x42>
      f6:	00 00       	nop
	_delay_us(70);

	if (!(PIND & (1 << DS18B20_PIN))) {
      f8:	4e 99       	sbic	0x09, 6	; 9
      fa:	06 c0       	rjmp	.+12     	; 0x108 <ds18b20_reset+0x54>
		printf("Phat hien presence pulse!\r\n");
      fc:	8a e3       	ldi	r24, 0x3A	; 58
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
		presence = 1;
     104:	c1 e0       	ldi	r28, 0x01	; 1
     106:	05 c0       	rjmp	.+10     	; 0x112 <ds18b20_reset+0x5e>
	} else {
		printf("KHONG phat hien presence pulse!\r\n");
     108:	85 e5       	ldi	r24, 0x55	; 85
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
	DDRD |= (1 << DS18B20_PIN);
	PORTD |= (1 << DS18B20_PIN);
}

uint8_t ds18b20_reset(void) {
	uint8_t presence = 0;
     110:	c0 e0       	ldi	r28, 0x00	; 0
     112:	8f ec       	ldi	r24, 0xCF	; 207
     114:	97 e0       	ldi	r25, 0x07	; 7
     116:	01 97       	sbiw	r24, 0x01	; 1
     118:	f1 f7       	brne	.-4      	; 0x116 <ds18b20_reset+0x62>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <ds18b20_reset+0x68>
     11c:	00 00       	nop
	} else {
		printf("KHONG phat hien presence pulse!\r\n");
	}
	_delay_us(500);

	printf("Ket thuc reset, presence = %d\r\n", presence);
     11e:	1f 92       	push	r1
     120:	cf 93       	push	r28
     122:	86 e7       	ldi	r24, 0x76	; 118
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	9f 93       	push	r25
     128:	8f 93       	push	r24
     12a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <printf>
	return presence;
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
}
     136:	8c 2f       	mov	r24, r28
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <ds18b20_write_bit>:

void ds18b20_write_bit(uint8_t bit) {

	DDRD |= (1 << DS18B20_PIN);
     13c:	9a b1       	in	r25, 0x0a	; 10
     13e:	90 64       	ori	r25, 0x40	; 64
     140:	9a b9       	out	0x0a, r25	; 10
	PORTD &= ~(1 << DS18B20_PIN);
     142:	9b b1       	in	r25, 0x0b	; 11
     144:	9f 7b       	andi	r25, 0xBF	; 191
     146:	9b b9       	out	0x0b, r25	; 11
     148:	9a e0       	ldi	r25, 0x0A	; 10
     14a:	9a 95       	dec	r25
     14c:	f1 f7       	brne	.-4      	; 0x14a <ds18b20_write_bit+0xe>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <ds18b20_write_bit+0x14>
	_delay_us(2); 

	if (bit) {
     150:	88 23       	and	r24, r24
     152:	19 f0       	breq	.+6      	; 0x15a <ds18b20_write_bit+0x1e>
		DDRD &= ~(1 << DS18B20_PIN); 
     154:	8a b1       	in	r24, 0x0a	; 10
     156:	8f 7b       	andi	r24, 0xBF	; 191
     158:	8a b9       	out	0x0a, r24	; 10
     15a:	8f ee       	ldi	r24, 0xEF	; 239
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <ds18b20_write_bit+0x22>
     162:	00 c0       	rjmp	.+0      	; 0x164 <ds18b20_write_bit+0x28>
     164:	00 00       	nop
	}
	_delay_us(60); 
	DDRD &= ~(1 << DS18B20_PIN); 
     166:	8a b1       	in	r24, 0x0a	; 10
     168:	8f 7b       	andi	r24, 0xBF	; 191
     16a:	8a b9       	out	0x0a, r24	; 10
     16c:	08 95       	ret

0000016e <ds18b20_read_bit>:
}

uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;

	DDRD |= (1 << DS18B20_PIN);
     16e:	8a b1       	in	r24, 0x0a	; 10
     170:	80 64       	ori	r24, 0x40	; 64
     172:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DS18B20_PIN);
     174:	8b b1       	in	r24, 0x0b	; 11
     176:	8f 7b       	andi	r24, 0xBF	; 191
     178:	8b b9       	out	0x0b, r24	; 11
     17a:	8a e0       	ldi	r24, 0x0A	; 10
     17c:	8a 95       	dec	r24
     17e:	f1 f7       	brne	.-4      	; 0x17c <ds18b20_read_bit+0xe>
     180:	00 c0       	rjmp	.+0      	; 0x182 <ds18b20_read_bit+0x14>
	_delay_us(2);

	DDRD &= ~(1 << DS18B20_PIN);
     182:	8a b1       	in	r24, 0x0a	; 10
     184:	8f 7b       	andi	r24, 0xBF	; 191
     186:	8a b9       	out	0x0a, r24	; 10
     188:	90 e5       	ldi	r25, 0x50	; 80
     18a:	9a 95       	dec	r25
     18c:	f1 f7       	brne	.-4      	; 0x18a <ds18b20_read_bit+0x1c>
	_delay_us(15);

	if (PIND & (1 << DS18B20_PIN)) {
     18e:	4e 99       	sbic	0x09, 6	; 9
     190:	02 c0       	rjmp	.+4      	; 0x196 <ds18b20_read_bit+0x28>
	_delay_us(60); 
	DDRD &= ~(1 << DS18B20_PIN); 
}

uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	01 c0       	rjmp	.+2      	; 0x198 <ds18b20_read_bit+0x2a>

	DDRD &= ~(1 << DS18B20_PIN);
	_delay_us(15);

	if (PIND & (1 << DS18B20_PIN)) {
		bit = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 ef       	ldi	r25, 0xF0	; 240
     19a:	9a 95       	dec	r25
     19c:	f1 f7       	brne	.-4      	; 0x19a <ds18b20_read_bit+0x2c>
	}
	_delay_us(45); 

	return bit;
}
     19e:	08 95       	ret

000001a0 <ds18b20_write_byte>:

void ds18b20_write_byte(uint8_t data) {
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++) {
     1a6:	c0 e0       	ldi	r28, 0x00	; 0
     1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <ds18b20_write_byte+0x22>
		ds18b20_write_bit(data & (1 << i));
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0c 2e       	mov	r0, r28
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <ds18b20_write_byte+0x16>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <ds18b20_write_byte+0x12>
     1ba:	8d 23       	and	r24, r29
     1bc:	0e 94 9e 00 	call	0x13c	; 0x13c <ds18b20_write_bit>

	return bit;
}

void ds18b20_write_byte(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
     1c0:	cf 5f       	subi	r28, 0xFF	; 255
     1c2:	c8 30       	cpi	r28, 0x08	; 8
     1c4:	90 f3       	brcs	.-28     	; 0x1aa <ds18b20_write_byte+0xa>
		ds18b20_write_bit(data & (1 << i));
	}
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <ds18b20_read_byte>:

uint8_t ds18b20_read_byte(void) {
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
     1d0:	c0 e0       	ldi	r28, 0x00	; 0
		ds18b20_write_bit(data & (1 << i));
	}
}

uint8_t ds18b20_read_byte(void) {
	uint8_t data = 0;
     1d2:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
     1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <ds18b20_read_byte+0x26>
		if (ds18b20_read_bit()) {
     1d6:	0e 94 b7 00 	call	0x16e	; 0x16e <ds18b20_read_bit>
     1da:	88 23       	and	r24, r24
     1dc:	49 f0       	breq	.+18     	; 0x1f0 <ds18b20_read_byte+0x24>
			data |= (1 << i);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0c 2e       	mov	r0, r28
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <ds18b20_read_byte+0x1e>
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	0a 94       	dec	r0
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <ds18b20_read_byte+0x1a>
     1ee:	d8 2b       	or	r29, r24
	}
}

uint8_t ds18b20_read_byte(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
     1f0:	cf 5f       	subi	r28, 0xFF	; 255
     1f2:	c8 30       	cpi	r28, 0x08	; 8
     1f4:	80 f3       	brcs	.-32     	; 0x1d6 <ds18b20_read_byte+0xa>
		if (ds18b20_read_bit()) {
			data |= (1 << i);
		}
	}
	return data;
}
     1f6:	8d 2f       	mov	r24, r29
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <ds18b20_request_temperature>:

void ds18b20_request_temperature(void) {
	ds18b20_reset();
     1fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <ds18b20_reset>
	ds18b20_write_byte(0xCC); 
     202:	8c ec       	ldi	r24, 0xCC	; 204
     204:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ds18b20_write_byte>
	ds18b20_write_byte(0x44); 
     208:	84 e4       	ldi	r24, 0x44	; 68
     20a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ds18b20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20e:	2f ef       	ldi	r18, 0xFF	; 255
     210:	8e e9       	ldi	r24, 0x9E	; 158
     212:	94 e2       	ldi	r25, 0x24	; 36
     214:	21 50       	subi	r18, 0x01	; 1
     216:	80 40       	sbci	r24, 0x00	; 0
     218:	90 40       	sbci	r25, 0x00	; 0
     21a:	e1 f7       	brne	.-8      	; 0x214 <ds18b20_request_temperature+0x16>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <ds18b20_request_temperature+0x20>
     21e:	00 00       	nop
     220:	08 95       	ret

00000222 <ds18b20_read_temperature>:
	_delay_ms(750); 
}

float ds18b20_read_temperature(void) {
     222:	cf 93       	push	r28
	uint8_t temp_low, temp_high;
	int16_t raw_temp;
	float temperature;

	ds18b20_reset();
     224:	0e 94 5a 00 	call	0xb4	; 0xb4 <ds18b20_reset>
	ds18b20_write_byte(0xCC); 
     228:	8c ec       	ldi	r24, 0xCC	; 204
     22a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ds18b20_write_byte>
	ds18b20_write_byte(0xBE); 
     22e:	8e eb       	ldi	r24, 0xBE	; 190
     230:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ds18b20_write_byte>

	temp_low = ds18b20_read_byte();
     234:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ds18b20_read_byte>
     238:	c8 2f       	mov	r28, r24
	temp_high = ds18b20_read_byte();
     23a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ds18b20_read_byte>

	raw_temp = (temp_high << 8) | temp_low;
     23e:	68 2f       	mov	r22, r24
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	76 2f       	mov	r23, r22
     244:	66 27       	eor	r22, r22
     246:	6c 2b       	or	r22, r28

	if (raw_temp & 0x8000) { 
     248:	77 23       	and	r23, r23
     24a:	8c f4       	brge	.+34     	; 0x26e <ds18b20_read_temperature+0x4c>
		raw_temp = (~raw_temp) + 1;
     24c:	71 95       	neg	r23
     24e:	61 95       	neg	r22
     250:	71 09       	sbc	r23, r1
		temperature = -((float)raw_temp / 16.0);
     252:	07 2e       	mov	r0, r23
     254:	00 0c       	add	r0, r0
     256:	88 0b       	sbc	r24, r24
     258:	99 0b       	sbc	r25, r25
     25a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e8       	ldi	r20, 0x80	; 128
     264:	5d e3       	ldi	r21, 0x3D	; 61
     266:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__mulsf3>
     26a:	90 58       	subi	r25, 0x80	; 128
     26c:	0c c0       	rjmp	.+24     	; 0x286 <ds18b20_read_temperature+0x64>
	} else { 
		temperature = (float)raw_temp / 16.0;
     26e:	07 2e       	mov	r0, r23
     270:	00 0c       	add	r0, r0
     272:	88 0b       	sbc	r24, r24
     274:	99 0b       	sbc	r25, r25
     276:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e8       	ldi	r20, 0x80	; 128
     280:	5d e3       	ldi	r21, 0x3D	; 61
     282:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__mulsf3>
	}

	return temperature;
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <i2c_init>:
#define F_CPU 16000000UL 
#include <util/delay.h>
#include <compat/twi.h> 

void i2c_init(void) {
	TWBR = ((F_CPU / I2C_SCL_FREQUENCY) - 16) / 2;
     28a:	88 e4       	ldi	r24, 0x48	; 72
     28c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN);
     290:	84 e0       	ldi	r24, 0x04	; 4
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     296:	08 95       	ret

00000298 <i2c_start>:
}

uint8_t i2c_start(uint8_t address) {
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
     298:	94 ea       	ldi	r25, 0xA4	; 164
     29a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     29e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2a2:	99 23       	and	r25, r25
     2a4:	e4 f7       	brge	.-8      	; 0x29e <i2c_start+0x6>

	if ((TWSR & 0xF8) != TW_START && (TWSR & 0xF8) != TW_REP_START) {
     2a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2aa:	98 7f       	andi	r25, 0xF8	; 248
     2ac:	98 30       	cpi	r25, 0x08	; 8
     2ae:	29 f0       	breq	.+10     	; 0x2ba <i2c_start+0x22>
     2b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2b4:	98 7f       	andi	r25, 0xF8	; 248
     2b6:	90 31       	cpi	r25, 0x10	; 16
     2b8:	89 f4       	brne	.+34     	; 0x2dc <i2c_start+0x44>
		return 1; 
	}

	TWDR = (address << 1) | TW_WRITE;
     2ba:	88 0f       	add	r24, r24
     2bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     2c0:	84 e8       	ldi	r24, 0x84	; 132
     2c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     2c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2ca:	88 23       	and	r24, r24
     2cc:	e4 f7       	brge	.-8      	; 0x2c6 <i2c_start+0x2e>

	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) {
     2ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2d2:	88 7f       	andi	r24, 0xF8	; 248
     2d4:	88 31       	cpi	r24, 0x18	; 24
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <i2c_start+0x48>
		return 2; 
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	08 95       	ret
uint8_t i2c_start(uint8_t address) {
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT)));

	if ((TWSR & 0xF8) != TW_START && (TWSR & 0xF8) != TW_REP_START) {
		return 1; 
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	08 95       	ret

	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) {
		return 2; 
	}

	return 0; 
     2e0:	80 e0       	ldi	r24, 0x00	; 0
}
     2e2:	08 95       	ret

000002e4 <i2c_write>:


uint8_t i2c_write(uint8_t data) {
	TWDR = data;
     2e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     2e8:	84 e8       	ldi	r24, 0x84	; 132
     2ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     2ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2f2:	88 23       	and	r24, r24
     2f4:	e4 f7       	brge	.-8      	; 0x2ee <i2c_write+0xa>

	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) {
     2f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2fa:	88 7f       	andi	r24, 0xF8	; 248
     2fc:	88 32       	cpi	r24, 0x28	; 40
     2fe:	11 f0       	breq	.+4      	; 0x304 <i2c_write+0x20>
		return 1; 
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	08 95       	ret
	}

	return 0;
     304:	80 e0       	ldi	r24, 0x00	; 0
}
     306:	08 95       	ret

00000308 <i2c_stop>:

void i2c_stop(void) {
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
     308:	84 e9       	ldi	r24, 0x94	; 148
     30a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO));
     30e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     312:	84 fd       	sbrc	r24, 4
     314:	fc cf       	rjmp	.-8      	; 0x30e <i2c_stop+0x6>
}
     316:	08 95       	ret

00000318 <lcd_send_nibble_i2c>:
#include <util/delay.h>
#include <string.h>
#include <stdio.h>
#include <inttypes.h>

static void lcd_send_nibble_i2c(uint8_t data) {
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
    uint8_t i2c_data;

    i2c_data = (data & 0xF0) | LCD_BL_PIN; 
     31c:	c8 2f       	mov	r28, r24
     31e:	c0 7f       	andi	r28, 0xF0	; 240
     320:	dc 2f       	mov	r29, r28
     322:	d8 60       	ori	r29, 0x08	; 8

    // Enable pulse
    i2c_start(LCD_I2C_ADDR);
     324:	87 e2       	ldi	r24, 0x27	; 39
     326:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_start>
    i2c_write(i2c_data | LCD_EN_PIN);
     32a:	8c 2f       	mov	r24, r28
     32c:	8c 60       	ori	r24, 0x0C	; 12
     32e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	8a e1       	ldi	r24, 0x1A	; 26
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_send_nibble_i2c+0x1c>
     338:	00 c0       	rjmp	.+0      	; 0x33a <lcd_send_nibble_i2c+0x22>
    _delay_us(5); 
    i2c_write(i2c_data & ~LCD_EN_PIN);
     33a:	8d 2f       	mov	r24, r29
     33c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_write>
    i2c_stop();
     340:	0e 94 84 01 	call	0x308	; 0x308 <i2c_stop>
     344:	87 ec       	ldi	r24, 0xC7	; 199
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_send_nibble_i2c+0x30>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_send_nibble_i2c+0x36>
     34e:	00 00       	nop
    _delay_us(50); 
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <lcd_send_byte_i2c>:

void lcd_send_byte_i2c(uint8_t data, uint8_t rs) {
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	18 2f       	mov	r17, r24
     35e:	c6 2f       	mov	r28, r22
    uint8_t i2c_data_high, i2c_data_low;

    i2c_start(LCD_I2C_ADDR); 
     360:	87 e2       	ldi	r24, 0x27	; 39
     362:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_start>

    i2c_data_high = (data & 0xF0) | LCD_BL_PIN | (rs ? LCD_RS_PIN : 0) | LCD_EN_PIN;
     366:	d1 e0       	ldi	r29, 0x01	; 1
     368:	c1 11       	cpse	r28, r1
     36a:	01 c0       	rjmp	.+2      	; 0x36e <lcd_send_byte_i2c+0x18>
     36c:	d0 e0       	ldi	r29, 0x00	; 0
     36e:	c1 2f       	mov	r28, r17
     370:	c0 7f       	andi	r28, 0xF0	; 240
     372:	c8 60       	ori	r28, 0x08	; 8
     374:	cd 2b       	or	r28, r29
     376:	c4 60       	ori	r28, 0x04	; 4
    i2c_write(i2c_data_high);
     378:	8c 2f       	mov	r24, r28
     37a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_write>
    //_delay_us(5);
    i2c_data_high &= ~LCD_EN_PIN;
    i2c_write(i2c_data_high);
     37e:	8c 2f       	mov	r24, r28
     380:	89 7f       	andi	r24, 0xF9	; 249
     382:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_write>
    //_delay_us(5);

    i2c_data_low = ((data << 4) & 0xF0) | LCD_BL_PIN | (rs ? LCD_RS_PIN : 0) | LCD_EN_PIN;
     386:	20 e1       	ldi	r18, 0x10	; 16
     388:	12 9f       	mul	r17, r18
     38a:	c0 01       	movw	r24, r0
     38c:	11 24       	eor	r1, r1
     38e:	88 60       	ori	r24, 0x08	; 8
     390:	d8 2b       	or	r29, r24
     392:	d4 60       	ori	r29, 0x04	; 4
    i2c_write(i2c_data_low);
     394:	8d 2f       	mov	r24, r29
     396:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_write>
   // _delay_us(5);
    i2c_data_low &= ~LCD_EN_PIN;
    i2c_write(i2c_data_low);
     39a:	8d 2f       	mov	r24, r29
     39c:	8b 7f       	andi	r24, 0xFB	; 251
     39e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <i2c_write>

    i2c_stop(); 
     3a2:	0e 94 84 01 	call	0x308	; 0x308 <i2c_stop>
   // _delay_us(100);
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	08 95       	ret

000003ae <lcd_send_char>:
    lcd_clear();
    lcd_send_byte_i2c(0x06, 0); 
}

void lcd_send_char(char data) {
    lcd_send_byte_i2c(data, 1); 
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_send_byte_i2c>
     3b4:	08 95       	ret

000003b6 <lcd_send_string>:
}

void lcd_send_string(const char *str) {
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
    while (*str) {
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <lcd_send_string+0xe>
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
     3be:	21 96       	adiw	r28, 0x01	; 1
     3c0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_send_char>
void lcd_send_char(char data) {
    lcd_send_byte_i2c(data, 1); 
}

void lcd_send_string(const char *str) {
    while (*str) {
     3c4:	88 81       	ld	r24, Y
     3c6:	81 11       	cpse	r24, r1
     3c8:	fa cf       	rjmp	.-12     	; 0x3be <lcd_send_string+0x8>
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
    }
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <lcd_set_cursor>:
}


void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t address;
    switch (row) {
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	11 f0       	breq	.+4      	; 0x3d8 <lcd_set_cursor+0x8>
        case 0: address = 0x00; break;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <lcd_set_cursor+0xa>
        case 1: address = 0x40; break;
     3d8:	80 e4       	ldi	r24, 0x40	; 64
        default: address = 0x00; break;
    }
    lcd_send_byte_i2c(0x80 | (address + col), 0); 
     3da:	86 0f       	add	r24, r22
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	80 68       	ori	r24, 0x80	; 128
     3e0:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_send_byte_i2c>
     3e4:	08 95       	ret

000003e6 <lcd_display_status>:
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
    }
}

void lcd_display_status(const SystemState* state) {
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	a1 97       	sbiw	r28, 0x21	; 33
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	8c 01       	movw	r16, r24
	
	lcd_set_cursor(0, 0);
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_set_cursor>
	char line1[16];
	uint8_t temp_int = (uint8_t)state->temperature;
     414:	f8 01       	movw	r30, r16
     416:	80 80       	ld	r8, Z
     418:	91 80       	ldd	r9, Z+1	; 0x01
     41a:	a2 80       	ldd	r10, Z+2	; 0x02
     41c:	b3 80       	ldd	r11, Z+3	; 0x03
     41e:	c5 01       	movw	r24, r10
     420:	b4 01       	movw	r22, r8
     422:	0e 94 82 05 	call	0xb04	; 0xb04 <__fixunssfsi>
     426:	f6 2e       	mov	r15, r22
	uint8_t temp_frac = (uint8_t)((state->temperature - temp_int) * 10);
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 b3 05 	call	0xb66	; 0xb66 <__floatsisf>
     432:	9b 01       	movw	r18, r22
     434:	ac 01       	movw	r20, r24
     436:	c5 01       	movw	r24, r10
     438:	b4 01       	movw	r22, r8
     43a:	0e 94 15 05 	call	0xa2a	; 0xa2a <__subsf3>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e2       	ldi	r20, 0x20	; 32
     444:	51 e4       	ldi	r21, 0x41	; 65
     446:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__mulsf3>
     44a:	0e 94 82 05 	call	0xb04	; 0xb04 <__fixunssfsi>

	snprintf(line1, sizeof(line1), "Temp: %d.%d C", temp_int, temp_frac);	
     44e:	1f 92       	push	r1
     450:	6f 93       	push	r22
     452:	1f 92       	push	r1
     454:	ff 92       	push	r15
     456:	8e e9       	ldi	r24, 0x9E	; 158
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	1f 92       	push	r1
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	8f 93       	push	r24
     464:	ae 01       	movw	r20, r28
     466:	4f 5f       	subi	r20, 0xFF	; 255
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	7a 01       	movw	r14, r20
     46c:	5f 93       	push	r21
     46e:	4f 93       	push	r20
     470:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <snprintf>
	lcd_send_string(line1);
     474:	c7 01       	movw	r24, r14
     476:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_send_string>


	lcd_set_cursor(1, 0);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_set_cursor>
	char line2[17];
	snprintf(line2, sizeof(line2), "Pump:%s PWM:%3d%%",
	state->pump_status ? "ON " : "OFF", state->pump_pwm_value);
     482:	f8 01       	movw	r30, r16
     484:	25 81       	ldd	r18, Z+5	; 0x05
     486:	84 81       	ldd	r24, Z+4	; 0x04
	lcd_send_string(line1);


	lcd_set_cursor(1, 0);
	char line2[17];
	snprintf(line2, sizeof(line2), "Pump:%s PWM:%3d%%",
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	88 23       	and	r24, r24
     494:	19 f0       	breq	.+6      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     496:	86 e9       	ldi	r24, 0x96	; 150
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     49c:	8a e9       	ldi	r24, 0x9A	; 154
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	1f 92       	push	r1
     4a2:	2f 93       	push	r18
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	8c ea       	ldi	r24, 0xAC	; 172
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	1f 92       	push	r1
     4b2:	81 e1       	ldi	r24, 0x11	; 17
     4b4:	8f 93       	push	r24
     4b6:	8e 01       	movw	r16, r28
     4b8:	0f 5e       	subi	r16, 0xEF	; 239
     4ba:	1f 4f       	sbci	r17, 0xFF	; 255
     4bc:	1f 93       	push	r17
     4be:	0f 93       	push	r16
     4c0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <snprintf>
	state->pump_status ? "ON " : "OFF", state->pump_pwm_value);
	lcd_send_string(line2);
     4c4:	c8 01       	movw	r24, r16
     4c6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_send_string>
}
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	a1 96       	adiw	r28, 0x21	; 33
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	bf 90       	pop	r11
     4ee:	af 90       	pop	r10
     4f0:	9f 90       	pop	r9
     4f2:	8f 90       	pop	r8
     4f4:	08 95       	ret

000004f6 <lcd_clear>:
    }
    lcd_send_byte_i2c(0x80 | (address + col), 0); 
}

void lcd_clear(void) {
    lcd_send_byte_i2c(0x01, 0); 
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_send_byte_i2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fe:	8f e1       	ldi	r24, 0x1F	; 31
     500:	9e e4       	ldi	r25, 0x4E	; 78
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <lcd_clear+0xc>
     506:	00 c0       	rjmp	.+0      	; 0x508 <lcd_clear+0x12>
     508:	00 00       	nop
     50a:	08 95       	ret

0000050c <lcd_init>:
    i2c_stop(); 
   // _delay_us(100);
}

void lcd_init(void) {
    i2c_init(); 
     50c:	0e 94 45 01 	call	0x28a	; 0x28a <i2c_init>
     510:	2f ef       	ldi	r18, 0xFF	; 255
     512:	81 ee       	ldi	r24, 0xE1	; 225
     514:	94 e0       	ldi	r25, 0x04	; 4
     516:	21 50       	subi	r18, 0x01	; 1
     518:	80 40       	sbci	r24, 0x00	; 0
     51a:	90 40       	sbci	r25, 0x00	; 0
     51c:	e1 f7       	brne	.-8      	; 0x516 <lcd_init+0xa>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <lcd_init+0x14>
     520:	00 00       	nop
    _delay_ms(100); 

    lcd_send_nibble_i2c(0x03 << 4);
     522:	80 e3       	ldi	r24, 0x30	; 48
     524:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_send_nibble_i2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	8f ec       	ldi	r24, 0xCF	; 207
     52a:	97 e0       	ldi	r25, 0x07	; 7
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <lcd_init+0x20>
     530:	00 c0       	rjmp	.+0      	; 0x532 <lcd_init+0x26>
     532:	00 00       	nop
    _delay_us(500); 
    lcd_send_nibble_i2c(0x03 << 4);
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_send_nibble_i2c>
     53a:	8f ec       	ldi	r24, 0xCF	; 207
     53c:	97 e0       	ldi	r25, 0x07	; 7
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <lcd_init+0x32>
     542:	00 c0       	rjmp	.+0      	; 0x544 <lcd_init+0x38>
     544:	00 00       	nop
    _delay_us(500); 
    lcd_send_nibble_i2c(0x03 << 4);
     546:	80 e3       	ldi	r24, 0x30	; 48
     548:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_send_nibble_i2c>
     54c:	8f e8       	ldi	r24, 0x8F	; 143
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd_init+0x44>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd_init+0x4a>
     556:	00 00       	nop
    _delay_us(100);  
    lcd_send_nibble_i2c(0x02 << 4);
     558:	80 e2       	ldi	r24, 0x20	; 32
     55a:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_send_nibble_i2c>

    lcd_send_byte_i2c(0x28, 0); 
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	88 e2       	ldi	r24, 0x28	; 40
     562:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_send_byte_i2c>
    lcd_send_byte_i2c(0x0C, 0);
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	8c e0       	ldi	r24, 0x0C	; 12
     56a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_send_byte_i2c>
    lcd_clear();
     56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
    lcd_send_byte_i2c(0x06, 0); 
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	86 e0       	ldi	r24, 0x06	; 6
     576:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_send_byte_i2c>
     57a:	08 95       	ret

0000057c <__vector_1>:

volatile uint8_t trigger = 0;
volatile uint8_t mode = 0;  
SystemState systemState;

ISR(INT0_vect) {
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	2f 93       	push	r18
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	80 e7       	ldi	r24, 0x70	; 112
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <__vector_1+0x16>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <__vector_1+0x20>
     59c:	00 00       	nop
	_delay_ms(50);  
	if (!(PIND & (1 << PD2))) {
     59e:	4a 99       	sbic	0x09, 2	; 9
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__vector_1+0x3c>
		mode++;
     5a2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
		if (mode > 3) mode = 0;
     5ac:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     5b0:	84 30       	cpi	r24, 0x04	; 4
     5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__vector_1+0x3c>
     5b4:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
	}
}
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	2f 91       	pop	r18
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <__vector_2>:

ISR(INT1_vect) {
     5c8:	1f 92       	push	r1
     5ca:	0f 92       	push	r0
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	0f 92       	push	r0
     5d0:	11 24       	eor	r1, r1
     5d2:	2f 93       	push	r18
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	80 e7       	ldi	r24, 0x70	; 112
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	80 40       	sbci	r24, 0x00	; 0
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <__vector_2+0x16>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <__vector_2+0x20>
     5e8:	00 00       	nop
	_delay_ms(50);
	if (!(PIND & (1 << PD3))) {
     5ea:	4b 99       	sbic	0x09, 3	; 9
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <__vector_2+0x2c>
		trigger = 1;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <trigger>
	}
}
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <main>:

int main(void) {
  USART_Init(UBRR_VALUE); 
     604:	87 e6       	ldi	r24, 0x67	; 103
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 c1 04 	call	0x982	; 0x982 <USART_Init>
  printf("Hello from Arduino!\r\n");
     60c:	8e eb       	ldi	r24, 0xBE	; 190
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
  printf("Chuong trinh doc nhiet do DS18B20, hien thi LCD (I2C) va UART (AVR)\r\n");
     614:	83 ed       	ldi	r24, 0xD3	; 211
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>

	i2c_init();
     61c:	0e 94 45 01 	call	0x28a	; 0x28a <i2c_init>
	ds18b20_init();
     620:	0e 94 53 00 	call	0xa6	; 0xa6 <ds18b20_init>
	lcd_init();
     624:	0e 94 86 02 	call	0x50c	; 0x50c <lcd_init>
	pwm_init();
     628:	0e 94 da 03 	call	0x7b4	; 0x7b4 <pwm_init>
	servo_init();  
     62c:	0e 94 27 04 	call	0x84e	; 0x84e <servo_init>
	led_chasing_init();
     630:	0e 94 70 04 	call	0x8e0	; 0x8e0 <led_chasing_init>
	INT0_init();
     634:	0e 94 74 04 	call	0x8e8	; 0x8e8 <INT0_init>
	INT1_init();
     638:	0e 94 5e 04 	call	0x8bc	; 0x8bc <INT1_init>
  
  sei();    
     63c:	78 94       	sei
  while (1) {
    if (ds18b20_reset()) {	
     63e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ds18b20_reset>
     642:	88 23       	and	r24, r24
     644:	49 f1       	breq	.+82     	; 0x698 <main+0x94>
		
		// Get temp	
        ds18b20_request_temperature();		
     646:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ds18b20_request_temperature>
		systemState.temperature = ds18b20_read_temperature();
     64a:	0e 94 11 01 	call	0x222	; 0x222 <ds18b20_read_temperature>
     64e:	c4 e8       	ldi	r28, 0x84	; 132
     650:	d2 e0       	ldi	r29, 0x02	; 2
     652:	68 83       	st	Y, r22
     654:	79 83       	std	Y+1, r23	; 0x01
     656:	8a 83       	std	Y+2, r24	; 0x02
     658:	9b 83       	std	Y+3, r25	; 0x03
		
		// Update PWM duty		
		pwm_update_based_on_temp(systemState.temperature, &systemState);
     65a:	ae 01       	movw	r20, r28
     65c:	0e 94 19 04 	call	0x832	; 0x832 <pwm_update_based_on_temp>
		
		// Show pump state	
		lcd_display_status(&systemState);
     660:	ce 01       	movw	r24, r28
     662:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_display_status>
        printf("Reset Result: 1\r\n"); 
     666:	88 e1       	ldi	r24, 0x18	; 24
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
        printf("Nhiet do: %.1f *C\r\n", systemState.temperature);
     66e:	88 81       	ld	r24, Y
     670:	99 81       	ldd	r25, Y+1	; 0x01
     672:	2a 81       	ldd	r18, Y+2	; 0x02
     674:	3b 81       	ldd	r19, Y+3	; 0x03
     676:	3f 93       	push	r19
     678:	2f 93       	push	r18
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	89 e2       	ldi	r24, 0x29	; 41
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	9f 93       	push	r25
     684:	8f 93       	push	r24
     686:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <printf>
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	12 c0       	rjmp	.+36     	; 0x6bc <main+0xb8>
    } else {
        printf("Reset Result: 0\r\n"); 
     698:	8d e3       	ldi	r24, 0x3D	; 61
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
        lcd_clear();
     6a0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
        lcd_set_cursor(0, 0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_set_cursor>
        lcd_send_string("Sensor Error");
     6ac:	8e e4       	ldi	r24, 0x4E	; 78
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_send_string>
        printf("Loi: Khong tim thay cam bien DS18B20\r\n");
     6b4:	8b e5       	ldi	r24, 0x5B	; 91
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 bb 06 	call	0xd76	; 0xd76 <puts>
	}

    // Check mode and handle led chasing
	switch (mode) {
     6bc:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	a9 f0       	breq	.+42     	; 0x6ee <main+0xea>
     6c4:	30 f0       	brcs	.+12     	; 0x6d2 <main+0xce>
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	c1 f1       	breq	.+112    	; 0x73a <main+0x136>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <main+0xcc>
     6ce:	57 c0       	rjmp	.+174    	; 0x77e <main+0x17a>
     6d0:	5f c0       	rjmp	.+190    	; 0x790 <main+0x18c>
		case 0:
		updateLEDs(0x0000);  // T?t t?t c? LED
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 aa 04 	call	0x954	; 0x954 <updateLEDs>
     6da:	2f ef       	ldi	r18, 0xFF	; 255
     6dc:	81 ee       	ldi	r24, 0xE1	; 225
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	80 40       	sbci	r24, 0x00	; 0
     6e4:	90 40       	sbci	r25, 0x00	; 0
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <main+0xdc>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0xe6>
     6ea:	00 00       	nop
     6ec:	51 c0       	rjmp	.+162    	; 0x790 <main+0x18c>
		_delay_ms(100);
		break;

		case 1:
		updateLEDs(0xFFFF);  
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	9f ef       	ldi	r25, 0xFF	; 255
     6f2:	0e 94 aa 04 	call	0x954	; 0x954 <updateLEDs>
     6f6:	2f ef       	ldi	r18, 0xFF	; 255
     6f8:	81 ee       	ldi	r24, 0xE1	; 225
     6fa:	94 e0       	ldi	r25, 0x04	; 4
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	80 40       	sbci	r24, 0x00	; 0
     700:	90 40       	sbci	r25, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <main+0xf8>
     704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x102>
     706:	00 00       	nop
     708:	43 c0       	rjmp	.+134    	; 0x790 <main+0x18c>
		break;

		case 2: {  
			uint16_t pattern = 0;
			for (uint8_t i = 0; i < 16 && mode == 2; i++) {
				pattern |= (1 << i);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0c 2e       	mov	r0, r28
     710:	02 c0       	rjmp	.+4      	; 0x716 <main+0x112>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	0a 94       	dec	r0
     718:	e2 f7       	brpl	.-8      	; 0x712 <main+0x10e>
     71a:	08 2b       	or	r16, r24
     71c:	19 2b       	or	r17, r25
				updateLEDs(pattern);
     71e:	c8 01       	movw	r24, r16
     720:	0e 94 aa 04 	call	0x954	; 0x954 <updateLEDs>
     724:	2f ef       	ldi	r18, 0xFF	; 255
     726:	82 e5       	ldi	r24, 0x52	; 82
     728:	97 e0       	ldi	r25, 0x07	; 7
     72a:	21 50       	subi	r18, 0x01	; 1
     72c:	80 40       	sbci	r24, 0x00	; 0
     72e:	90 40       	sbci	r25, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <main+0x126>
     732:	00 c0       	rjmp	.+0      	; 0x734 <main+0x130>
     734:	00 00       	nop
		_delay_ms(100);
		break;

		case 2: {  
			uint16_t pattern = 0;
			for (uint8_t i = 0; i < 16 && mode == 2; i++) {
     736:	cf 5f       	subi	r28, 0xFF	; 255
     738:	03 c0       	rjmp	.+6      	; 0x740 <main+0x13c>
        lcd_send_string("Sensor Error");
        printf("Loi: Khong tim thay cam bien DS18B20\r\n");
	}

    // Check mode and handle led chasing
	switch (mode) {
     73a:	c0 e0       	ldi	r28, 0x00	; 0
     73c:	00 e0       	ldi	r16, 0x00	; 0
     73e:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(100);
		break;

		case 2: {  
			uint16_t pattern = 0;
			for (uint8_t i = 0; i < 16 && mode == 2; i++) {
     740:	c0 31       	cpi	r28, 0x10	; 16
     742:	30 f5       	brcc	.+76     	; 0x790 <main+0x18c>
     744:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	f9 f2       	breq	.-66     	; 0x70a <main+0x106>
     74c:	21 c0       	rjmp	.+66     	; 0x790 <main+0x18c>
		}

		case 3: { 
			uint16_t pattern = 0;
			for (int8_t i = 15; i >= 0 && mode == 3; i--) {
				pattern |= (1 << i);
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0c 2e       	mov	r0, r28
     754:	02 c0       	rjmp	.+4      	; 0x75a <main+0x156>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	0a 94       	dec	r0
     75c:	e2 f7       	brpl	.-8      	; 0x756 <main+0x152>
     75e:	08 2b       	or	r16, r24
     760:	19 2b       	or	r17, r25
				updateLEDs(pattern);
     762:	c8 01       	movw	r24, r16
     764:	0e 94 aa 04 	call	0x954	; 0x954 <updateLEDs>
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	82 e5       	ldi	r24, 0x52	; 82
     76c:	97 e0       	ldi	r25, 0x07	; 7
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <main+0x16a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x174>
     778:	00 00       	nop
			break;
		}

		case 3: { 
			uint16_t pattern = 0;
			for (int8_t i = 15; i >= 0 && mode == 3; i--) {
     77a:	c1 50       	subi	r28, 0x01	; 1
     77c:	03 c0       	rjmp	.+6      	; 0x784 <main+0x180>
        lcd_send_string("Sensor Error");
        printf("Loi: Khong tim thay cam bien DS18B20\r\n");
	}

    // Check mode and handle led chasing
	switch (mode) {
     77e:	cf e0       	ldi	r28, 0x0F	; 15
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}

		case 3: { 
			uint16_t pattern = 0;
			for (int8_t i = 15; i >= 0 && mode == 3; i--) {
     784:	cc 23       	and	r28, r28
     786:	24 f0       	brlt	.+8      	; 0x790 <main+0x18c>
     788:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     78c:	83 30       	cpi	r24, 0x03	; 3
     78e:	f9 f2       	breq	.-66     	; 0x74e <main+0x14a>
			break;
		}
	}
	
	// handle servo
	if (trigger) {
     790:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <trigger>
     794:	88 23       	and	r24, r24
     796:	21 f0       	breq	.+8      	; 0x7a0 <main+0x19c>
		servo_rotate_180_then_return();
     798:	0e 94 41 04 	call	0x882	; 0x882 <servo_rotate_180_then_return>
		trigger = 0;
     79c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <trigger>
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	87 ea       	ldi	r24, 0xA7	; 167
     7a4:	91 e6       	ldi	r25, 0x61	; 97
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	80 40       	sbci	r24, 0x00	; 0
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <main+0x1a2>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x1ac>
     7b0:	00 00       	nop
     7b2:	45 cf       	rjmp	.-374    	; 0x63e <main+0x3a>

000007b4 <pwm_init>:
#define PWM_FREQ 1000
#define TOP 249	// TOP = OCR0A

void pwm_init()
{
	PWM_DDR |= (1 << PWM_PIN) | (1 << LEDBLUE_PIN) | (1 << LEDRED_PIN);  // PD5, PD4, PD7 = output
     7b4:	8a b1       	in	r24, 0x0a	; 10
     7b6:	80 6b       	ori	r24, 0xB0	; 176
     7b8:	8a b9       	out	0x0a, r24	; 10
	COOLER_DDR |= (1 << COOLER_PIN);  // PB0 output control relay
     7ba:	84 b1       	in	r24, 0x04	; 4
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	84 b9       	out	0x04, r24	; 4

	TCCR0A = (1 << WGM01) | (1 << WGM00);
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02);
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	85 bd       	out	0x25, r24	; 37
	OCR0A = TOP;
     7c8:	89 ef       	ldi	r24, 0xF9	; 249
     7ca:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     7cc:	18 bc       	out	0x28, r1	; 40
     7ce:	08 95       	ret

000007d0 <pwm_set_duty>:
}

void pwm_set_duty(uint8_t duty)
{
     7d0:	48 2f       	mov	r20, r24
	if (duty > 100) duty = 100;
     7d2:	85 36       	cpi	r24, 0x65	; 101
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <pwm_set_duty+0x8>
     7d6:	44 e6       	ldi	r20, 0x64	; 100

	uint8_t ocr_value = ((uint16_t)(OCR0A + 1) * duty) / 100;
     7d8:	87 b5       	in	r24, 0x27	; 39
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	48 9f       	mul	r20, r24
     7e0:	90 01       	movw	r18, r0
     7e2:	49 9f       	mul	r20, r25
     7e4:	30 0d       	add	r19, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	36 95       	lsr	r19
     7ea:	27 95       	ror	r18
     7ec:	36 95       	lsr	r19
     7ee:	27 95       	ror	r18
     7f0:	ab e7       	ldi	r26, 0x7B	; 123
     7f2:	b4 e1       	ldi	r27, 0x14	; 20
     7f4:	0e 94 ac 06 	call	0xd58	; 0xd58 <__umulhisi3>
     7f8:	96 95       	lsr	r25
     7fa:	87 95       	ror	r24
	OCR0B = ocr_value;
     7fc:	88 bd       	out	0x28, r24	; 40

	if (duty > 0) {
     7fe:	44 23       	and	r20, r20
     800:	61 f0       	breq	.+24     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		
		TCCR0A |= (1 << COM0B1);		
     802:	84 b5       	in	r24, 0x24	; 36
     804:	80 62       	ori	r24, 0x20	; 32
     806:	84 bd       	out	0x24, r24	; 36
		TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00); // prescaler = 64		
     808:	8b e0       	ldi	r24, 0x0B	; 11
     80a:	85 bd       	out	0x25, r24	; 37
		PORTD |= (1 << LEDRED_PIN);   // PD7 ON
     80c:	8b b1       	in	r24, 0x0b	; 11
     80e:	80 68       	ori	r24, 0x80	; 128
     810:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << LEDBLUE_PIN);  // PD4 OFF
     812:	8b b1       	in	r24, 0x0b	; 11
     814:	8f 7e       	andi	r24, 0xEF	; 239
     816:	8b b9       	out	0x0b, r24	; 11
     818:	08 95       	ret
		} else {
		
		TCCR0A &= ~(1 << COM0B1);		
     81a:	84 b5       	in	r24, 0x24	; 36
     81c:	8f 7d       	andi	r24, 0xDF	; 223
     81e:	84 bd       	out	0x24, r24	; 36
		TCCR0B = (1 << WGM02);		
     820:	88 e0       	ldi	r24, 0x08	; 8
     822:	85 bd       	out	0x25, r24	; 37
		PORTD |= (1 << LEDBLUE_PIN);   // PD4 ON
     824:	8b b1       	in	r24, 0x0b	; 11
     826:	80 61       	ori	r24, 0x10	; 16
     828:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << LEDRED_PIN);  // PD7 OFF
     82a:	8b b1       	in	r24, 0x0b	; 11
     82c:	8f 77       	andi	r24, 0x7F	; 127
     82e:	8b b9       	out	0x0b, r24	; 11
     830:	08 95       	ret

00000832 <pwm_update_based_on_temp>:
	}
}

void pwm_update_based_on_temp(float temp, SystemState* state)
{
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	ea 01       	movw	r28, r20
	else if (temp >= 30.0) duty = 0;
	else if (temp >= 25.0) duty = 0;
	else duty = 0;

	// Set duty for PWM
	pwm_set_duty(duty);
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <pwm_set_duty>

	// Update pump status in state
	state->pump_pwm_value = duty;  
     83e:	1d 82       	std	Y+5, r1	; 0x05
	state->pump_status = (duty > 0) ? 1 : 0;  
     840:	1c 82       	std	Y+4, r1	; 0x04

	if (duty > 0) {
		COOLER_PORT |= (1 << COOLER_PIN); 
		} else {
		COOLER_PORT &= ~(1 << COOLER_PIN);  
     842:	85 b1       	in	r24, 0x05	; 5
     844:	8e 7f       	andi	r24, 0xFE	; 254
     846:	85 b9       	out	0x05, r24	; 5
	}
}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <servo_init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void servo_init() {
	DDRB |= (1 << PB1);
     84e:	84 b1       	in	r24, 0x04	; 4
     850:	82 60       	ori	r24, 0x02	; 2
     852:	84 b9       	out	0x04, r24	; 4

	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
     854:	e0 e8       	ldi	r30, 0x80	; 128
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	82 68       	ori	r24, 0x82	; 130
     85c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  
     85e:	e1 e8       	ldi	r30, 0x81	; 129
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	8a 61       	ori	r24, 0x1A	; 26
     866:	80 83       	st	Z, r24

	ICR1 = 39999;
     868:	8f e3       	ldi	r24, 0x3F	; 63
     86a:	9c e9       	ldi	r25, 0x9C	; 156
     86c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     870:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	OCR1A = 1000;
     874:	88 ee       	ldi	r24, 0xE8	; 232
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     87c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     880:	08 95       	ret

00000882 <servo_rotate_180_then_return>:
}

void servo_rotate_180_then_return() {
	
	OCR1A = 4500;
     882:	e8 e8       	ldi	r30, 0x88	; 136
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	84 e9       	ldi	r24, 0x94	; 148
     888:	91 e1       	ldi	r25, 0x11	; 17
     88a:	91 83       	std	Z+1, r25	; 0x01
     88c:	80 83       	st	Z, r24
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	83 ed       	ldi	r24, 0xD3	; 211
     892:	90 e3       	ldi	r25, 0x30	; 48
     894:	21 50       	subi	r18, 0x01	; 1
     896:	80 40       	sbci	r24, 0x00	; 0
     898:	90 40       	sbci	r25, 0x00	; 0
     89a:	e1 f7       	brne	.-8      	; 0x894 <servo_rotate_180_then_return+0x12>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <servo_rotate_180_then_return+0x1c>
     89e:	00 00       	nop
	_delay_ms(1000);  

	OCR1A = 1000;
     8a0:	88 ee       	ldi	r24, 0xE8	; 232
     8a2:	93 e0       	ldi	r25, 0x03	; 3
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24
     8a8:	2f ef       	ldi	r18, 0xFF	; 255
     8aa:	83 ed       	ldi	r24, 0xD3	; 211
     8ac:	90 e3       	ldi	r25, 0x30	; 48
     8ae:	21 50       	subi	r18, 0x01	; 1
     8b0:	80 40       	sbci	r24, 0x00	; 0
     8b2:	90 40       	sbci	r25, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <servo_rotate_180_then_return+0x2c>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <servo_rotate_180_then_return+0x36>
     8b8:	00 00       	nop
     8ba:	08 95       	ret

000008bc <INT1_init>:
	_delay_ms(1000); 
}

void INT1_init() {
	DDRD &= ~(1 << PD3);
     8bc:	8a b1       	in	r24, 0x0a	; 10
     8be:	87 7f       	andi	r24, 0xF7	; 247
     8c0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD3);
     8c2:	8b b1       	in	r24, 0x0b	; 11
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	8b b9       	out	0x0b, r24	; 11

	// C?u h?nh INT1: c?nh xu?ng
	EICRA |= (1 << ISC11);
     8c8:	e9 e6       	ldi	r30, 0x69	; 105
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	88 60       	ori	r24, 0x08	; 8
     8d0:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC10);
     8d2:	80 81       	ld	r24, Z
     8d4:	8b 7f       	andi	r24, 0xFB	; 251
     8d6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     8d8:	8d b3       	in	r24, 0x1d	; 29
     8da:	82 60       	ori	r24, 0x02	; 2
     8dc:	8d bb       	out	0x1d, r24	; 29
     8de:	08 95       	ret

000008e0 <led_chasing_init>:

#define SET(x)   (PORTB |= (1 << (x)))
#define CLR(x)   (PORTB &= ~(1 << (x)))

void led_chasing_init() {
	DDRB |= (1 << DATA_PIN) | (1 << CLOCK_PIN) | (1 << LATCH_PIN);
     8e0:	84 b1       	in	r24, 0x04	; 4
     8e2:	8c 62       	ori	r24, 0x2C	; 44
     8e4:	84 b9       	out	0x04, r24	; 4
     8e6:	08 95       	ret

000008e8 <INT0_init>:
}

void INT0_init() {
	DDRD &= ~(1 << PD2);    
     8e8:	8a b1       	in	r24, 0x0a	; 10
     8ea:	8b 7f       	andi	r24, 0xFB	; 251
     8ec:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);     
     8ee:	8b b1       	in	r24, 0x0b	; 11
     8f0:	84 60       	ori	r24, 0x04	; 4
     8f2:	8b b9       	out	0x0b, r24	; 11

	EICRA |= (1 << ISC01);  
     8f4:	e9 e6       	ldi	r30, 0x69	; 105
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	82 60       	ori	r24, 0x02	; 2
     8fc:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
     8fe:	80 81       	ld	r24, Z
     900:	8e 7f       	andi	r24, 0xFE	; 254
     902:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);    
     904:	8d b3       	in	r24, 0x1d	; 29
     906:	81 60       	ori	r24, 0x01	; 1
     908:	8d bb       	out	0x1d, r24	; 29
     90a:	08 95       	ret

0000090c <shiftOut>:
}

void shiftOut(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	1f c0       	rjmp	.+62     	; 0x94e <shiftOut+0x42>
		if (data & (1 << (7 - i)))
     910:	47 e0       	ldi	r20, 0x07	; 7
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	49 1b       	sub	r20, r25
     916:	51 09       	sbc	r21, r1
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <shiftOut+0x16>
     91e:	35 95       	asr	r19
     920:	27 95       	ror	r18
     922:	4a 95       	dec	r20
     924:	e2 f7       	brpl	.-8      	; 0x91e <shiftOut+0x12>
     926:	20 ff       	sbrs	r18, 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <shiftOut+0x26>
		SET(DATA_PIN);
     92a:	25 b1       	in	r18, 0x05	; 5
     92c:	28 60       	ori	r18, 0x08	; 8
     92e:	25 b9       	out	0x05, r18	; 5
     930:	03 c0       	rjmp	.+6      	; 0x938 <shiftOut+0x2c>
		else
		CLR(DATA_PIN);
     932:	25 b1       	in	r18, 0x05	; 5
     934:	27 7f       	andi	r18, 0xF7	; 247
     936:	25 b9       	out	0x05, r18	; 5

		SET(CLOCK_PIN);
     938:	25 b1       	in	r18, 0x05	; 5
     93a:	20 62       	ori	r18, 0x20	; 32
     93c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93e:	25 e0       	ldi	r18, 0x05	; 5
     940:	2a 95       	dec	r18
     942:	f1 f7       	brne	.-4      	; 0x940 <shiftOut+0x34>
     944:	00 00       	nop
		_delay_us(1);
		CLR(CLOCK_PIN);
     946:	25 b1       	in	r18, 0x05	; 5
     948:	2f 7d       	andi	r18, 0xDF	; 223
     94a:	25 b9       	out	0x05, r18	; 5
	EICRA &= ~(1 << ISC00);
	EIMSK |= (1 << INT0);    
}

void shiftOut(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
     94c:	9f 5f       	subi	r25, 0xFF	; 255
     94e:	98 30       	cpi	r25, 0x08	; 8
     950:	f8 f2       	brcs	.-66     	; 0x910 <shiftOut+0x4>

		SET(CLOCK_PIN);
		_delay_us(1);
		CLR(CLOCK_PIN);
	}
}
     952:	08 95       	ret

00000954 <updateLEDs>:

void updateLEDs(uint16_t pattern) {
     954:	cf 93       	push	r28
     956:	c8 2f       	mov	r28, r24
	uint8_t highByte = (pattern >> 8);   // LED 9–16
	uint8_t lowByte  = (pattern & 0xFF); // LED 1–8

	CLR(LATCH_PIN);
     958:	85 b1       	in	r24, 0x05	; 5
     95a:	8b 7f       	andi	r24, 0xFB	; 251
     95c:	85 b9       	out	0x05, r24	; 5
	shiftOut(highByte);  
     95e:	89 2f       	mov	r24, r25
     960:	0e 94 86 04 	call	0x90c	; 0x90c <shiftOut>
	shiftOut(lowByte);   
     964:	8c 2f       	mov	r24, r28
     966:	0e 94 86 04 	call	0x90c	; 0x90c <shiftOut>
	SET(LATCH_PIN);
     96a:	85 b1       	in	r24, 0x05	; 5
     96c:	84 60       	ori	r24, 0x04	; 4
     96e:	85 b9       	out	0x05, r24	; 5
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	8a 95       	dec	r24
     974:	f1 f7       	brne	.-4      	; 0x972 <updateLEDs+0x1e>
     976:	00 00       	nop
	_delay_us(1);
	CLR(LATCH_PIN);
     978:	85 b1       	in	r24, 0x05	; 5
     97a:	8b 7f       	andi	r24, 0xFB	; 251
     97c:	85 b9       	out	0x05, r24	; 5
}
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
#include <stdarg.h>

void USART_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
     982:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     986:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     98a:	88 e1       	ldi	r24, 0x18	; 24
     98c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3 << UCSZ00);
     990:	86 e0       	ldi	r24, 0x06	; 6
     992:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     996:	08 95       	ret

00000998 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
     998:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     99c:	95 ff       	sbrs	r25, 5
     99e:	fc cf       	rjmp	.-8      	; 0x998 <USART_Transmit>
	UDR0 = data;
     9a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9a4:	08 95       	ret

000009a6 <USART_PutString>:
}

void USART_PutString(char *str) {
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != 0; i++) {
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <USART_PutString+0x16>
		USART_Transmit(str[i]);
     9b6:	0e 94 cc 04 	call	0x998	; 0x998 <USART_Transmit>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART_PutString(char *str) {
	for (int i = 0; str[i] != 0; i++) {
     9ba:	21 96       	adiw	r28, 0x01	; 1
     9bc:	f8 01       	movw	r30, r16
     9be:	ec 0f       	add	r30, r28
     9c0:	fd 1f       	adc	r31, r29
     9c2:	80 81       	ld	r24, Z
     9c4:	81 11       	cpse	r24, r1
     9c6:	f7 cf       	rjmp	.-18     	; 0x9b6 <USART_PutString+0x10>
		USART_Transmit(str[i]);
	}
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	08 95       	ret

000009d2 <printf>:

int printf(const char *fmt, ...) {
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	c0 58       	subi	r28, 0x80	; 128
     9e0:	d1 09       	sbc	r29, r1
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	9e 01       	movw	r18, r28
     9ee:	29 57       	subi	r18, 0x79	; 121
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	f9 01       	movw	r30, r18
     9f4:	41 91       	ld	r20, Z+
     9f6:	51 91       	ld	r21, Z+
     9f8:	9f 01       	movw	r18, r30
	char buffer[128];
	va_list args;
	va_start(args, fmt);
	int len = vsnprintf(buffer, sizeof(buffer), fmt, args);
     9fa:	60 e8       	ldi	r22, 0x80	; 128
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	0e 94 1b 07 	call	0xe36	; 0xe36 <vsnprintf>
     a06:	8c 01       	movw	r16, r24
	va_end(args);
	USART_PutString(buffer);
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <USART_PutString>
	return len;
     a10:	c8 01       	movw	r24, r16
     a12:	c0 58       	subi	r28, 0x80	; 128
     a14:	df 4f       	sbci	r29, 0xFF	; 255
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <__subsf3>:
     a2a:	50 58       	subi	r21, 0x80	; 128

00000a2c <__addsf3>:
     a2c:	bb 27       	eor	r27, r27
     a2e:	aa 27       	eor	r26, r26
     a30:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__addsf3x>
     a34:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>
     a38:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_pscA>
     a3c:	38 f0       	brcs	.+14     	; 0xa4c <__addsf3+0x20>
     a3e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_pscB>
     a42:	20 f0       	brcs	.+8      	; 0xa4c <__addsf3+0x20>
     a44:	39 f4       	brne	.+14     	; 0xa54 <__addsf3+0x28>
     a46:	9f 3f       	cpi	r25, 0xFF	; 255
     a48:	19 f4       	brne	.+6      	; 0xa50 <__addsf3+0x24>
     a4a:	26 f4       	brtc	.+8      	; 0xa54 <__addsf3+0x28>
     a4c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_nan>
     a50:	0e f4       	brtc	.+2      	; 0xa54 <__addsf3+0x28>
     a52:	e0 95       	com	r30
     a54:	e7 fb       	bst	r30, 7
     a56:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>

00000a5a <__addsf3x>:
     a5a:	e9 2f       	mov	r30, r25
     a5c:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_split3>
     a60:	58 f3       	brcs	.-42     	; 0xa38 <__addsf3+0xc>
     a62:	ba 17       	cp	r27, r26
     a64:	62 07       	cpc	r22, r18
     a66:	73 07       	cpc	r23, r19
     a68:	84 07       	cpc	r24, r20
     a6a:	95 07       	cpc	r25, r21
     a6c:	20 f0       	brcs	.+8      	; 0xa76 <__addsf3x+0x1c>
     a6e:	79 f4       	brne	.+30     	; 0xa8e <__addsf3x+0x34>
     a70:	a6 f5       	brtc	.+104    	; 0xada <__addsf3x+0x80>
     a72:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_zero>
     a76:	0e f4       	brtc	.+2      	; 0xa7a <__addsf3x+0x20>
     a78:	e0 95       	com	r30
     a7a:	0b 2e       	mov	r0, r27
     a7c:	ba 2f       	mov	r27, r26
     a7e:	a0 2d       	mov	r26, r0
     a80:	0b 01       	movw	r0, r22
     a82:	b9 01       	movw	r22, r18
     a84:	90 01       	movw	r18, r0
     a86:	0c 01       	movw	r0, r24
     a88:	ca 01       	movw	r24, r20
     a8a:	a0 01       	movw	r20, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	ff 27       	eor	r31, r31
     a90:	59 1b       	sub	r21, r25
     a92:	99 f0       	breq	.+38     	; 0xaba <__addsf3x+0x60>
     a94:	59 3f       	cpi	r21, 0xF9	; 249
     a96:	50 f4       	brcc	.+20     	; 0xaac <__addsf3x+0x52>
     a98:	50 3e       	cpi	r21, 0xE0	; 224
     a9a:	68 f1       	brcs	.+90     	; 0xaf6 <__addsf3x+0x9c>
     a9c:	1a 16       	cp	r1, r26
     a9e:	f0 40       	sbci	r31, 0x00	; 0
     aa0:	a2 2f       	mov	r26, r18
     aa2:	23 2f       	mov	r18, r19
     aa4:	34 2f       	mov	r19, r20
     aa6:	44 27       	eor	r20, r20
     aa8:	58 5f       	subi	r21, 0xF8	; 248
     aaa:	f3 cf       	rjmp	.-26     	; 0xa92 <__addsf3x+0x38>
     aac:	46 95       	lsr	r20
     aae:	37 95       	ror	r19
     ab0:	27 95       	ror	r18
     ab2:	a7 95       	ror	r26
     ab4:	f0 40       	sbci	r31, 0x00	; 0
     ab6:	53 95       	inc	r21
     ab8:	c9 f7       	brne	.-14     	; 0xaac <__addsf3x+0x52>
     aba:	7e f4       	brtc	.+30     	; 0xada <__addsf3x+0x80>
     abc:	1f 16       	cp	r1, r31
     abe:	ba 0b       	sbc	r27, r26
     ac0:	62 0b       	sbc	r22, r18
     ac2:	73 0b       	sbc	r23, r19
     ac4:	84 0b       	sbc	r24, r20
     ac6:	ba f0       	brmi	.+46     	; 0xaf6 <__addsf3x+0x9c>
     ac8:	91 50       	subi	r25, 0x01	; 1
     aca:	a1 f0       	breq	.+40     	; 0xaf4 <__addsf3x+0x9a>
     acc:	ff 0f       	add	r31, r31
     ace:	bb 1f       	adc	r27, r27
     ad0:	66 1f       	adc	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	88 1f       	adc	r24, r24
     ad6:	c2 f7       	brpl	.-16     	; 0xac8 <__addsf3x+0x6e>
     ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <__addsf3x+0x9c>
     ada:	ba 0f       	add	r27, r26
     adc:	62 1f       	adc	r22, r18
     ade:	73 1f       	adc	r23, r19
     ae0:	84 1f       	adc	r24, r20
     ae2:	48 f4       	brcc	.+18     	; 0xaf6 <__addsf3x+0x9c>
     ae4:	87 95       	ror	r24
     ae6:	77 95       	ror	r23
     ae8:	67 95       	ror	r22
     aea:	b7 95       	ror	r27
     aec:	f7 95       	ror	r31
     aee:	9e 3f       	cpi	r25, 0xFE	; 254
     af0:	08 f0       	brcs	.+2      	; 0xaf4 <__addsf3x+0x9a>
     af2:	b0 cf       	rjmp	.-160    	; 0xa54 <__addsf3+0x28>
     af4:	93 95       	inc	r25
     af6:	88 0f       	add	r24, r24
     af8:	08 f0       	brcs	.+2      	; 0xafc <__addsf3x+0xa2>
     afa:	99 27       	eor	r25, r25
     afc:	ee 0f       	add	r30, r30
     afe:	97 95       	ror	r25
     b00:	87 95       	ror	r24
     b02:	08 95       	ret

00000b04 <__fixunssfsi>:
     b04:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_splitA>
     b08:	88 f0       	brcs	.+34     	; 0xb2c <__fixunssfsi+0x28>
     b0a:	9f 57       	subi	r25, 0x7F	; 127
     b0c:	98 f0       	brcs	.+38     	; 0xb34 <__fixunssfsi+0x30>
     b0e:	b9 2f       	mov	r27, r25
     b10:	99 27       	eor	r25, r25
     b12:	b7 51       	subi	r27, 0x17	; 23
     b14:	b0 f0       	brcs	.+44     	; 0xb42 <__fixunssfsi+0x3e>
     b16:	e1 f0       	breq	.+56     	; 0xb50 <__fixunssfsi+0x4c>
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	88 1f       	adc	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	1a f0       	brmi	.+6      	; 0xb28 <__fixunssfsi+0x24>
     b22:	ba 95       	dec	r27
     b24:	c9 f7       	brne	.-14     	; 0xb18 <__fixunssfsi+0x14>
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <__fixunssfsi+0x4c>
     b28:	b1 30       	cpi	r27, 0x01	; 1
     b2a:	91 f0       	breq	.+36     	; 0xb50 <__fixunssfsi+0x4c>
     b2c:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_zero>
     b30:	b1 e0       	ldi	r27, 0x01	; 1
     b32:	08 95       	ret
     b34:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_zero>
     b38:	67 2f       	mov	r22, r23
     b3a:	78 2f       	mov	r23, r24
     b3c:	88 27       	eor	r24, r24
     b3e:	b8 5f       	subi	r27, 0xF8	; 248
     b40:	39 f0       	breq	.+14     	; 0xb50 <__fixunssfsi+0x4c>
     b42:	b9 3f       	cpi	r27, 0xF9	; 249
     b44:	cc f3       	brlt	.-14     	; 0xb38 <__fixunssfsi+0x34>
     b46:	86 95       	lsr	r24
     b48:	77 95       	ror	r23
     b4a:	67 95       	ror	r22
     b4c:	b3 95       	inc	r27
     b4e:	d9 f7       	brne	.-10     	; 0xb46 <__fixunssfsi+0x42>
     b50:	3e f4       	brtc	.+14     	; 0xb60 <__fixunssfsi+0x5c>
     b52:	90 95       	com	r25
     b54:	80 95       	com	r24
     b56:	70 95       	com	r23
     b58:	61 95       	neg	r22
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	8f 4f       	sbci	r24, 0xFF	; 255
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	08 95       	ret

00000b62 <__floatunsisf>:
     b62:	e8 94       	clt
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__floatsisf+0x12>

00000b66 <__floatsisf>:
     b66:	97 fb       	bst	r25, 7
     b68:	3e f4       	brtc	.+14     	; 0xb78 <__floatsisf+0x12>
     b6a:	90 95       	com	r25
     b6c:	80 95       	com	r24
     b6e:	70 95       	com	r23
     b70:	61 95       	neg	r22
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	8f 4f       	sbci	r24, 0xFF	; 255
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	99 23       	and	r25, r25
     b7a:	a9 f0       	breq	.+42     	; 0xba6 <__floatsisf+0x40>
     b7c:	f9 2f       	mov	r31, r25
     b7e:	96 e9       	ldi	r25, 0x96	; 150
     b80:	bb 27       	eor	r27, r27
     b82:	93 95       	inc	r25
     b84:	f6 95       	lsr	r31
     b86:	87 95       	ror	r24
     b88:	77 95       	ror	r23
     b8a:	67 95       	ror	r22
     b8c:	b7 95       	ror	r27
     b8e:	f1 11       	cpse	r31, r1
     b90:	f8 cf       	rjmp	.-16     	; 0xb82 <__floatsisf+0x1c>
     b92:	fa f4       	brpl	.+62     	; 0xbd2 <__floatsisf+0x6c>
     b94:	bb 0f       	add	r27, r27
     b96:	11 f4       	brne	.+4      	; 0xb9c <__floatsisf+0x36>
     b98:	60 ff       	sbrs	r22, 0
     b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <__floatsisf+0x6c>
     b9c:	6f 5f       	subi	r22, 0xFF	; 255
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	8f 4f       	sbci	r24, 0xFF	; 255
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <__floatsisf+0x6c>
     ba6:	88 23       	and	r24, r24
     ba8:	11 f0       	breq	.+4      	; 0xbae <__floatsisf+0x48>
     baa:	96 e9       	ldi	r25, 0x96	; 150
     bac:	11 c0       	rjmp	.+34     	; 0xbd0 <__floatsisf+0x6a>
     bae:	77 23       	and	r23, r23
     bb0:	21 f0       	breq	.+8      	; 0xbba <__floatsisf+0x54>
     bb2:	9e e8       	ldi	r25, 0x8E	; 142
     bb4:	87 2f       	mov	r24, r23
     bb6:	76 2f       	mov	r23, r22
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__floatsisf+0x5e>
     bba:	66 23       	and	r22, r22
     bbc:	71 f0       	breq	.+28     	; 0xbda <__floatsisf+0x74>
     bbe:	96 e8       	ldi	r25, 0x86	; 134
     bc0:	86 2f       	mov	r24, r22
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	2a f0       	brmi	.+10     	; 0xbd2 <__floatsisf+0x6c>
     bc8:	9a 95       	dec	r25
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	da f7       	brpl	.-10     	; 0xbc8 <__floatsisf+0x62>
     bd2:	88 0f       	add	r24, r24
     bd4:	96 95       	lsr	r25
     bd6:	87 95       	ror	r24
     bd8:	97 f9       	bld	r25, 7
     bda:	08 95       	ret

00000bdc <__fp_inf>:
     bdc:	97 f9       	bld	r25, 7
     bde:	9f 67       	ori	r25, 0x7F	; 127
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	08 95       	ret

00000be8 <__fp_nan>:
     be8:	9f ef       	ldi	r25, 0xFF	; 255
     bea:	80 ec       	ldi	r24, 0xC0	; 192
     bec:	08 95       	ret

00000bee <__fp_pscA>:
     bee:	00 24       	eor	r0, r0
     bf0:	0a 94       	dec	r0
     bf2:	16 16       	cp	r1, r22
     bf4:	17 06       	cpc	r1, r23
     bf6:	18 06       	cpc	r1, r24
     bf8:	09 06       	cpc	r0, r25
     bfa:	08 95       	ret

00000bfc <__fp_pscB>:
     bfc:	00 24       	eor	r0, r0
     bfe:	0a 94       	dec	r0
     c00:	12 16       	cp	r1, r18
     c02:	13 06       	cpc	r1, r19
     c04:	14 06       	cpc	r1, r20
     c06:	05 06       	cpc	r0, r21
     c08:	08 95       	ret

00000c0a <__fp_round>:
     c0a:	09 2e       	mov	r0, r25
     c0c:	03 94       	inc	r0
     c0e:	00 0c       	add	r0, r0
     c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0xc>
     c12:	88 23       	and	r24, r24
     c14:	52 f0       	brmi	.+20     	; 0xc2a <__fp_round+0x20>
     c16:	bb 0f       	add	r27, r27
     c18:	40 f4       	brcc	.+16     	; 0xc2a <__fp_round+0x20>
     c1a:	bf 2b       	or	r27, r31
     c1c:	11 f4       	brne	.+4      	; 0xc22 <__fp_round+0x18>
     c1e:	60 ff       	sbrs	r22, 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__fp_round+0x20>
     c22:	6f 5f       	subi	r22, 0xFF	; 255
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	8f 4f       	sbci	r24, 0xFF	; 255
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	08 95       	ret

00000c2c <__fp_split3>:
     c2c:	57 fd       	sbrc	r21, 7
     c2e:	90 58       	subi	r25, 0x80	; 128
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	59 f0       	breq	.+22     	; 0xc4c <__fp_splitA+0x10>
     c36:	5f 3f       	cpi	r21, 0xFF	; 255
     c38:	71 f0       	breq	.+28     	; 0xc56 <__fp_splitA+0x1a>
     c3a:	47 95       	ror	r20

00000c3c <__fp_splitA>:
     c3c:	88 0f       	add	r24, r24
     c3e:	97 fb       	bst	r25, 7
     c40:	99 1f       	adc	r25, r25
     c42:	61 f0       	breq	.+24     	; 0xc5c <__fp_splitA+0x20>
     c44:	9f 3f       	cpi	r25, 0xFF	; 255
     c46:	79 f0       	breq	.+30     	; 0xc66 <__fp_splitA+0x2a>
     c48:	87 95       	ror	r24
     c4a:	08 95       	ret
     c4c:	12 16       	cp	r1, r18
     c4e:	13 06       	cpc	r1, r19
     c50:	14 06       	cpc	r1, r20
     c52:	55 1f       	adc	r21, r21
     c54:	f2 cf       	rjmp	.-28     	; 0xc3a <__fp_split3+0xe>
     c56:	46 95       	lsr	r20
     c58:	f1 df       	rcall	.-30     	; 0xc3c <__fp_splitA>
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <__fp_splitA+0x30>
     c5c:	16 16       	cp	r1, r22
     c5e:	17 06       	cpc	r1, r23
     c60:	18 06       	cpc	r1, r24
     c62:	99 1f       	adc	r25, r25
     c64:	f1 cf       	rjmp	.-30     	; 0xc48 <__fp_splitA+0xc>
     c66:	86 95       	lsr	r24
     c68:	71 05       	cpc	r23, r1
     c6a:	61 05       	cpc	r22, r1
     c6c:	08 94       	sec
     c6e:	08 95       	ret

00000c70 <__fp_zero>:
     c70:	e8 94       	clt

00000c72 <__fp_szero>:
     c72:	bb 27       	eor	r27, r27
     c74:	66 27       	eor	r22, r22
     c76:	77 27       	eor	r23, r23
     c78:	cb 01       	movw	r24, r22
     c7a:	97 f9       	bld	r25, 7
     c7c:	08 95       	ret

00000c7e <__mulsf3>:
     c7e:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3x>
     c82:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>
     c86:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_pscA>
     c8a:	38 f0       	brcs	.+14     	; 0xc9a <__mulsf3+0x1c>
     c8c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_pscB>
     c90:	20 f0       	brcs	.+8      	; 0xc9a <__mulsf3+0x1c>
     c92:	95 23       	and	r25, r21
     c94:	11 f0       	breq	.+4      	; 0xc9a <__mulsf3+0x1c>
     c96:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>
     c9a:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_nan>
     c9e:	11 24       	eor	r1, r1
     ca0:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>

00000ca4 <__mulsf3x>:
     ca4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_split3>
     ca8:	70 f3       	brcs	.-36     	; 0xc86 <__mulsf3+0x8>

00000caa <__mulsf3_pse>:
     caa:	95 9f       	mul	r25, r21
     cac:	c1 f3       	breq	.-16     	; 0xc9e <__mulsf3+0x20>
     cae:	95 0f       	add	r25, r21
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	55 1f       	adc	r21, r21
     cb4:	62 9f       	mul	r22, r18
     cb6:	f0 01       	movw	r30, r0
     cb8:	72 9f       	mul	r23, r18
     cba:	bb 27       	eor	r27, r27
     cbc:	f0 0d       	add	r31, r0
     cbe:	b1 1d       	adc	r27, r1
     cc0:	63 9f       	mul	r22, r19
     cc2:	aa 27       	eor	r26, r26
     cc4:	f0 0d       	add	r31, r0
     cc6:	b1 1d       	adc	r27, r1
     cc8:	aa 1f       	adc	r26, r26
     cca:	64 9f       	mul	r22, r20
     ccc:	66 27       	eor	r22, r22
     cce:	b0 0d       	add	r27, r0
     cd0:	a1 1d       	adc	r26, r1
     cd2:	66 1f       	adc	r22, r22
     cd4:	82 9f       	mul	r24, r18
     cd6:	22 27       	eor	r18, r18
     cd8:	b0 0d       	add	r27, r0
     cda:	a1 1d       	adc	r26, r1
     cdc:	62 1f       	adc	r22, r18
     cde:	73 9f       	mul	r23, r19
     ce0:	b0 0d       	add	r27, r0
     ce2:	a1 1d       	adc	r26, r1
     ce4:	62 1f       	adc	r22, r18
     ce6:	83 9f       	mul	r24, r19
     ce8:	a0 0d       	add	r26, r0
     cea:	61 1d       	adc	r22, r1
     cec:	22 1f       	adc	r18, r18
     cee:	74 9f       	mul	r23, r20
     cf0:	33 27       	eor	r19, r19
     cf2:	a0 0d       	add	r26, r0
     cf4:	61 1d       	adc	r22, r1
     cf6:	23 1f       	adc	r18, r19
     cf8:	84 9f       	mul	r24, r20
     cfa:	60 0d       	add	r22, r0
     cfc:	21 1d       	adc	r18, r1
     cfe:	82 2f       	mov	r24, r18
     d00:	76 2f       	mov	r23, r22
     d02:	6a 2f       	mov	r22, r26
     d04:	11 24       	eor	r1, r1
     d06:	9f 57       	subi	r25, 0x7F	; 127
     d08:	50 40       	sbci	r21, 0x00	; 0
     d0a:	9a f0       	brmi	.+38     	; 0xd32 <__mulsf3_pse+0x88>
     d0c:	f1 f0       	breq	.+60     	; 0xd4a <__mulsf3_pse+0xa0>
     d0e:	88 23       	and	r24, r24
     d10:	4a f0       	brmi	.+18     	; 0xd24 <__mulsf3_pse+0x7a>
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	bb 1f       	adc	r27, r27
     d18:	66 1f       	adc	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	88 1f       	adc	r24, r24
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	50 40       	sbci	r21, 0x00	; 0
     d22:	a9 f7       	brne	.-22     	; 0xd0e <__mulsf3_pse+0x64>
     d24:	9e 3f       	cpi	r25, 0xFE	; 254
     d26:	51 05       	cpc	r21, r1
     d28:	80 f0       	brcs	.+32     	; 0xd4a <__mulsf3_pse+0xa0>
     d2a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>
     d2e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>
     d32:	5f 3f       	cpi	r21, 0xFF	; 255
     d34:	e4 f3       	brlt	.-8      	; 0xd2e <__mulsf3_pse+0x84>
     d36:	98 3e       	cpi	r25, 0xE8	; 232
     d38:	d4 f3       	brlt	.-12     	; 0xd2e <__mulsf3_pse+0x84>
     d3a:	86 95       	lsr	r24
     d3c:	77 95       	ror	r23
     d3e:	67 95       	ror	r22
     d40:	b7 95       	ror	r27
     d42:	f7 95       	ror	r31
     d44:	e7 95       	ror	r30
     d46:	9f 5f       	subi	r25, 0xFF	; 255
     d48:	c1 f7       	brne	.-16     	; 0xd3a <__mulsf3_pse+0x90>
     d4a:	fe 2b       	or	r31, r30
     d4c:	88 0f       	add	r24, r24
     d4e:	91 1d       	adc	r25, r1
     d50:	96 95       	lsr	r25
     d52:	87 95       	ror	r24
     d54:	97 f9       	bld	r25, 7
     d56:	08 95       	ret

00000d58 <__umulhisi3>:
     d58:	a2 9f       	mul	r26, r18
     d5a:	b0 01       	movw	r22, r0
     d5c:	b3 9f       	mul	r27, r19
     d5e:	c0 01       	movw	r24, r0
     d60:	a3 9f       	mul	r26, r19
     d62:	70 0d       	add	r23, r0
     d64:	81 1d       	adc	r24, r1
     d66:	11 24       	eor	r1, r1
     d68:	91 1d       	adc	r25, r1
     d6a:	b2 9f       	mul	r27, r18
     d6c:	70 0d       	add	r23, r0
     d6e:	81 1d       	adc	r24, r1
     d70:	11 24       	eor	r1, r1
     d72:	91 1d       	adc	r25, r1
     d74:	08 95       	ret

00000d76 <puts>:
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <__iob+0x2>
     d82:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <__iob+0x3>
     d86:	23 81       	ldd	r18, Z+3	; 0x03
     d88:	21 ff       	sbrs	r18, 1
     d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <puts+0x4c>
     d8c:	8c 01       	movw	r16, r24
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	c0 e0       	ldi	r28, 0x00	; 0
     d92:	f8 01       	movw	r30, r16
     d94:	81 91       	ld	r24, Z+
     d96:	8f 01       	movw	r16, r30
     d98:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__iob+0x2>
     d9c:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <__iob+0x3>
     da0:	db 01       	movw	r26, r22
     da2:	18 96       	adiw	r26, 0x08	; 8
     da4:	ed 91       	ld	r30, X+
     da6:	fc 91       	ld	r31, X
     da8:	19 97       	sbiw	r26, 0x09	; 9
     daa:	88 23       	and	r24, r24
     dac:	31 f0       	breq	.+12     	; 0xdba <puts+0x44>
     dae:	09 95       	icall
     db0:	89 2b       	or	r24, r25
     db2:	79 f3       	breq	.-34     	; 0xd92 <puts+0x1c>
     db4:	df ef       	ldi	r29, 0xFF	; 255
     db6:	cf ef       	ldi	r28, 0xFF	; 255
     db8:	ec cf       	rjmp	.-40     	; 0xd92 <puts+0x1c>
     dba:	8a e0       	ldi	r24, 0x0A	; 10
     dbc:	09 95       	icall
     dbe:	89 2b       	or	r24, r25
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <puts+0x52>
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <puts+0x56>
     dc8:	8d 2f       	mov	r24, r29
     dca:	9c 2f       	mov	r25, r28
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <snprintf>:
     dd6:	ae e0       	ldi	r26, 0x0E	; 14
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 ef       	ldi	r30, 0xF1	; 241
     ddc:	f6 e0       	ldi	r31, 0x06	; 6
     dde:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__prologue_saves__+0x1c>
     de2:	0d 89       	ldd	r16, Y+21	; 0x15
     de4:	1e 89       	ldd	r17, Y+22	; 0x16
     de6:	8f 89       	ldd	r24, Y+23	; 0x17
     de8:	98 8d       	ldd	r25, Y+24	; 0x18
     dea:	26 e0       	ldi	r18, 0x06	; 6
     dec:	2c 83       	std	Y+4, r18	; 0x04
     dee:	1a 83       	std	Y+2, r17	; 0x02
     df0:	09 83       	std	Y+1, r16	; 0x01
     df2:	97 ff       	sbrs	r25, 7
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <snprintf+0x24>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e8       	ldi	r25, 0x80	; 128
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	ae 01       	movw	r20, r28
     e02:	45 5e       	subi	r20, 0xE5	; 229
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	69 8d       	ldd	r22, Y+25	; 0x19
     e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 47 07 	call	0xe8e	; 0xe8e <vfprintf>
     e12:	4d 81       	ldd	r20, Y+5	; 0x05
     e14:	5e 81       	ldd	r21, Y+6	; 0x06
     e16:	57 fd       	sbrc	r21, 7
     e18:	0a c0       	rjmp	.+20     	; 0xe2e <snprintf+0x58>
     e1a:	2f 81       	ldd	r18, Y+7	; 0x07
     e1c:	38 85       	ldd	r19, Y+8	; 0x08
     e1e:	42 17       	cp	r20, r18
     e20:	53 07       	cpc	r21, r19
     e22:	0c f4       	brge	.+2      	; 0xe26 <snprintf+0x50>
     e24:	9a 01       	movw	r18, r20
     e26:	f8 01       	movw	r30, r16
     e28:	e2 0f       	add	r30, r18
     e2a:	f3 1f       	adc	r31, r19
     e2c:	10 82       	st	Z, r1
     e2e:	2e 96       	adiw	r28, 0x0e	; 14
     e30:	e4 e0       	ldi	r30, 0x04	; 4
     e32:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__epilogue_restores__+0x1c>

00000e36 <vsnprintf>:
     e36:	ae e0       	ldi	r26, 0x0E	; 14
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e2       	ldi	r30, 0x21	; 33
     e3c:	f7 e0       	ldi	r31, 0x07	; 7
     e3e:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__prologue_saves__+0x1c>
     e42:	8c 01       	movw	r16, r24
     e44:	fa 01       	movw	r30, r20
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	8c 83       	std	Y+4, r24	; 0x04
     e4a:	1a 83       	std	Y+2, r17	; 0x02
     e4c:	09 83       	std	Y+1, r16	; 0x01
     e4e:	77 ff       	sbrs	r23, 7
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <vsnprintf+0x20>
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e8       	ldi	r23, 0x80	; 128
     e56:	cb 01       	movw	r24, r22
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	a9 01       	movw	r20, r18
     e60:	bf 01       	movw	r22, r30
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	0e 94 47 07 	call	0xe8e	; 0xe8e <vfprintf>
     e6a:	4d 81       	ldd	r20, Y+5	; 0x05
     e6c:	5e 81       	ldd	r21, Y+6	; 0x06
     e6e:	57 fd       	sbrc	r21, 7
     e70:	0a c0       	rjmp	.+20     	; 0xe86 <vsnprintf+0x50>
     e72:	2f 81       	ldd	r18, Y+7	; 0x07
     e74:	38 85       	ldd	r19, Y+8	; 0x08
     e76:	42 17       	cp	r20, r18
     e78:	53 07       	cpc	r21, r19
     e7a:	0c f4       	brge	.+2      	; 0xe7e <vsnprintf+0x48>
     e7c:	9a 01       	movw	r18, r20
     e7e:	f8 01       	movw	r30, r16
     e80:	e2 0f       	add	r30, r18
     e82:	f3 1f       	adc	r31, r19
     e84:	10 82       	st	Z, r1
     e86:	2e 96       	adiw	r28, 0x0e	; 14
     e88:	e4 e0       	ldi	r30, 0x04	; 4
     e8a:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__epilogue_restores__+0x1c>

00000e8e <vfprintf>:
     e8e:	ab e0       	ldi	r26, 0x0B	; 11
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ed e4       	ldi	r30, 0x4D	; 77
     e94:	f7 e0       	ldi	r31, 0x07	; 7
     e96:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__prologue_saves__>
     e9a:	6c 01       	movw	r12, r24
     e9c:	7b 01       	movw	r14, r22
     e9e:	8a 01       	movw	r16, r20
     ea0:	fc 01       	movw	r30, r24
     ea2:	17 82       	std	Z+7, r1	; 0x07
     ea4:	16 82       	std	Z+6, r1	; 0x06
     ea6:	83 81       	ldd	r24, Z+3	; 0x03
     ea8:	81 ff       	sbrs	r24, 1
     eaa:	cc c1       	rjmp	.+920    	; 0x1244 <vfprintf+0x3b6>
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	3c 01       	movw	r6, r24
     eb2:	f6 01       	movw	r30, r12
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	f7 01       	movw	r30, r14
     eb8:	93 fd       	sbrc	r25, 3
     eba:	85 91       	lpm	r24, Z+
     ebc:	93 ff       	sbrs	r25, 3
     ebe:	81 91       	ld	r24, Z+
     ec0:	7f 01       	movw	r14, r30
     ec2:	88 23       	and	r24, r24
     ec4:	09 f4       	brne	.+2      	; 0xec8 <vfprintf+0x3a>
     ec6:	ba c1       	rjmp	.+884    	; 0x123c <vfprintf+0x3ae>
     ec8:	85 32       	cpi	r24, 0x25	; 37
     eca:	39 f4       	brne	.+14     	; 0xeda <vfprintf+0x4c>
     ecc:	93 fd       	sbrc	r25, 3
     ece:	85 91       	lpm	r24, Z+
     ed0:	93 ff       	sbrs	r25, 3
     ed2:	81 91       	ld	r24, Z+
     ed4:	7f 01       	movw	r14, r30
     ed6:	85 32       	cpi	r24, 0x25	; 37
     ed8:	29 f4       	brne	.+10     	; 0xee4 <vfprintf+0x56>
     eda:	b6 01       	movw	r22, r12
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
     ee2:	e7 cf       	rjmp	.-50     	; 0xeb2 <vfprintf+0x24>
     ee4:	91 2c       	mov	r9, r1
     ee6:	21 2c       	mov	r2, r1
     ee8:	31 2c       	mov	r3, r1
     eea:	ff e1       	ldi	r31, 0x1F	; 31
     eec:	f3 15       	cp	r31, r3
     eee:	d8 f0       	brcs	.+54     	; 0xf26 <vfprintf+0x98>
     ef0:	8b 32       	cpi	r24, 0x2B	; 43
     ef2:	79 f0       	breq	.+30     	; 0xf12 <vfprintf+0x84>
     ef4:	38 f4       	brcc	.+14     	; 0xf04 <vfprintf+0x76>
     ef6:	80 32       	cpi	r24, 0x20	; 32
     ef8:	79 f0       	breq	.+30     	; 0xf18 <vfprintf+0x8a>
     efa:	83 32       	cpi	r24, 0x23	; 35
     efc:	a1 f4       	brne	.+40     	; 0xf26 <vfprintf+0x98>
     efe:	23 2d       	mov	r18, r3
     f00:	20 61       	ori	r18, 0x10	; 16
     f02:	1d c0       	rjmp	.+58     	; 0xf3e <vfprintf+0xb0>
     f04:	8d 32       	cpi	r24, 0x2D	; 45
     f06:	61 f0       	breq	.+24     	; 0xf20 <vfprintf+0x92>
     f08:	80 33       	cpi	r24, 0x30	; 48
     f0a:	69 f4       	brne	.+26     	; 0xf26 <vfprintf+0x98>
     f0c:	23 2d       	mov	r18, r3
     f0e:	21 60       	ori	r18, 0x01	; 1
     f10:	16 c0       	rjmp	.+44     	; 0xf3e <vfprintf+0xb0>
     f12:	83 2d       	mov	r24, r3
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	38 2e       	mov	r3, r24
     f18:	e3 2d       	mov	r30, r3
     f1a:	e4 60       	ori	r30, 0x04	; 4
     f1c:	3e 2e       	mov	r3, r30
     f1e:	2a c0       	rjmp	.+84     	; 0xf74 <vfprintf+0xe6>
     f20:	f3 2d       	mov	r31, r3
     f22:	f8 60       	ori	r31, 0x08	; 8
     f24:	1d c0       	rjmp	.+58     	; 0xf60 <vfprintf+0xd2>
     f26:	37 fc       	sbrc	r3, 7
     f28:	2d c0       	rjmp	.+90     	; 0xf84 <vfprintf+0xf6>
     f2a:	20 ed       	ldi	r18, 0xD0	; 208
     f2c:	28 0f       	add	r18, r24
     f2e:	2a 30       	cpi	r18, 0x0A	; 10
     f30:	40 f0       	brcs	.+16     	; 0xf42 <vfprintf+0xb4>
     f32:	8e 32       	cpi	r24, 0x2E	; 46
     f34:	b9 f4       	brne	.+46     	; 0xf64 <vfprintf+0xd6>
     f36:	36 fc       	sbrc	r3, 6
     f38:	81 c1       	rjmp	.+770    	; 0x123c <vfprintf+0x3ae>
     f3a:	23 2d       	mov	r18, r3
     f3c:	20 64       	ori	r18, 0x40	; 64
     f3e:	32 2e       	mov	r3, r18
     f40:	19 c0       	rjmp	.+50     	; 0xf74 <vfprintf+0xe6>
     f42:	36 fe       	sbrs	r3, 6
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0xc4>
     f46:	8a e0       	ldi	r24, 0x0A	; 10
     f48:	98 9e       	mul	r9, r24
     f4a:	20 0d       	add	r18, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	92 2e       	mov	r9, r18
     f50:	11 c0       	rjmp	.+34     	; 0xf74 <vfprintf+0xe6>
     f52:	ea e0       	ldi	r30, 0x0A	; 10
     f54:	2e 9e       	mul	r2, r30
     f56:	20 0d       	add	r18, r0
     f58:	11 24       	eor	r1, r1
     f5a:	22 2e       	mov	r2, r18
     f5c:	f3 2d       	mov	r31, r3
     f5e:	f0 62       	ori	r31, 0x20	; 32
     f60:	3f 2e       	mov	r3, r31
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <vfprintf+0xe6>
     f64:	8c 36       	cpi	r24, 0x6C	; 108
     f66:	21 f4       	brne	.+8      	; 0xf70 <vfprintf+0xe2>
     f68:	83 2d       	mov	r24, r3
     f6a:	80 68       	ori	r24, 0x80	; 128
     f6c:	38 2e       	mov	r3, r24
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <vfprintf+0xe6>
     f70:	88 36       	cpi	r24, 0x68	; 104
     f72:	41 f4       	brne	.+16     	; 0xf84 <vfprintf+0xf6>
     f74:	f7 01       	movw	r30, r14
     f76:	93 fd       	sbrc	r25, 3
     f78:	85 91       	lpm	r24, Z+
     f7a:	93 ff       	sbrs	r25, 3
     f7c:	81 91       	ld	r24, Z+
     f7e:	7f 01       	movw	r14, r30
     f80:	81 11       	cpse	r24, r1
     f82:	b3 cf       	rjmp	.-154    	; 0xeea <vfprintf+0x5c>
     f84:	98 2f       	mov	r25, r24
     f86:	9f 7d       	andi	r25, 0xDF	; 223
     f88:	95 54       	subi	r25, 0x45	; 69
     f8a:	93 30       	cpi	r25, 0x03	; 3
     f8c:	28 f4       	brcc	.+10     	; 0xf98 <vfprintf+0x10a>
     f8e:	0c 5f       	subi	r16, 0xFC	; 252
     f90:	1f 4f       	sbci	r17, 0xFF	; 255
     f92:	9f e3       	ldi	r25, 0x3F	; 63
     f94:	99 83       	std	Y+1, r25	; 0x01
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <vfprintf+0x124>
     f98:	83 36       	cpi	r24, 0x63	; 99
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <vfprintf+0x11a>
     f9c:	83 37       	cpi	r24, 0x73	; 115
     f9e:	71 f0       	breq	.+28     	; 0xfbc <vfprintf+0x12e>
     fa0:	83 35       	cpi	r24, 0x53	; 83
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <vfprintf+0x118>
     fa4:	59 c0       	rjmp	.+178    	; 0x1058 <vfprintf+0x1ca>
     fa6:	21 c0       	rjmp	.+66     	; 0xfea <vfprintf+0x15c>
     fa8:	f8 01       	movw	r30, r16
     faa:	80 81       	ld	r24, Z
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	0e 5f       	subi	r16, 0xFE	; 254
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	88 24       	eor	r8, r8
     fb4:	83 94       	inc	r8
     fb6:	91 2c       	mov	r9, r1
     fb8:	53 01       	movw	r10, r6
     fba:	13 c0       	rjmp	.+38     	; 0xfe2 <vfprintf+0x154>
     fbc:	28 01       	movw	r4, r16
     fbe:	f2 e0       	ldi	r31, 0x02	; 2
     fc0:	4f 0e       	add	r4, r31
     fc2:	51 1c       	adc	r5, r1
     fc4:	f8 01       	movw	r30, r16
     fc6:	a0 80       	ld	r10, Z
     fc8:	b1 80       	ldd	r11, Z+1	; 0x01
     fca:	36 fe       	sbrs	r3, 6
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <vfprintf+0x146>
     fce:	69 2d       	mov	r22, r9
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0x14a>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	c5 01       	movw	r24, r10
     fda:	0e 94 33 09 	call	0x1266	; 0x1266 <strnlen>
     fde:	4c 01       	movw	r8, r24
     fe0:	82 01       	movw	r16, r4
     fe2:	f3 2d       	mov	r31, r3
     fe4:	ff 77       	andi	r31, 0x7F	; 127
     fe6:	3f 2e       	mov	r3, r31
     fe8:	16 c0       	rjmp	.+44     	; 0x1016 <vfprintf+0x188>
     fea:	28 01       	movw	r4, r16
     fec:	22 e0       	ldi	r18, 0x02	; 2
     fee:	42 0e       	add	r4, r18
     ff0:	51 1c       	adc	r5, r1
     ff2:	f8 01       	movw	r30, r16
     ff4:	a0 80       	ld	r10, Z
     ff6:	b1 80       	ldd	r11, Z+1	; 0x01
     ff8:	36 fe       	sbrs	r3, 6
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <vfprintf+0x174>
     ffc:	69 2d       	mov	r22, r9
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <vfprintf+0x178>
    1002:	6f ef       	ldi	r22, 0xFF	; 255
    1004:	7f ef       	ldi	r23, 0xFF	; 255
    1006:	c5 01       	movw	r24, r10
    1008:	0e 94 28 09 	call	0x1250	; 0x1250 <strnlen_P>
    100c:	4c 01       	movw	r8, r24
    100e:	f3 2d       	mov	r31, r3
    1010:	f0 68       	ori	r31, 0x80	; 128
    1012:	3f 2e       	mov	r3, r31
    1014:	82 01       	movw	r16, r4
    1016:	33 fc       	sbrc	r3, 3
    1018:	1b c0       	rjmp	.+54     	; 0x1050 <vfprintf+0x1c2>
    101a:	82 2d       	mov	r24, r2
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 16       	cp	r8, r24
    1020:	99 06       	cpc	r9, r25
    1022:	b0 f4       	brcc	.+44     	; 0x1050 <vfprintf+0x1c2>
    1024:	b6 01       	movw	r22, r12
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    102e:	2a 94       	dec	r2
    1030:	f4 cf       	rjmp	.-24     	; 0x101a <vfprintf+0x18c>
    1032:	f5 01       	movw	r30, r10
    1034:	37 fc       	sbrc	r3, 7
    1036:	85 91       	lpm	r24, Z+
    1038:	37 fe       	sbrs	r3, 7
    103a:	81 91       	ld	r24, Z+
    103c:	5f 01       	movw	r10, r30
    103e:	b6 01       	movw	r22, r12
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    1046:	21 10       	cpse	r2, r1
    1048:	2a 94       	dec	r2
    104a:	21 e0       	ldi	r18, 0x01	; 1
    104c:	82 1a       	sub	r8, r18
    104e:	91 08       	sbc	r9, r1
    1050:	81 14       	cp	r8, r1
    1052:	91 04       	cpc	r9, r1
    1054:	71 f7       	brne	.-36     	; 0x1032 <vfprintf+0x1a4>
    1056:	e8 c0       	rjmp	.+464    	; 0x1228 <vfprintf+0x39a>
    1058:	84 36       	cpi	r24, 0x64	; 100
    105a:	11 f0       	breq	.+4      	; 0x1060 <vfprintf+0x1d2>
    105c:	89 36       	cpi	r24, 0x69	; 105
    105e:	41 f5       	brne	.+80     	; 0x10b0 <vfprintf+0x222>
    1060:	f8 01       	movw	r30, r16
    1062:	37 fe       	sbrs	r3, 7
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <vfprintf+0x1e6>
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	0c 5f       	subi	r16, 0xFC	; 252
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	08 c0       	rjmp	.+16     	; 0x1084 <vfprintf+0x1f6>
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	07 2e       	mov	r0, r23
    107a:	00 0c       	add	r0, r0
    107c:	88 0b       	sbc	r24, r24
    107e:	99 0b       	sbc	r25, r25
    1080:	0e 5f       	subi	r16, 0xFE	; 254
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	f3 2d       	mov	r31, r3
    1086:	ff 76       	andi	r31, 0x6F	; 111
    1088:	3f 2e       	mov	r3, r31
    108a:	97 ff       	sbrs	r25, 7
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <vfprintf+0x212>
    108e:	90 95       	com	r25
    1090:	80 95       	com	r24
    1092:	70 95       	com	r23
    1094:	61 95       	neg	r22
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	f0 68       	ori	r31, 0x80	; 128
    109e:	3f 2e       	mov	r3, r31
    10a0:	2a e0       	ldi	r18, 0x0A	; 10
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	a3 01       	movw	r20, r6
    10a6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__ultoa_invert>
    10aa:	88 2e       	mov	r8, r24
    10ac:	86 18       	sub	r8, r6
    10ae:	45 c0       	rjmp	.+138    	; 0x113a <vfprintf+0x2ac>
    10b0:	85 37       	cpi	r24, 0x75	; 117
    10b2:	31 f4       	brne	.+12     	; 0x10c0 <vfprintf+0x232>
    10b4:	23 2d       	mov	r18, r3
    10b6:	2f 7e       	andi	r18, 0xEF	; 239
    10b8:	b2 2e       	mov	r11, r18
    10ba:	2a e0       	ldi	r18, 0x0A	; 10
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	25 c0       	rjmp	.+74     	; 0x110a <vfprintf+0x27c>
    10c0:	93 2d       	mov	r25, r3
    10c2:	99 7f       	andi	r25, 0xF9	; 249
    10c4:	b9 2e       	mov	r11, r25
    10c6:	8f 36       	cpi	r24, 0x6F	; 111
    10c8:	c1 f0       	breq	.+48     	; 0x10fa <vfprintf+0x26c>
    10ca:	18 f4       	brcc	.+6      	; 0x10d2 <vfprintf+0x244>
    10cc:	88 35       	cpi	r24, 0x58	; 88
    10ce:	79 f0       	breq	.+30     	; 0x10ee <vfprintf+0x260>
    10d0:	b5 c0       	rjmp	.+362    	; 0x123c <vfprintf+0x3ae>
    10d2:	80 37       	cpi	r24, 0x70	; 112
    10d4:	19 f0       	breq	.+6      	; 0x10dc <vfprintf+0x24e>
    10d6:	88 37       	cpi	r24, 0x78	; 120
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <vfprintf+0x254>
    10da:	b0 c0       	rjmp	.+352    	; 0x123c <vfprintf+0x3ae>
    10dc:	e9 2f       	mov	r30, r25
    10de:	e0 61       	ori	r30, 0x10	; 16
    10e0:	be 2e       	mov	r11, r30
    10e2:	b4 fe       	sbrs	r11, 4
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <vfprintf+0x272>
    10e6:	fb 2d       	mov	r31, r11
    10e8:	f4 60       	ori	r31, 0x04	; 4
    10ea:	bf 2e       	mov	r11, r31
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <vfprintf+0x272>
    10ee:	34 fe       	sbrs	r3, 4
    10f0:	0a c0       	rjmp	.+20     	; 0x1106 <vfprintf+0x278>
    10f2:	29 2f       	mov	r18, r25
    10f4:	26 60       	ori	r18, 0x06	; 6
    10f6:	b2 2e       	mov	r11, r18
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <vfprintf+0x278>
    10fa:	28 e0       	ldi	r18, 0x08	; 8
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <vfprintf+0x27c>
    1100:	20 e1       	ldi	r18, 0x10	; 16
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <vfprintf+0x27c>
    1106:	20 e1       	ldi	r18, 0x10	; 16
    1108:	32 e0       	ldi	r19, 0x02	; 2
    110a:	f8 01       	movw	r30, r16
    110c:	b7 fe       	sbrs	r11, 7
    110e:	07 c0       	rjmp	.+14     	; 0x111e <vfprintf+0x290>
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	0c 5f       	subi	r16, 0xFC	; 252
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	06 c0       	rjmp	.+12     	; 0x112a <vfprintf+0x29c>
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 5f       	subi	r16, 0xFE	; 254
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	a3 01       	movw	r20, r6
    112c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__ultoa_invert>
    1130:	88 2e       	mov	r8, r24
    1132:	86 18       	sub	r8, r6
    1134:	fb 2d       	mov	r31, r11
    1136:	ff 77       	andi	r31, 0x7F	; 127
    1138:	3f 2e       	mov	r3, r31
    113a:	36 fe       	sbrs	r3, 6
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <vfprintf+0x2ca>
    113e:	23 2d       	mov	r18, r3
    1140:	2e 7f       	andi	r18, 0xFE	; 254
    1142:	a2 2e       	mov	r10, r18
    1144:	89 14       	cp	r8, r9
    1146:	58 f4       	brcc	.+22     	; 0x115e <vfprintf+0x2d0>
    1148:	34 fe       	sbrs	r3, 4
    114a:	0b c0       	rjmp	.+22     	; 0x1162 <vfprintf+0x2d4>
    114c:	32 fc       	sbrc	r3, 2
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <vfprintf+0x2d4>
    1150:	83 2d       	mov	r24, r3
    1152:	8e 7e       	andi	r24, 0xEE	; 238
    1154:	a8 2e       	mov	r10, r24
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <vfprintf+0x2d4>
    1158:	b8 2c       	mov	r11, r8
    115a:	a3 2c       	mov	r10, r3
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <vfprintf+0x2d6>
    115e:	b8 2c       	mov	r11, r8
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <vfprintf+0x2d6>
    1162:	b9 2c       	mov	r11, r9
    1164:	a4 fe       	sbrs	r10, 4
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <vfprintf+0x2f8>
    1168:	fe 01       	movw	r30, r28
    116a:	e8 0d       	add	r30, r8
    116c:	f1 1d       	adc	r31, r1
    116e:	80 81       	ld	r24, Z
    1170:	80 33       	cpi	r24, 0x30	; 48
    1172:	21 f4       	brne	.+8      	; 0x117c <vfprintf+0x2ee>
    1174:	9a 2d       	mov	r25, r10
    1176:	99 7e       	andi	r25, 0xE9	; 233
    1178:	a9 2e       	mov	r10, r25
    117a:	09 c0       	rjmp	.+18     	; 0x118e <vfprintf+0x300>
    117c:	a2 fe       	sbrs	r10, 2
    117e:	06 c0       	rjmp	.+12     	; 0x118c <vfprintf+0x2fe>
    1180:	b3 94       	inc	r11
    1182:	b3 94       	inc	r11
    1184:	04 c0       	rjmp	.+8      	; 0x118e <vfprintf+0x300>
    1186:	8a 2d       	mov	r24, r10
    1188:	86 78       	andi	r24, 0x86	; 134
    118a:	09 f0       	breq	.+2      	; 0x118e <vfprintf+0x300>
    118c:	b3 94       	inc	r11
    118e:	a3 fc       	sbrc	r10, 3
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <vfprintf+0x326>
    1192:	a0 fe       	sbrs	r10, 0
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <vfprintf+0x314>
    1196:	b2 14       	cp	r11, r2
    1198:	88 f4       	brcc	.+34     	; 0x11bc <vfprintf+0x32e>
    119a:	28 0c       	add	r2, r8
    119c:	92 2c       	mov	r9, r2
    119e:	9b 18       	sub	r9, r11
    11a0:	0e c0       	rjmp	.+28     	; 0x11be <vfprintf+0x330>
    11a2:	b2 14       	cp	r11, r2
    11a4:	60 f4       	brcc	.+24     	; 0x11be <vfprintf+0x330>
    11a6:	b6 01       	movw	r22, r12
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    11b0:	b3 94       	inc	r11
    11b2:	f7 cf       	rjmp	.-18     	; 0x11a2 <vfprintf+0x314>
    11b4:	b2 14       	cp	r11, r2
    11b6:	18 f4       	brcc	.+6      	; 0x11be <vfprintf+0x330>
    11b8:	2b 18       	sub	r2, r11
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <vfprintf+0x332>
    11bc:	98 2c       	mov	r9, r8
    11be:	21 2c       	mov	r2, r1
    11c0:	a4 fe       	sbrs	r10, 4
    11c2:	10 c0       	rjmp	.+32     	; 0x11e4 <vfprintf+0x356>
    11c4:	b6 01       	movw	r22, r12
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    11ce:	a2 fe       	sbrs	r10, 2
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <vfprintf+0x372>
    11d2:	a1 fc       	sbrc	r10, 1
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <vfprintf+0x34e>
    11d6:	88 e7       	ldi	r24, 0x78	; 120
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x352>
    11dc:	88 e5       	ldi	r24, 0x58	; 88
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	b6 01       	movw	r22, r12
    11e2:	0c c0       	rjmp	.+24     	; 0x11fc <vfprintf+0x36e>
    11e4:	8a 2d       	mov	r24, r10
    11e6:	86 78       	andi	r24, 0x86	; 134
    11e8:	59 f0       	breq	.+22     	; 0x1200 <vfprintf+0x372>
    11ea:	a1 fe       	sbrs	r10, 1
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x364>
    11ee:	8b e2       	ldi	r24, 0x2B	; 43
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <vfprintf+0x366>
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	a7 fc       	sbrc	r10, 7
    11f6:	8d e2       	ldi	r24, 0x2D	; 45
    11f8:	b6 01       	movw	r22, r12
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    1200:	89 14       	cp	r8, r9
    1202:	38 f4       	brcc	.+14     	; 0x1212 <vfprintf+0x384>
    1204:	b6 01       	movw	r22, r12
    1206:	80 e3       	ldi	r24, 0x30	; 48
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    120e:	9a 94       	dec	r9
    1210:	f7 cf       	rjmp	.-18     	; 0x1200 <vfprintf+0x372>
    1212:	8a 94       	dec	r8
    1214:	f3 01       	movw	r30, r6
    1216:	e8 0d       	add	r30, r8
    1218:	f1 1d       	adc	r31, r1
    121a:	80 81       	ld	r24, Z
    121c:	b6 01       	movw	r22, r12
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    1224:	81 10       	cpse	r8, r1
    1226:	f5 cf       	rjmp	.-22     	; 0x1212 <vfprintf+0x384>
    1228:	22 20       	and	r2, r2
    122a:	09 f4       	brne	.+2      	; 0x122e <vfprintf+0x3a0>
    122c:	42 ce       	rjmp	.-892    	; 0xeb2 <vfprintf+0x24>
    122e:	b6 01       	movw	r22, r12
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 3e 09 	call	0x127c	; 0x127c <fputc>
    1238:	2a 94       	dec	r2
    123a:	f6 cf       	rjmp	.-20     	; 0x1228 <vfprintf+0x39a>
    123c:	f6 01       	movw	r30, r12
    123e:	86 81       	ldd	r24, Z+6	; 0x06
    1240:	97 81       	ldd	r25, Z+7	; 0x07
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x3ba>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	2b 96       	adiw	r28, 0x0b	; 11
    124a:	e2 e1       	ldi	r30, 0x12	; 18
    124c:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__epilogue_restores__>

00001250 <strnlen_P>:
    1250:	fc 01       	movw	r30, r24
    1252:	05 90       	lpm	r0, Z+
    1254:	61 50       	subi	r22, 0x01	; 1
    1256:	70 40       	sbci	r23, 0x00	; 0
    1258:	01 10       	cpse	r0, r1
    125a:	d8 f7       	brcc	.-10     	; 0x1252 <strnlen_P+0x2>
    125c:	80 95       	com	r24
    125e:	90 95       	com	r25
    1260:	8e 0f       	add	r24, r30
    1262:	9f 1f       	adc	r25, r31
    1264:	08 95       	ret

00001266 <strnlen>:
    1266:	fc 01       	movw	r30, r24
    1268:	61 50       	subi	r22, 0x01	; 1
    126a:	70 40       	sbci	r23, 0x00	; 0
    126c:	01 90       	ld	r0, Z+
    126e:	01 10       	cpse	r0, r1
    1270:	d8 f7       	brcc	.-10     	; 0x1268 <strnlen+0x2>
    1272:	80 95       	com	r24
    1274:	90 95       	com	r25
    1276:	8e 0f       	add	r24, r30
    1278:	9f 1f       	adc	r25, r31
    127a:	08 95       	ret

0000127c <fputc>:
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	fb 01       	movw	r30, r22
    1286:	23 81       	ldd	r18, Z+3	; 0x03
    1288:	21 fd       	sbrc	r18, 1
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <fputc+0x16>
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	9f ef       	ldi	r25, 0xFF	; 255
    1290:	2c c0       	rjmp	.+88     	; 0x12ea <fputc+0x6e>
    1292:	22 ff       	sbrs	r18, 2
    1294:	16 c0       	rjmp	.+44     	; 0x12c2 <fputc+0x46>
    1296:	46 81       	ldd	r20, Z+6	; 0x06
    1298:	57 81       	ldd	r21, Z+7	; 0x07
    129a:	24 81       	ldd	r18, Z+4	; 0x04
    129c:	35 81       	ldd	r19, Z+5	; 0x05
    129e:	42 17       	cp	r20, r18
    12a0:	53 07       	cpc	r21, r19
    12a2:	44 f4       	brge	.+16     	; 0x12b4 <fputc+0x38>
    12a4:	a0 81       	ld	r26, Z
    12a6:	b1 81       	ldd	r27, Z+1	; 0x01
    12a8:	9d 01       	movw	r18, r26
    12aa:	2f 5f       	subi	r18, 0xFF	; 255
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	31 83       	std	Z+1, r19	; 0x01
    12b0:	20 83       	st	Z, r18
    12b2:	8c 93       	st	X, r24
    12b4:	26 81       	ldd	r18, Z+6	; 0x06
    12b6:	37 81       	ldd	r19, Z+7	; 0x07
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	37 83       	std	Z+7, r19	; 0x07
    12be:	26 83       	std	Z+6, r18	; 0x06
    12c0:	14 c0       	rjmp	.+40     	; 0x12ea <fputc+0x6e>
    12c2:	8b 01       	movw	r16, r22
    12c4:	ec 01       	movw	r28, r24
    12c6:	fb 01       	movw	r30, r22
    12c8:	00 84       	ldd	r0, Z+8	; 0x08
    12ca:	f1 85       	ldd	r31, Z+9	; 0x09
    12cc:	e0 2d       	mov	r30, r0
    12ce:	09 95       	icall
    12d0:	89 2b       	or	r24, r25
    12d2:	e1 f6       	brne	.-72     	; 0x128c <fputc+0x10>
    12d4:	d8 01       	movw	r26, r16
    12d6:	16 96       	adiw	r26, 0x06	; 6
    12d8:	8d 91       	ld	r24, X+
    12da:	9c 91       	ld	r25, X
    12dc:	17 97       	sbiw	r26, 0x07	; 7
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	17 96       	adiw	r26, 0x07	; 7
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
    12e6:	16 97       	sbiw	r26, 0x06	; 6
    12e8:	ce 01       	movw	r24, r28
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <__ultoa_invert>:
    12f4:	fa 01       	movw	r30, r20
    12f6:	aa 27       	eor	r26, r26
    12f8:	28 30       	cpi	r18, 0x08	; 8
    12fa:	51 f1       	breq	.+84     	; 0x1350 <__ultoa_invert+0x5c>
    12fc:	20 31       	cpi	r18, 0x10	; 16
    12fe:	81 f1       	breq	.+96     	; 0x1360 <__ultoa_invert+0x6c>
    1300:	e8 94       	clt
    1302:	6f 93       	push	r22
    1304:	6e 7f       	andi	r22, 0xFE	; 254
    1306:	6e 5f       	subi	r22, 0xFE	; 254
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	af 4f       	sbci	r26, 0xFF	; 255
    1310:	b1 e0       	ldi	r27, 0x01	; 1
    1312:	3e d0       	rcall	.+124    	; 0x1390 <__ultoa_invert+0x9c>
    1314:	b4 e0       	ldi	r27, 0x04	; 4
    1316:	3c d0       	rcall	.+120    	; 0x1390 <__ultoa_invert+0x9c>
    1318:	67 0f       	add	r22, r23
    131a:	78 1f       	adc	r23, r24
    131c:	89 1f       	adc	r24, r25
    131e:	9a 1f       	adc	r25, r26
    1320:	a1 1d       	adc	r26, r1
    1322:	68 0f       	add	r22, r24
    1324:	79 1f       	adc	r23, r25
    1326:	8a 1f       	adc	r24, r26
    1328:	91 1d       	adc	r25, r1
    132a:	a1 1d       	adc	r26, r1
    132c:	6a 0f       	add	r22, r26
    132e:	71 1d       	adc	r23, r1
    1330:	81 1d       	adc	r24, r1
    1332:	91 1d       	adc	r25, r1
    1334:	a1 1d       	adc	r26, r1
    1336:	20 d0       	rcall	.+64     	; 0x1378 <__ultoa_invert+0x84>
    1338:	09 f4       	brne	.+2      	; 0x133c <__ultoa_invert+0x48>
    133a:	68 94       	set
    133c:	3f 91       	pop	r19
    133e:	2a e0       	ldi	r18, 0x0A	; 10
    1340:	26 9f       	mul	r18, r22
    1342:	11 24       	eor	r1, r1
    1344:	30 19       	sub	r19, r0
    1346:	30 5d       	subi	r19, 0xD0	; 208
    1348:	31 93       	st	Z+, r19
    134a:	de f6       	brtc	.-74     	; 0x1302 <__ultoa_invert+0xe>
    134c:	cf 01       	movw	r24, r30
    134e:	08 95       	ret
    1350:	46 2f       	mov	r20, r22
    1352:	47 70       	andi	r20, 0x07	; 7
    1354:	40 5d       	subi	r20, 0xD0	; 208
    1356:	41 93       	st	Z+, r20
    1358:	b3 e0       	ldi	r27, 0x03	; 3
    135a:	0f d0       	rcall	.+30     	; 0x137a <__ultoa_invert+0x86>
    135c:	c9 f7       	brne	.-14     	; 0x1350 <__ultoa_invert+0x5c>
    135e:	f6 cf       	rjmp	.-20     	; 0x134c <__ultoa_invert+0x58>
    1360:	46 2f       	mov	r20, r22
    1362:	4f 70       	andi	r20, 0x0F	; 15
    1364:	40 5d       	subi	r20, 0xD0	; 208
    1366:	4a 33       	cpi	r20, 0x3A	; 58
    1368:	18 f0       	brcs	.+6      	; 0x1370 <__ultoa_invert+0x7c>
    136a:	49 5d       	subi	r20, 0xD9	; 217
    136c:	31 fd       	sbrc	r19, 1
    136e:	40 52       	subi	r20, 0x20	; 32
    1370:	41 93       	st	Z+, r20
    1372:	02 d0       	rcall	.+4      	; 0x1378 <__ultoa_invert+0x84>
    1374:	a9 f7       	brne	.-22     	; 0x1360 <__ultoa_invert+0x6c>
    1376:	ea cf       	rjmp	.-44     	; 0x134c <__ultoa_invert+0x58>
    1378:	b4 e0       	ldi	r27, 0x04	; 4
    137a:	a6 95       	lsr	r26
    137c:	97 95       	ror	r25
    137e:	87 95       	ror	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	ba 95       	dec	r27
    1386:	c9 f7       	brne	.-14     	; 0x137a <__ultoa_invert+0x86>
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 05       	cpc	r22, r1
    138c:	71 05       	cpc	r23, r1
    138e:	08 95       	ret
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	0a 2e       	mov	r0, r26
    1396:	06 94       	lsr	r0
    1398:	57 95       	ror	r21
    139a:	47 95       	ror	r20
    139c:	37 95       	ror	r19
    139e:	27 95       	ror	r18
    13a0:	ba 95       	dec	r27
    13a2:	c9 f7       	brne	.-14     	; 0x1396 <__ultoa_invert+0xa2>
    13a4:	62 0f       	add	r22, r18
    13a6:	73 1f       	adc	r23, r19
    13a8:	84 1f       	adc	r24, r20
    13aa:	95 1f       	adc	r25, r21
    13ac:	a0 1d       	adc	r26, r0
    13ae:	08 95       	ret

000013b0 <__prologue_saves__>:
    13b0:	2f 92       	push	r2
    13b2:	3f 92       	push	r3
    13b4:	4f 92       	push	r4
    13b6:	5f 92       	push	r5
    13b8:	6f 92       	push	r6
    13ba:	7f 92       	push	r7
    13bc:	8f 92       	push	r8
    13be:	9f 92       	push	r9
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	ca 1b       	sub	r28, r26
    13da:	db 0b       	sbc	r29, r27
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	09 94       	ijmp

000013e8 <__epilogue_restores__>:
    13e8:	2a 88       	ldd	r2, Y+18	; 0x12
    13ea:	39 88       	ldd	r3, Y+17	; 0x11
    13ec:	48 88       	ldd	r4, Y+16	; 0x10
    13ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13fa:	b9 84       	ldd	r11, Y+9	; 0x09
    13fc:	c8 84       	ldd	r12, Y+8	; 0x08
    13fe:	df 80       	ldd	r13, Y+7	; 0x07
    1400:	ee 80       	ldd	r14, Y+6	; 0x06
    1402:	fd 80       	ldd	r15, Y+5	; 0x05
    1404:	0c 81       	ldd	r16, Y+4	; 0x04
    1406:	1b 81       	ldd	r17, Y+3	; 0x03
    1408:	aa 81       	ldd	r26, Y+2	; 0x02
    140a:	b9 81       	ldd	r27, Y+1	; 0x01
    140c:	ce 0f       	add	r28, r30
    140e:	d1 1d       	adc	r29, r1
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	ed 01       	movw	r28, r26
    141c:	08 95       	ret

0000141e <_exit>:
    141e:	f8 94       	cli

00001420 <__stop_program>:
    1420:	ff cf       	rjmp	.-2      	; 0x1420 <__stop_program>
