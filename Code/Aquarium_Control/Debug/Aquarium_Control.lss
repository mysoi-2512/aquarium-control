
Aquarium_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800264  00800264  000010fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001812  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6e  00000000  00000000  00002ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbc  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  0000440c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063f  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  00004ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000058ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 36       	cpi	r26, 0x64	; 100
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e6       	ldi	r26, 0x64	; 100
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
  9e:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ds18b20_init>:
#include "../Uart/uart_utils.h" // ??m b?o include file UART

// Hàm kh?i t?o chân k?t n?i DS18B20
void ds18b20_init(uint8_t pin) {
	// Thi?t l?p chân làm output (ban ??u) và kéo lên m?c cao
	DDRD |= (1 << pin);
  a6:	4a b1       	in	r20, 0x0a	; 10
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	b9 01       	movw	r22, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <ds18b20_init+0xe>
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <ds18b20_init+0xa>
  b8:	cb 01       	movw	r24, r22
  ba:	46 2b       	or	r20, r22
  bc:	4a b9       	out	0x0a, r20	; 10
	PORTD |= (1 << pin);
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	89 2b       	or	r24, r25
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <ds18b20_reset>:
}

// G?i xung reset và ki?m tra ph?n h?i presence pulse
uint8_t ds18b20_reset(void) {
  c6:	cf 93       	push	r28
	uint8_t presence = 0;

	printf("Bat dau reset DS18B20...\r\n");
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 39 04 	call	0x872	; 0x872 <puts>

	// Kéo chân xu?ng m?c th?p trong ít nh?t 480 us
	DDRD |= (1 << DS18B20_PIN);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DS18B20_PIN);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8b b9       	out	0x0b, r24	; 11
	printf("Keo chan xuong...\r\n");
  dc:	8a e1       	ldi	r24, 0x1A	; 26
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 39 04 	call	0x872	; 0x872 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <ds18b20_reset+0x22>
  ec:	00 c0       	rjmp	.+0      	; 0xee <ds18b20_reset+0x28>
  ee:	00 00       	nop
	_delay_us(500);

	// Th? chân và chuy?n sang input ?? nghe presence pulse
	DDRD &= ~(1 << DS18B20_PIN);
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	8a b9       	out	0x0a, r24	; 10
	printf("Tha chan...\r\n");
  f6:	8d e2       	ldi	r24, 0x2D	; 45
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 39 04 	call	0x872	; 0x872 <puts>
  fe:	87 e1       	ldi	r24, 0x17	; 23
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <ds18b20_reset+0x3c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <ds18b20_reset+0x42>
 108:	00 00       	nop
	_delay_us(70);

	// ??c giá tr? chân (presence pulse s? kéo nó xu?ng th?p trong 60-240 us)
	if (!(PIND & (1 << DS18B20_PIN))) {
 10a:	4a 99       	sbic	0x09, 2	; 9
 10c:	06 c0       	rjmp	.+12     	; 0x11a <ds18b20_reset+0x54>
		printf("Phat hien presence pulse!\r\n");
 10e:	8a e3       	ldi	r24, 0x3A	; 58
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 39 04 	call	0x872	; 0x872 <puts>
		presence = 1;
 116:	c1 e0       	ldi	r28, 0x01	; 1
 118:	05 c0       	rjmp	.+10     	; 0x124 <ds18b20_reset+0x5e>
	} else {
		printf("KHONG phat hien presence pulse!\r\n");
 11a:	85 e5       	ldi	r24, 0x55	; 85
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 39 04 	call	0x872	; 0x872 <puts>
	PORTD |= (1 << pin);
}

// G?i xung reset và ki?m tra ph?n h?i presence pulse
uint8_t ds18b20_reset(void) {
	uint8_t presence = 0;
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <ds18b20_reset+0x62>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <ds18b20_reset+0x68>
 12e:	00 00       	nop
	} else {
		printf("KHONG phat hien presence pulse!\r\n");
	}
	_delay_us(500);

	printf("Ket thuc reset, presence = %d\r\n", presence);
 130:	1f 92       	push	r1
 132:	cf 93       	push	r28
 134:	86 e7       	ldi	r24, 0x76	; 118
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
	return presence;
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
}
 148:	8c 2f       	mov	r24, r28
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <ds18b20_write_bit>:

// G?i m?t bit trên bus 1-Wire
void ds18b20_write_bit(uint8_t bit) {
	// Kéo chân xu?ng m?c th?p
	DDRD |= (1 << DS18B20_PIN);
 14e:	9a b1       	in	r25, 0x0a	; 10
 150:	94 60       	ori	r25, 0x04	; 4
 152:	9a b9       	out	0x0a, r25	; 10
	PORTD &= ~(1 << DS18B20_PIN);
 154:	9b b1       	in	r25, 0x0b	; 11
 156:	9b 7f       	andi	r25, 0xFB	; 251
 158:	9b b9       	out	0x0b, r25	; 11
 15a:	9a e0       	ldi	r25, 0x0A	; 10
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <ds18b20_write_bit+0xe>
 160:	00 c0       	rjmp	.+0      	; 0x162 <ds18b20_write_bit+0x14>
	_delay_us(2); // Gi? th?p

	// Ghi bit
	if (bit) {
 162:	88 23       	and	r24, r24
 164:	19 f0       	breq	.+6      	; 0x16c <ds18b20_write_bit+0x1e>
		DDRD &= ~(1 << DS18B20_PIN); // Th? chân (cho m?c cao)
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	8b 7f       	andi	r24, 0xFB	; 251
 16a:	8a b9       	out	0x0a, r24	; 10
 16c:	8f ee       	ldi	r24, 0xEF	; 239
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <ds18b20_write_bit+0x22>
 174:	00 c0       	rjmp	.+0      	; 0x176 <ds18b20_write_bit+0x28>
 176:	00 00       	nop
	}
	_delay_us(60); // Th?i gian slot
	DDRD &= ~(1 << DS18B20_PIN); // ??m b?o th? chân sau khe th?i gian
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	8a b9       	out	0x0a, r24	; 10
 17e:	08 95       	ret

00000180 <ds18b20_read_bit>:
// ??c m?t bit t? bus 1-Wire
uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;

	// Kéo chân xu?ng m?c th?p
	DDRD |= (1 << DS18B20_PIN);
 180:	8a b1       	in	r24, 0x0a	; 10
 182:	84 60       	ori	r24, 0x04	; 4
 184:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DS18B20_PIN);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <ds18b20_read_bit+0xe>
 192:	00 c0       	rjmp	.+0      	; 0x194 <ds18b20_read_bit+0x14>
	_delay_us(2);

	// Th? chân ?? b?t ??u khe ??c
	DDRD &= ~(1 << DS18B20_PIN);
 194:	8a b1       	in	r24, 0x0a	; 10
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	8a b9       	out	0x0a, r24	; 10
 19a:	90 e5       	ldi	r25, 0x50	; 80
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <ds18b20_read_bit+0x1c>
	_delay_us(15);

	// ??c giá tr? bit
	if (PIND & (1 << DS18B20_PIN)) {
 1a0:	4a 99       	sbic	0x09, 2	; 9
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <ds18b20_read_bit+0x28>
	DDRD &= ~(1 << DS18B20_PIN); // ??m b?o th? chân sau khe th?i gian
}

// ??c m?t bit t? bus 1-Wire
uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <ds18b20_read_bit+0x2a>
	DDRD &= ~(1 << DS18B20_PIN);
	_delay_us(15);

	// ??c giá tr? bit
	if (PIND & (1 << DS18B20_PIN)) {
		bit = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 ef       	ldi	r25, 0xF0	; 240
 1ac:	9a 95       	dec	r25
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <ds18b20_read_bit+0x2c>
	}
	_delay_us(45); // K?t thúc khe ??c

	return bit;
}
 1b0:	08 95       	ret

000001b2 <ds18b20_write_byte>:

// G?i m?t byte d? li?u trên bus 1-Wire
void ds18b20_write_byte(uint8_t data) {
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++) {
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <ds18b20_write_byte+0x22>
		ds18b20_write_bit(data & (1 << i));
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0c 2e       	mov	r0, r28
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <ds18b20_write_byte+0x16>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <ds18b20_write_byte+0x12>
 1cc:	8d 23       	and	r24, r29
 1ce:	0e 94 a7 00 	call	0x14e	; 0x14e <ds18b20_write_bit>
	return bit;
}

// G?i m?t byte d? li?u trên bus 1-Wire
void ds18b20_write_byte(uint8_t data) {
	for (uint8_t i = 0; i < 8; i++) {
 1d2:	cf 5f       	subi	r28, 0xFF	; 255
 1d4:	c8 30       	cpi	r28, 0x08	; 8
 1d6:	90 f3       	brcs	.-28     	; 0x1bc <ds18b20_write_byte+0xa>
		ds18b20_write_bit(data & (1 << i));
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <ds18b20_read_byte>:

// ??c m?t byte d? li?u t? bus 1-Wire
uint8_t ds18b20_read_byte(void) {
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

// ??c m?t byte d? li?u t? bus 1-Wire
uint8_t ds18b20_read_byte(void) {
	uint8_t data = 0;
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
 1e6:	0e c0       	rjmp	.+28     	; 0x204 <ds18b20_read_byte+0x26>
		if (ds18b20_read_bit()) {
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <ds18b20_read_bit>
 1ec:	88 23       	and	r24, r24
 1ee:	49 f0       	breq	.+18     	; 0x202 <ds18b20_read_byte+0x24>
			data |= (1 << i);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0c 2e       	mov	r0, r28
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <ds18b20_read_byte+0x1e>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <ds18b20_read_byte+0x1a>
 200:	d8 2b       	or	r29, r24
}

// ??c m?t byte d? li?u t? bus 1-Wire
uint8_t ds18b20_read_byte(void) {
	uint8_t data = 0;
	for (uint8_t i = 0; i < 8; i++) {
 202:	cf 5f       	subi	r28, 0xFF	; 255
 204:	c8 30       	cpi	r28, 0x08	; 8
 206:	80 f3       	brcs	.-32     	; 0x1e8 <ds18b20_read_byte+0xa>
		if (ds18b20_read_bit()) {
			data |= (1 << i);
		}
	}
	return data;
}
 208:	8d 2f       	mov	r24, r29
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <ds18b20_request_temperature>:

// Yêu c?u c?m bi?n b?t ??u ?o nhi?t ??
void ds18b20_request_temperature(void) {
	ds18b20_reset();
 210:	0e 94 63 00 	call	0xc6	; 0xc6 <ds18b20_reset>
	ds18b20_write_byte(0xCC); // Skip ROM (gi? s? ch? có m?t thi?t b?)
 214:	8c ec       	ldi	r24, 0xCC	; 204
 216:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>
	ds18b20_write_byte(0x44); // Convert T
 21a:	84 e4       	ldi	r24, 0x44	; 68
 21c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	8e e9       	ldi	r24, 0x9E	; 158
 224:	94 e2       	ldi	r25, 0x24	; 36
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <ds18b20_request_temperature+0x16>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <ds18b20_request_temperature+0x20>
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <ds18b20_read_temperature>:
	_delay_ms(750); // Ch? quá trình ?o hoàn t?t (có th? c?n ?i?u ch?nh)
}

// ??c nhi?t ?? t? c?m bi?n và tr? v? giá tr? float (?? C)
float ds18b20_read_temperature(void) {
 234:	cf 93       	push	r28
	uint8_t temp_low, temp_high;
	int16_t raw_temp;
	float temperature;

	ds18b20_reset();
 236:	0e 94 63 00 	call	0xc6	; 0xc6 <ds18b20_reset>
	ds18b20_write_byte(0xCC); // Skip ROM
 23a:	8c ec       	ldi	r24, 0xCC	; 204
 23c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>
	ds18b20_write_byte(0xBE); // Read Scratchpad
 240:	8e eb       	ldi	r24, 0xBE	; 190
 242:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ds18b20_write_byte>

	temp_low = ds18b20_read_byte();
 246:	0e 94 ef 00 	call	0x1de	; 0x1de <ds18b20_read_byte>
 24a:	c8 2f       	mov	r28, r24
	temp_high = ds18b20_read_byte();
 24c:	0e 94 ef 00 	call	0x1de	; 0x1de <ds18b20_read_byte>

	raw_temp = (temp_high << 8) | temp_low;
 250:	68 2f       	mov	r22, r24
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	76 2f       	mov	r23, r22
 256:	66 27       	eor	r22, r22
 258:	6c 2b       	or	r22, r28

	// Nhi?t ?? ???c bi?u di?n d??i d?ng s? d?u ph?y ??ng 12-bit (có d?u)
	if (raw_temp & 0x8000) { // Nhi?t ?? âm
 25a:	77 23       	and	r23, r23
 25c:	8c f4       	brge	.+34     	; 0x280 <ds18b20_read_temperature+0x4c>
		raw_temp = (~raw_temp) + 1;
 25e:	71 95       	neg	r23
 260:	61 95       	neg	r22
 262:	71 09       	sbc	r23, r1
		temperature = -((float)raw_temp / 16.0);
 264:	07 2e       	mov	r0, r23
 266:	00 0c       	add	r0, r0
 268:	88 0b       	sbc	r24, r24
 26a:	99 0b       	sbc	r25, r25
 26c:	0e 94 40 03 	call	0x680	; 0x680 <__floatsisf>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e8       	ldi	r20, 0x80	; 128
 276:	5d e3       	ldi	r21, 0x3D	; 61
 278:	0e 94 a4 03 	call	0x748	; 0x748 <__mulsf3>
 27c:	90 58       	subi	r25, 0x80	; 128
 27e:	0c c0       	rjmp	.+24     	; 0x298 <ds18b20_read_temperature+0x64>
	} else { // Nhi?t ?? d??ng
		temperature = (float)raw_temp / 16.0;
 280:	07 2e       	mov	r0, r23
 282:	00 0c       	add	r0, r0
 284:	88 0b       	sbc	r24, r24
 286:	99 0b       	sbc	r25, r25
 288:	0e 94 40 03 	call	0x680	; 0x680 <__floatsisf>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e8       	ldi	r20, 0x80	; 128
 292:	5d e3       	ldi	r21, 0x3D	; 61
 294:	0e 94 a4 03 	call	0x748	; 0x748 <__mulsf3>
	}

	return temperature;
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <i2c_init>:
#include <compat/twi.h> // Th? vi?n TWI/I2C

// Hàm kh?i t?o giao ti?p I2C
void i2c_init(void) {
	// Thi?t l?p t?c ?? bit (SCL frequency)
	TWBR = ((F_CPU / I2C_SCL_FREQUENCY) - 16) / 2;
 29c:	88 e4       	ldi	r24, 0x48	; 72
 29e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	// B?t TWI
	TWCR = (1 << TWEN);
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a8:	08 95       	ret

000002aa <i2c_start>:
}

// Hàm b?t ??u truy?n I2C (g?i START condition)
uint8_t i2c_start(uint8_t address) {
	// G?i START condition
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
 2aa:	94 ea       	ldi	r25, 0xA4	; 164
 2ac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho START condition ???c g?i
	while (!(TWCR & (1 << TWINT)));
 2b0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b4:	99 23       	and	r25, r25
 2b6:	e4 f7       	brge	.-8      	; 0x2b0 <i2c_start+0x6>

	// Ki?m tra tr?ng thái
	if ((TWSR & 0xF8) != TW_START && (TWSR & 0xF8) != TW_REP_START) {
 2b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2bc:	98 7f       	andi	r25, 0xF8	; 248
 2be:	98 30       	cpi	r25, 0x08	; 8
 2c0:	29 f0       	breq	.+10     	; 0x2cc <i2c_start+0x22>
 2c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2c6:	98 7f       	andi	r25, 0xF8	; 248
 2c8:	90 31       	cpi	r25, 0x10	; 16
 2ca:	89 f4       	brne	.+34     	; 0x2ee <i2c_start+0x44>
		return 1; // L?i: START condition không thành công
	}

	// G?i ??a ch? thi?t b? và bit ghi (0)
	TWDR = (address << 1) | TW_WRITE;
 2cc:	88 0f       	add	r24, r24
 2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Xóa c? TWINT ?? b?t ??u g?i ??a ch?
	TWCR = (1 << TWEN) | (1 << TWINT);
 2d2:	84 e8       	ldi	r24, 0x84	; 132
 2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho ??a ch? ???c g?i và nh?n ACK
	while (!(TWCR & (1 << TWINT)));
 2d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2dc:	88 23       	and	r24, r24
 2de:	e4 f7       	brge	.-8      	; 0x2d8 <i2c_start+0x2e>

	// Ki?m tra tr?ng thái ACK
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) {
 2e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2e4:	88 7f       	andi	r24, 0xF8	; 248
 2e6:	88 31       	cpi	r24, 0x18	; 24
 2e8:	21 f0       	breq	.+8      	; 0x2f2 <i2c_start+0x48>
		return 2; // L?i: Không nh?n ???c ACK t? slave
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	08 95       	ret
	// Ch? cho START condition ???c g?i
	while (!(TWCR & (1 << TWINT)));

	// Ki?m tra tr?ng thái
	if ((TWSR & 0xF8) != TW_START && (TWSR & 0xF8) != TW_REP_START) {
		return 1; // L?i: START condition không thành công
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret
	// Ki?m tra tr?ng thái ACK
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) {
		return 2; // L?i: Không nh?n ???c ACK t? slave
	}

	return 0; // Thành công
 2f2:	80 e0       	ldi	r24, 0x00	; 0
}
 2f4:	08 95       	ret

000002f6 <i2c_write>:

// Hàm g?i m?t byte d? li?u qua I2C
uint8_t i2c_write(uint8_t data) {
	// ??t d? li?u vào thanh ghi TWDR
	TWDR = data;
 2f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Xóa c? TWINT ?? b?t ??u g?i d? li?u
	TWCR = (1 << TWEN) | (1 << TWINT);
 2fa:	84 e8       	ldi	r24, 0x84	; 132
 2fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho d? li?u ???c g?i và nh?n ACK
	while (!(TWCR & (1 << TWINT)));
 300:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 304:	88 23       	and	r24, r24
 306:	e4 f7       	brge	.-8      	; 0x300 <i2c_write+0xa>

	// Ki?m tra tr?ng thái ACK
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) {
 308:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 30c:	88 7f       	andi	r24, 0xF8	; 248
 30e:	88 32       	cpi	r24, 0x28	; 40
 310:	11 f0       	breq	.+4      	; 0x316 <i2c_write+0x20>
		return 1; // L?i: Không nh?n ???c ACK t? slave
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	08 95       	ret
	}

	return 0; // Thành công
 316:	80 e0       	ldi	r24, 0x00	; 0
}
 318:	08 95       	ret

0000031a <i2c_stop>:

// Hàm d?ng truy?n I2C (g?i STOP condition)
void i2c_stop(void) {
	// G?i STOP condition
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 31a:	84 e9       	ldi	r24, 0x94	; 148
 31c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Ch? cho STOP condition ???c g?i (th?c t? có th? không c?n ch?)
	while (TWCR & (1 << TWSTO));
 320:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 324:	84 fd       	sbrc	r24, 4
 326:	fc cf       	rjmp	.-8      	; 0x320 <i2c_stop+0x6>
}
 328:	08 95       	ret

0000032a <lcd_send_nibble_i2c>:
#include <string.h>
#include <stdio.h>
#include <inttypes.h>

// Hàm g?i m?t nibble (4 bits) d? li?u ??n LCD qua I2C
static void lcd_send_nibble_i2c(uint8_t data) {
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
    uint8_t i2c_data;

    // G?i 4 bits cao + các chân ?i?u khi?n
    i2c_data = (data & 0xF0) | LCD_BL_PIN; // Gi? backlight luôn b?t (có th? ?i?u ch?nh)
 32e:	c8 2f       	mov	r28, r24
 330:	c0 7f       	andi	r28, 0xF0	; 240
 332:	dc 2f       	mov	r29, r28
 334:	d8 60       	ori	r29, 0x08	; 8

    // Enable pulse
    i2c_start(LCD_I2C_ADDR);
 336:	87 e2       	ldi	r24, 0x27	; 39
 338:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_start>
    i2c_write(i2c_data | LCD_EN_PIN);
 33c:	8c 2f       	mov	r24, r28
 33e:	8c 60       	ori	r24, 0x0C	; 12
 340:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	8a e1       	ldi	r24, 0x1A	; 26
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <lcd_send_nibble_i2c+0x1c>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_send_nibble_i2c+0x22>
    _delay_us(5); // T?ng th?i gian tr?
    i2c_write(i2c_data & ~LCD_EN_PIN);
 34c:	8d 2f       	mov	r24, r29
 34e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
    i2c_stop();
 352:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c_stop>
 356:	87 ec       	ldi	r24, 0xC7	; 199
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_send_nibble_i2c+0x30>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_send_nibble_i2c+0x36>
 360:	00 00       	nop
    _delay_us(50); // T?ng th?i gian tr?
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <lcd_send_byte_i2c>:

// Hàm g?i m?t byte d? li?u (command ho?c character) ??n LCD qua I2C
void lcd_send_byte_i2c(uint8_t data, uint8_t rs) {
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	18 2f       	mov	r17, r24
 370:	c6 2f       	mov	r28, r22
    uint8_t i2c_data_high, i2c_data_low;

    i2c_start(LCD_I2C_ADDR); // B?t ??u giao d?ch I2C
 372:	87 e2       	ldi	r24, 0x27	; 39
 374:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_start>

    // G?i 4 bits cao
    i2c_data_high = (data & 0xF0) | LCD_BL_PIN | (rs ? LCD_RS_PIN : 0) | LCD_EN_PIN;
 378:	d1 e0       	ldi	r29, 0x01	; 1
 37a:	c1 11       	cpse	r28, r1
 37c:	01 c0       	rjmp	.+2      	; 0x380 <lcd_send_byte_i2c+0x18>
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	c1 2f       	mov	r28, r17
 382:	c0 7f       	andi	r28, 0xF0	; 240
 384:	c8 60       	ori	r28, 0x08	; 8
 386:	cd 2b       	or	r28, r29
 388:	c4 60       	ori	r28, 0x04	; 4
    i2c_write(i2c_data_high);
 38a:	8c 2f       	mov	r24, r28
 38c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
    //_delay_us(5);
    i2c_data_high &= ~LCD_EN_PIN;
    i2c_write(i2c_data_high);
 390:	8c 2f       	mov	r24, r28
 392:	89 7f       	andi	r24, 0xF9	; 249
 394:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
    //_delay_us(5);

    // G?i 4 bits th?p
    i2c_data_low = ((data << 4) & 0xF0) | LCD_BL_PIN | (rs ? LCD_RS_PIN : 0) | LCD_EN_PIN;
 398:	20 e1       	ldi	r18, 0x10	; 16
 39a:	12 9f       	mul	r17, r18
 39c:	c0 01       	movw	r24, r0
 39e:	11 24       	eor	r1, r1
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	d8 2b       	or	r29, r24
 3a4:	d4 60       	ori	r29, 0x04	; 4
    i2c_write(i2c_data_low);
 3a6:	8d 2f       	mov	r24, r29
 3a8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>
   // _delay_us(5);
    i2c_data_low &= ~LCD_EN_PIN;
    i2c_write(i2c_data_low);
 3ac:	8d 2f       	mov	r24, r29
 3ae:	8b 7f       	andi	r24, 0xFB	; 251
 3b0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_write>

    i2c_stop(); // K?t thúc giao d?ch I2C
 3b4:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c_stop>
   // _delay_us(100);
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	08 95       	ret

000003c0 <lcd_send_char>:
    lcd_send_byte_i2c(0x06, 0); // Ch? ?? d?ch con tr? sang ph?i sau m?i ký t?
}

// Hàm g?i m?t ký t? ??n LCD
void lcd_send_char(char data) {
    lcd_send_byte_i2c(data, 1); // rs = 1 cho d? li?u (ký t?)
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
 3c6:	08 95       	ret

000003c8 <lcd_send_string>:
}

// Hàm g?i m?t chu?i ??n LCD
void lcd_send_string(const char *str) {
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
    while (*str) {
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <lcd_send_string+0xe>
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
 3d0:	21 96       	adiw	r28, 0x01	; 1
 3d2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_send_char>
    lcd_send_byte_i2c(data, 1); // rs = 1 cho d? li?u (ký t?)
}

// Hàm g?i m?t chu?i ??n LCD
void lcd_send_string(const char *str) {
    while (*str) {
 3d6:	88 81       	ld	r24, Y
 3d8:	81 11       	cpse	r24, r1
 3da:	fa cf       	rjmp	.-12     	; 0x3d0 <lcd_send_string+0x8>
		//lcd_send_char('28.0');
        lcd_send_char(*str++);
    }
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <lcd_set_cursor>:

// Hàm ??t con tr? LCD ??n v? trí dòng và c?t
void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t address;
    switch (row) {
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	11 f0       	breq	.+4      	; 0x3ea <lcd_set_cursor+0x8>
        case 0: address = 0x00; break;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <lcd_set_cursor+0xa>
        case 1: address = 0x40; break;
 3ea:	80 e4       	ldi	r24, 0x40	; 64
        default: address = 0x00; break;
    }
    lcd_send_byte_i2c(0x80 | (address + col), 0); // 0x80 là l?nh ??t ??a ch? DDRAM
 3ec:	86 0f       	add	r24, r22
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
 3f6:	08 95       	ret

000003f8 <lcd_clear>:
}

// Hàm xóa màn hình LCD
void lcd_clear(void) {
    lcd_send_byte_i2c(0x01, 0); // 0x01 là l?nh xóa màn hình
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	8f e1       	ldi	r24, 0x1F	; 31
 402:	9e e4       	ldi	r25, 0x4E	; 78
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	08 95       	ret

0000040e <lcd_init>:
   // _delay_us(100);
}

// Hàm kh?i t?o LCD s? d?ng I2C
void lcd_init(void) {
    i2c_init(); // Kh?i t?o giao ti?p I2C
 40e:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_init>
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	81 ee       	ldi	r24, 0xE1	; 225
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <lcd_init+0xa>
 420:	00 c0       	rjmp	.+0      	; 0x422 <lcd_init+0x14>
 422:	00 00       	nop
    _delay_ms(100); // T?ng th?i gian tr?

    // Kh?i t?o LCD ? ch? ?? 4-bit
    lcd_send_nibble_i2c(0x03 << 4);
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42a:	8f ec       	ldi	r24, 0xCF	; 207
 42c:	97 e0       	ldi	r25, 0x07	; 7
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_init+0x20>
 432:	00 c0       	rjmp	.+0      	; 0x434 <lcd_init+0x26>
 434:	00 00       	nop
    _delay_us(500); // T?ng th?i gian tr?
    lcd_send_nibble_i2c(0x03 << 4);
 436:	80 e3       	ldi	r24, 0x30	; 48
 438:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>
 43c:	8f ec       	ldi	r24, 0xCF	; 207
 43e:	97 e0       	ldi	r25, 0x07	; 7
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <lcd_init+0x32>
 444:	00 c0       	rjmp	.+0      	; 0x446 <lcd_init+0x38>
 446:	00 00       	nop
    _delay_us(500); // T?ng th?i gian tr?
    lcd_send_nibble_i2c(0x03 << 4);
 448:	80 e3       	ldi	r24, 0x30	; 48
 44a:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>
 44e:	8f e8       	ldi	r24, 0x8F	; 143
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <lcd_init+0x44>
 456:	00 c0       	rjmp	.+0      	; 0x458 <lcd_init+0x4a>
 458:	00 00       	nop
    _delay_us(100);  // T?ng th?i gian tr?
    lcd_send_nibble_i2c(0x02 << 4);
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_send_nibble_i2c>

    // Cài ??t các ch?c n?ng LCD
    lcd_send_byte_i2c(0x28, 0); // 4-bit, 2 dòng, font 5x8
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	88 e2       	ldi	r24, 0x28	; 40
 464:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
    lcd_send_byte_i2c(0x0C, 0); // B?t hi?n th?, t?t con tr?, t?t nh?p nháy con tr?
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
    lcd_clear();
 470:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_clear>
    lcd_send_byte_i2c(0x06, 0); // Ch? ?? d?ch con tr? sang ph?i sau m?i ký t?
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_send_byte_i2c>
 47c:	08 95       	ret

0000047e <main>:
#include "Uart/uart_utils.h" // Include file Uart/uart_utils.h

#define BAUD 9600
#define UBRR_VALUE F_CPU / 16 / BAUD - 1

int main(void) {
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	64 97       	sbiw	r28, 0x14	; 20
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
  USART_Init(UBRR_VALUE); // Kh?i t?o UART
 492:	87 e6       	ldi	r24, 0x67	; 103
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Init>
  printf("Hello from Arduino!\r\n");
 49a:	86 e9       	ldi	r24, 0x96	; 150
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 39 04 	call	0x872	; 0x872 <puts>
  printf("Chuong trinh doc nhiet do DS18B20, hien thi LCD (I2C) va UART (AVR)\r\n");
 4a2:	8b ea       	ldi	r24, 0xAB	; 171
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 39 04 	call	0x872	; 0x872 <puts>

  i2c_init();
 4aa:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_init>
  ds18b20_init(DS18B20_PIN);
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	0e 94 53 00 	call	0xa6	; 0xa6 <ds18b20_init>
  lcd_init();
 4b4:	0e 94 07 02 	call	0x40e	; 0x40e <lcd_init>

  //char temp_str_lcd[20];

  while (1) {
    if (ds18b20_reset()) {
 4b8:	0e 94 63 00 	call	0xc6	; 0xc6 <ds18b20_reset>
 4bc:	88 23       	and	r24, r24
 4be:	c1 f1       	breq	.+112    	; 0x530 <main+0xb2>
        ds18b20_request_temperature();
 4c0:	0e 94 08 01 	call	0x210	; 0x210 <ds18b20_request_temperature>
        float temperatureC = ds18b20_read_temperature();
 4c4:	0e 94 1a 01 	call	0x234	; 0x234 <ds18b20_read_temperature>
 4c8:	16 2f       	mov	r17, r22
 4ca:	07 2f       	mov	r16, r23
 4cc:	f8 2e       	mov	r15, r24
 4ce:	e9 2e       	mov	r14, r25
        //float temperatureC = 28.5;
		char test_str_lcd[20];

        printf("Reset Result: 1\r\n"); // In k?t qu? reset thành công
 4d0:	80 ef       	ldi	r24, 0xF0	; 240
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 39 04 	call	0x872	; 0x872 <puts>

        // Hi?n th? lên LCD
        lcd_clear(); // Thêm l?nh xóa màn hình tr??c khi in
 4d8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_clear>
        sprintf(test_str_lcd, "Temp: %d*C", (int)temperatureC);
 4dc:	61 2f       	mov	r22, r17
 4de:	70 2f       	mov	r23, r16
 4e0:	8f 2d       	mov	r24, r15
 4e2:	9e 2d       	mov	r25, r14
 4e4:	0e 94 08 03 	call	0x610	; 0x610 <__fixsfsi>
 4e8:	7f 93       	push	r23
 4ea:	6f 93       	push	r22
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	92 e0       	ldi	r25, 0x02	; 2
 4f0:	9f 93       	push	r25
 4f2:	8f 93       	push	r24
 4f4:	ce 01       	movw	r24, r28
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	6c 01       	movw	r12, r24
 4fa:	9f 93       	push	r25
 4fc:	8f 93       	push	r24
 4fe:	0e 94 69 04 	call	0x8d2	; 0x8d2 <sprintf>
        lcd_set_cursor(0, 0);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_set_cursor>
        //lcd_send_string(temp_str_lcd);
		lcd_send_string(test_str_lcd);
 50a:	c6 01       	movw	r24, r12
 50c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_send_string>

        // G?i qua UART b?ng printf
        printf("Nhiet do: %.1f *C\r\n", temperatureC);
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	8c e0       	ldi	r24, 0x0C	; 12
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	9f 93       	push	r25
 51e:	8f 93       	push	r24
 520:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	12 c0       	rjmp	.+36     	; 0x554 <main+0xd6>
    } else {
        printf("Reset Result: 0\r\n"); // In k?t qu? reset th?t b?i
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	0e 94 39 04 	call	0x872	; 0x872 <puts>

        // Hi?n th? l?i trên LCD
        lcd_clear(); // Thêm l?nh xóa màn hình tr??c khi in l?i
 538:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_clear>
        lcd_set_cursor(0, 0);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_set_cursor>
        lcd_send_string("Sensor Error");
 544:	81 e3       	ldi	r24, 0x31	; 49
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_send_string>

        // G?i thông báo l?i qua UART b?ng printf
        printf("Loi: Khong tim thay cam bien DS18B20\r\n");
 54c:	8e e3       	ldi	r24, 0x3E	; 62
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	0e 94 39 04 	call	0x872	; 0x872 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	9f ef       	ldi	r25, 0xFF	; 255
 556:	23 ed       	ldi	r18, 0xD3	; 211
 558:	80 e3       	ldi	r24, 0x30	; 48
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	20 40       	sbci	r18, 0x00	; 0
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0xdc>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0xe6>
 564:	00 00       	nop
 566:	a8 cf       	rjmp	.-176    	; 0x4b8 <main+0x3a>

00000568 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
#include <stdarg.h>

void USART_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
 568:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 570:	88 e1       	ldi	r24, 0x18	; 24
 572:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3 << UCSZ00);
 576:	86 e0       	ldi	r24, 0x06	; 6
 578:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 57c:	08 95       	ret

0000057e <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 57e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 582:	95 ff       	sbrs	r25, 5
 584:	fc cf       	rjmp	.-8      	; 0x57e <USART_Transmit>
	UDR0 = data;
 586:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 58a:	08 95       	ret

0000058c <USART_PutString>:
}

void USART_PutString(char *str) {
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != 0; i++) {
 596:	c0 e0       	ldi	r28, 0x00	; 0
 598:	d0 e0       	ldi	r29, 0x00	; 0
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <USART_PutString+0x16>
		USART_Transmit(str[i]);
 59c:	0e 94 bf 02 	call	0x57e	; 0x57e <USART_Transmit>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART_PutString(char *str) {
	for (int i = 0; str[i] != 0; i++) {
 5a0:	21 96       	adiw	r28, 0x01	; 1
 5a2:	f8 01       	movw	r30, r16
 5a4:	ec 0f       	add	r30, r28
 5a6:	fd 1f       	adc	r31, r29
 5a8:	80 81       	ld	r24, Z
 5aa:	81 11       	cpse	r24, r1
 5ac:	f7 cf       	rjmp	.-18     	; 0x59c <USART_PutString+0x10>
		USART_Transmit(str[i]);
	}
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <printf>:

int printf(const char *fmt, ...) {
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	c0 58       	subi	r28, 0x80	; 128
 5c6:	d1 09       	sbc	r29, r1
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
 5d2:	9e 01       	movw	r18, r28
 5d4:	29 57       	subi	r18, 0x79	; 121
 5d6:	3f 4f       	sbci	r19, 0xFF	; 255
 5d8:	f9 01       	movw	r30, r18
 5da:	41 91       	ld	r20, Z+
 5dc:	51 91       	ld	r21, Z+
 5de:	9f 01       	movw	r18, r30
	char buffer[128];
	va_list args;
	va_start(args, fmt);
	int len = vsnprintf(buffer, sizeof(buffer), fmt, args);
 5e0:	60 e8       	ldi	r22, 0x80	; 128
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	0e 94 8b 04 	call	0x916	; 0x916 <vsnprintf>
 5ec:	8c 01       	movw	r16, r24
	va_end(args);
	USART_PutString(buffer);
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	0e 94 c6 02 	call	0x58c	; 0x58c <USART_PutString>
	return len;
 5f6:	c8 01       	movw	r24, r16
 5f8:	c0 58       	subi	r28, 0x80	; 128
 5fa:	df 4f       	sbci	r29, 0xFF	; 255
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <__fixsfsi>:
 610:	0e 94 0f 03 	call	0x61e	; 0x61e <__fixunssfsi>
 614:	68 94       	set
 616:	b1 11       	cpse	r27, r1
 618:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>
 61c:	08 95       	ret

0000061e <__fixunssfsi>:
 61e:	0e 94 83 03 	call	0x706	; 0x706 <__fp_splitA>
 622:	88 f0       	brcs	.+34     	; 0x646 <__fixunssfsi+0x28>
 624:	9f 57       	subi	r25, 0x7F	; 127
 626:	98 f0       	brcs	.+38     	; 0x64e <__fixunssfsi+0x30>
 628:	b9 2f       	mov	r27, r25
 62a:	99 27       	eor	r25, r25
 62c:	b7 51       	subi	r27, 0x17	; 23
 62e:	b0 f0       	brcs	.+44     	; 0x65c <__fixunssfsi+0x3e>
 630:	e1 f0       	breq	.+56     	; 0x66a <__fixunssfsi+0x4c>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	1a f0       	brmi	.+6      	; 0x642 <__fixunssfsi+0x24>
 63c:	ba 95       	dec	r27
 63e:	c9 f7       	brne	.-14     	; 0x632 <__fixunssfsi+0x14>
 640:	14 c0       	rjmp	.+40     	; 0x66a <__fixunssfsi+0x4c>
 642:	b1 30       	cpi	r27, 0x01	; 1
 644:	91 f0       	breq	.+36     	; 0x66a <__fixunssfsi+0x4c>
 646:	0e 94 9d 03 	call	0x73a	; 0x73a <__fp_zero>
 64a:	b1 e0       	ldi	r27, 0x01	; 1
 64c:	08 95       	ret
 64e:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_zero>
 652:	67 2f       	mov	r22, r23
 654:	78 2f       	mov	r23, r24
 656:	88 27       	eor	r24, r24
 658:	b8 5f       	subi	r27, 0xF8	; 248
 65a:	39 f0       	breq	.+14     	; 0x66a <__fixunssfsi+0x4c>
 65c:	b9 3f       	cpi	r27, 0xF9	; 249
 65e:	cc f3       	brlt	.-14     	; 0x652 <__fixunssfsi+0x34>
 660:	86 95       	lsr	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b3 95       	inc	r27
 668:	d9 f7       	brne	.-10     	; 0x660 <__fixunssfsi+0x42>
 66a:	3e f4       	brtc	.+14     	; 0x67a <__fixunssfsi+0x5c>
 66c:	90 95       	com	r25
 66e:	80 95       	com	r24
 670:	70 95       	com	r23
 672:	61 95       	neg	r22
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__floatunsisf>:
 67c:	e8 94       	clt
 67e:	09 c0       	rjmp	.+18     	; 0x692 <__floatsisf+0x12>

00000680 <__floatsisf>:
 680:	97 fb       	bst	r25, 7
 682:	3e f4       	brtc	.+14     	; 0x692 <__floatsisf+0x12>
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	99 23       	and	r25, r25
 694:	a9 f0       	breq	.+42     	; 0x6c0 <__floatsisf+0x40>
 696:	f9 2f       	mov	r31, r25
 698:	96 e9       	ldi	r25, 0x96	; 150
 69a:	bb 27       	eor	r27, r27
 69c:	93 95       	inc	r25
 69e:	f6 95       	lsr	r31
 6a0:	87 95       	ror	r24
 6a2:	77 95       	ror	r23
 6a4:	67 95       	ror	r22
 6a6:	b7 95       	ror	r27
 6a8:	f1 11       	cpse	r31, r1
 6aa:	f8 cf       	rjmp	.-16     	; 0x69c <__floatsisf+0x1c>
 6ac:	fa f4       	brpl	.+62     	; 0x6ec <__floatsisf+0x6c>
 6ae:	bb 0f       	add	r27, r27
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__floatsisf+0x36>
 6b2:	60 ff       	sbrs	r22, 0
 6b4:	1b c0       	rjmp	.+54     	; 0x6ec <__floatsisf+0x6c>
 6b6:	6f 5f       	subi	r22, 0xFF	; 255
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	16 c0       	rjmp	.+44     	; 0x6ec <__floatsisf+0x6c>
 6c0:	88 23       	and	r24, r24
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <__floatsisf+0x48>
 6c4:	96 e9       	ldi	r25, 0x96	; 150
 6c6:	11 c0       	rjmp	.+34     	; 0x6ea <__floatsisf+0x6a>
 6c8:	77 23       	and	r23, r23
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <__floatsisf+0x54>
 6cc:	9e e8       	ldi	r25, 0x8E	; 142
 6ce:	87 2f       	mov	r24, r23
 6d0:	76 2f       	mov	r23, r22
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__floatsisf+0x5e>
 6d4:	66 23       	and	r22, r22
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <__floatsisf+0x74>
 6d8:	96 e8       	ldi	r25, 0x86	; 134
 6da:	86 2f       	mov	r24, r22
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	2a f0       	brmi	.+10     	; 0x6ec <__floatsisf+0x6c>
 6e2:	9a 95       	dec	r25
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	da f7       	brpl	.-10     	; 0x6e2 <__floatsisf+0x62>
 6ec:	88 0f       	add	r24, r24
 6ee:	96 95       	lsr	r25
 6f0:	87 95       	ror	r24
 6f2:	97 f9       	bld	r25, 7
 6f4:	08 95       	ret

000006f6 <__fp_split3>:
 6f6:	57 fd       	sbrc	r21, 7
 6f8:	90 58       	subi	r25, 0x80	; 128
 6fa:	44 0f       	add	r20, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	59 f0       	breq	.+22     	; 0x716 <__fp_splitA+0x10>
 700:	5f 3f       	cpi	r21, 0xFF	; 255
 702:	71 f0       	breq	.+28     	; 0x720 <__fp_splitA+0x1a>
 704:	47 95       	ror	r20

00000706 <__fp_splitA>:
 706:	88 0f       	add	r24, r24
 708:	97 fb       	bst	r25, 7
 70a:	99 1f       	adc	r25, r25
 70c:	61 f0       	breq	.+24     	; 0x726 <__fp_splitA+0x20>
 70e:	9f 3f       	cpi	r25, 0xFF	; 255
 710:	79 f0       	breq	.+30     	; 0x730 <__fp_splitA+0x2a>
 712:	87 95       	ror	r24
 714:	08 95       	ret
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	14 06       	cpc	r1, r20
 71c:	55 1f       	adc	r21, r21
 71e:	f2 cf       	rjmp	.-28     	; 0x704 <__fp_split3+0xe>
 720:	46 95       	lsr	r20
 722:	f1 df       	rcall	.-30     	; 0x706 <__fp_splitA>
 724:	08 c0       	rjmp	.+16     	; 0x736 <__fp_splitA+0x30>
 726:	16 16       	cp	r1, r22
 728:	17 06       	cpc	r1, r23
 72a:	18 06       	cpc	r1, r24
 72c:	99 1f       	adc	r25, r25
 72e:	f1 cf       	rjmp	.-30     	; 0x712 <__fp_splitA+0xc>
 730:	86 95       	lsr	r24
 732:	71 05       	cpc	r23, r1
 734:	61 05       	cpc	r22, r1
 736:	08 94       	sec
 738:	08 95       	ret

0000073a <__fp_zero>:
 73a:	e8 94       	clt

0000073c <__fp_szero>:
 73c:	bb 27       	eor	r27, r27
 73e:	66 27       	eor	r22, r22
 740:	77 27       	eor	r23, r23
 742:	cb 01       	movw	r24, r22
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret

00000748 <__mulsf3>:
 748:	0e 94 b7 03 	call	0x76e	; 0x76e <__mulsf3x>
 74c:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_round>
 750:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscA>
 754:	38 f0       	brcs	.+14     	; 0x764 <__mulsf3+0x1c>
 756:	0e 94 21 04 	call	0x842	; 0x842 <__fp_pscB>
 75a:	20 f0       	brcs	.+8      	; 0x764 <__mulsf3+0x1c>
 75c:	95 23       	and	r25, r21
 75e:	11 f0       	breq	.+4      	; 0x764 <__mulsf3+0x1c>
 760:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_inf>
 764:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_nan>
 768:	11 24       	eor	r1, r1
 76a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>

0000076e <__mulsf3x>:
 76e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_split3>
 772:	70 f3       	brcs	.-36     	; 0x750 <__mulsf3+0x8>

00000774 <__mulsf3_pse>:
 774:	95 9f       	mul	r25, r21
 776:	c1 f3       	breq	.-16     	; 0x768 <__mulsf3+0x20>
 778:	95 0f       	add	r25, r21
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	55 1f       	adc	r21, r21
 77e:	62 9f       	mul	r22, r18
 780:	f0 01       	movw	r30, r0
 782:	72 9f       	mul	r23, r18
 784:	bb 27       	eor	r27, r27
 786:	f0 0d       	add	r31, r0
 788:	b1 1d       	adc	r27, r1
 78a:	63 9f       	mul	r22, r19
 78c:	aa 27       	eor	r26, r26
 78e:	f0 0d       	add	r31, r0
 790:	b1 1d       	adc	r27, r1
 792:	aa 1f       	adc	r26, r26
 794:	64 9f       	mul	r22, r20
 796:	66 27       	eor	r22, r22
 798:	b0 0d       	add	r27, r0
 79a:	a1 1d       	adc	r26, r1
 79c:	66 1f       	adc	r22, r22
 79e:	82 9f       	mul	r24, r18
 7a0:	22 27       	eor	r18, r18
 7a2:	b0 0d       	add	r27, r0
 7a4:	a1 1d       	adc	r26, r1
 7a6:	62 1f       	adc	r22, r18
 7a8:	73 9f       	mul	r23, r19
 7aa:	b0 0d       	add	r27, r0
 7ac:	a1 1d       	adc	r26, r1
 7ae:	62 1f       	adc	r22, r18
 7b0:	83 9f       	mul	r24, r19
 7b2:	a0 0d       	add	r26, r0
 7b4:	61 1d       	adc	r22, r1
 7b6:	22 1f       	adc	r18, r18
 7b8:	74 9f       	mul	r23, r20
 7ba:	33 27       	eor	r19, r19
 7bc:	a0 0d       	add	r26, r0
 7be:	61 1d       	adc	r22, r1
 7c0:	23 1f       	adc	r18, r19
 7c2:	84 9f       	mul	r24, r20
 7c4:	60 0d       	add	r22, r0
 7c6:	21 1d       	adc	r18, r1
 7c8:	82 2f       	mov	r24, r18
 7ca:	76 2f       	mov	r23, r22
 7cc:	6a 2f       	mov	r22, r26
 7ce:	11 24       	eor	r1, r1
 7d0:	9f 57       	subi	r25, 0x7F	; 127
 7d2:	50 40       	sbci	r21, 0x00	; 0
 7d4:	9a f0       	brmi	.+38     	; 0x7fc <__mulsf3_pse+0x88>
 7d6:	f1 f0       	breq	.+60     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7d8:	88 23       	and	r24, r24
 7da:	4a f0       	brmi	.+18     	; 0x7ee <__mulsf3_pse+0x7a>
 7dc:	ee 0f       	add	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	bb 1f       	adc	r27, r27
 7e2:	66 1f       	adc	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	91 50       	subi	r25, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__mulsf3_pse+0x64>
 7ee:	9e 3f       	cpi	r25, 0xFE	; 254
 7f0:	51 05       	cpc	r21, r1
 7f2:	80 f0       	brcs	.+32     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f4:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_inf>
 7f8:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>
 7fc:	5f 3f       	cpi	r21, 0xFF	; 255
 7fe:	e4 f3       	brlt	.-8      	; 0x7f8 <__mulsf3_pse+0x84>
 800:	98 3e       	cpi	r25, 0xE8	; 232
 802:	d4 f3       	brlt	.-12     	; 0x7f8 <__mulsf3_pse+0x84>
 804:	86 95       	lsr	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f7 95       	ror	r31
 80e:	e7 95       	ror	r30
 810:	9f 5f       	subi	r25, 0xFF	; 255
 812:	c1 f7       	brne	.-16     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 814:	fe 2b       	or	r31, r30
 816:	88 0f       	add	r24, r24
 818:	91 1d       	adc	r25, r1
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	97 f9       	bld	r25, 7
 820:	08 95       	ret

00000822 <__fp_inf>:
 822:	97 f9       	bld	r25, 7
 824:	9f 67       	ori	r25, 0x7F	; 127
 826:	80 e8       	ldi	r24, 0x80	; 128
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	08 95       	ret

0000082e <__fp_nan>:
 82e:	9f ef       	ldi	r25, 0xFF	; 255
 830:	80 ec       	ldi	r24, 0xC0	; 192
 832:	08 95       	ret

00000834 <__fp_pscA>:
 834:	00 24       	eor	r0, r0
 836:	0a 94       	dec	r0
 838:	16 16       	cp	r1, r22
 83a:	17 06       	cpc	r1, r23
 83c:	18 06       	cpc	r1, r24
 83e:	09 06       	cpc	r0, r25
 840:	08 95       	ret

00000842 <__fp_pscB>:
 842:	00 24       	eor	r0, r0
 844:	0a 94       	dec	r0
 846:	12 16       	cp	r1, r18
 848:	13 06       	cpc	r1, r19
 84a:	14 06       	cpc	r1, r20
 84c:	05 06       	cpc	r0, r21
 84e:	08 95       	ret

00000850 <__fp_round>:
 850:	09 2e       	mov	r0, r25
 852:	03 94       	inc	r0
 854:	00 0c       	add	r0, r0
 856:	11 f4       	brne	.+4      	; 0x85c <__fp_round+0xc>
 858:	88 23       	and	r24, r24
 85a:	52 f0       	brmi	.+20     	; 0x870 <__fp_round+0x20>
 85c:	bb 0f       	add	r27, r27
 85e:	40 f4       	brcc	.+16     	; 0x870 <__fp_round+0x20>
 860:	bf 2b       	or	r27, r31
 862:	11 f4       	brne	.+4      	; 0x868 <__fp_round+0x18>
 864:	60 ff       	sbrs	r22, 0
 866:	04 c0       	rjmp	.+8      	; 0x870 <__fp_round+0x20>
 868:	6f 5f       	subi	r22, 0xFF	; 255
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	08 95       	ret

00000872 <puts>:
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <__data_end+0x2>
 87e:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <__data_end+0x3>
 882:	23 81       	ldd	r18, Z+3	; 0x03
 884:	21 ff       	sbrs	r18, 1
 886:	1b c0       	rjmp	.+54     	; 0x8be <puts+0x4c>
 888:	8c 01       	movw	r16, r24
 88a:	d0 e0       	ldi	r29, 0x00	; 0
 88c:	c0 e0       	ldi	r28, 0x00	; 0
 88e:	f8 01       	movw	r30, r16
 890:	81 91       	ld	r24, Z+
 892:	8f 01       	movw	r16, r30
 894:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <__data_end+0x2>
 898:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <__data_end+0x3>
 89c:	db 01       	movw	r26, r22
 89e:	18 96       	adiw	r26, 0x08	; 8
 8a0:	ed 91       	ld	r30, X+
 8a2:	fc 91       	ld	r31, X
 8a4:	19 97       	sbiw	r26, 0x09	; 9
 8a6:	88 23       	and	r24, r24
 8a8:	31 f0       	breq	.+12     	; 0x8b6 <puts+0x44>
 8aa:	09 95       	icall
 8ac:	89 2b       	or	r24, r25
 8ae:	79 f3       	breq	.-34     	; 0x88e <puts+0x1c>
 8b0:	df ef       	ldi	r29, 0xFF	; 255
 8b2:	cf ef       	ldi	r28, 0xFF	; 255
 8b4:	ec cf       	rjmp	.-40     	; 0x88e <puts+0x1c>
 8b6:	8a e0       	ldi	r24, 0x0A	; 10
 8b8:	09 95       	icall
 8ba:	89 2b       	or	r24, r25
 8bc:	19 f0       	breq	.+6      	; 0x8c4 <puts+0x52>
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	9f ef       	ldi	r25, 0xFF	; 255
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <puts+0x56>
 8c4:	8d 2f       	mov	r24, r29
 8c6:	9c 2f       	mov	r25, r28
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	08 95       	ret

000008d2 <sprintf>:
 8d2:	ae e0       	ldi	r26, 0x0E	; 14
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	ef e6       	ldi	r30, 0x6F	; 111
 8d8:	f4 e0       	ldi	r31, 0x04	; 4
 8da:	0c 94 56 07 	jmp	0xeac	; 0xeac <__prologue_saves__+0x1c>
 8de:	0d 89       	ldd	r16, Y+21	; 0x15
 8e0:	1e 89       	ldd	r17, Y+22	; 0x16
 8e2:	86 e0       	ldi	r24, 0x06	; 6
 8e4:	8c 83       	std	Y+4, r24	; 0x04
 8e6:	1a 83       	std	Y+2, r17	; 0x02
 8e8:	09 83       	std	Y+1, r16	; 0x01
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	9f e7       	ldi	r25, 0x7F	; 127
 8ee:	9e 83       	std	Y+6, r25	; 0x06
 8f0:	8d 83       	std	Y+5, r24	; 0x05
 8f2:	ae 01       	movw	r20, r28
 8f4:	47 5e       	subi	r20, 0xE7	; 231
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	6f 89       	ldd	r22, Y+23	; 0x17
 8fa:	78 8d       	ldd	r23, Y+24	; 0x18
 8fc:	ce 01       	movw	r24, r28
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	0e 94 b7 04 	call	0x96e	; 0x96e <vfprintf>
 904:	ef 81       	ldd	r30, Y+7	; 0x07
 906:	f8 85       	ldd	r31, Y+8	; 0x08
 908:	e0 0f       	add	r30, r16
 90a:	f1 1f       	adc	r31, r17
 90c:	10 82       	st	Z, r1
 90e:	2e 96       	adiw	r28, 0x0e	; 14
 910:	e4 e0       	ldi	r30, 0x04	; 4
 912:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__epilogue_restores__+0x1c>

00000916 <vsnprintf>:
 916:	ae e0       	ldi	r26, 0x0E	; 14
 918:	b0 e0       	ldi	r27, 0x00	; 0
 91a:	e1 e9       	ldi	r30, 0x91	; 145
 91c:	f4 e0       	ldi	r31, 0x04	; 4
 91e:	0c 94 56 07 	jmp	0xeac	; 0xeac <__prologue_saves__+0x1c>
 922:	8c 01       	movw	r16, r24
 924:	fa 01       	movw	r30, r20
 926:	86 e0       	ldi	r24, 0x06	; 6
 928:	8c 83       	std	Y+4, r24	; 0x04
 92a:	1a 83       	std	Y+2, r17	; 0x02
 92c:	09 83       	std	Y+1, r16	; 0x01
 92e:	77 ff       	sbrs	r23, 7
 930:	02 c0       	rjmp	.+4      	; 0x936 <vsnprintf+0x20>
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	70 e8       	ldi	r23, 0x80	; 128
 936:	cb 01       	movw	r24, r22
 938:	01 97       	sbiw	r24, 0x01	; 1
 93a:	9e 83       	std	Y+6, r25	; 0x06
 93c:	8d 83       	std	Y+5, r24	; 0x05
 93e:	a9 01       	movw	r20, r18
 940:	bf 01       	movw	r22, r30
 942:	ce 01       	movw	r24, r28
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	0e 94 b7 04 	call	0x96e	; 0x96e <vfprintf>
 94a:	4d 81       	ldd	r20, Y+5	; 0x05
 94c:	5e 81       	ldd	r21, Y+6	; 0x06
 94e:	57 fd       	sbrc	r21, 7
 950:	0a c0       	rjmp	.+20     	; 0x966 <vsnprintf+0x50>
 952:	2f 81       	ldd	r18, Y+7	; 0x07
 954:	38 85       	ldd	r19, Y+8	; 0x08
 956:	42 17       	cp	r20, r18
 958:	53 07       	cpc	r21, r19
 95a:	0c f4       	brge	.+2      	; 0x95e <vsnprintf+0x48>
 95c:	9a 01       	movw	r18, r20
 95e:	f8 01       	movw	r30, r16
 960:	e2 0f       	add	r30, r18
 962:	f3 1f       	adc	r31, r19
 964:	10 82       	st	Z, r1
 966:	2e 96       	adiw	r28, 0x0e	; 14
 968:	e4 e0       	ldi	r30, 0x04	; 4
 96a:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__epilogue_restores__+0x1c>

0000096e <vfprintf>:
 96e:	ab e0       	ldi	r26, 0x0B	; 11
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	ed eb       	ldi	r30, 0xBD	; 189
 974:	f4 e0       	ldi	r31, 0x04	; 4
 976:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__prologue_saves__>
 97a:	6c 01       	movw	r12, r24
 97c:	7b 01       	movw	r14, r22
 97e:	8a 01       	movw	r16, r20
 980:	fc 01       	movw	r30, r24
 982:	17 82       	std	Z+7, r1	; 0x07
 984:	16 82       	std	Z+6, r1	; 0x06
 986:	83 81       	ldd	r24, Z+3	; 0x03
 988:	81 ff       	sbrs	r24, 1
 98a:	cc c1       	rjmp	.+920    	; 0xd24 <vfprintf+0x3b6>
 98c:	ce 01       	movw	r24, r28
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	3c 01       	movw	r6, r24
 992:	f6 01       	movw	r30, r12
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	f7 01       	movw	r30, r14
 998:	93 fd       	sbrc	r25, 3
 99a:	85 91       	lpm	r24, Z+
 99c:	93 ff       	sbrs	r25, 3
 99e:	81 91       	ld	r24, Z+
 9a0:	7f 01       	movw	r14, r30
 9a2:	88 23       	and	r24, r24
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <vfprintf+0x3a>
 9a6:	ba c1       	rjmp	.+884    	; 0xd1c <vfprintf+0x3ae>
 9a8:	85 32       	cpi	r24, 0x25	; 37
 9aa:	39 f4       	brne	.+14     	; 0x9ba <vfprintf+0x4c>
 9ac:	93 fd       	sbrc	r25, 3
 9ae:	85 91       	lpm	r24, Z+
 9b0:	93 ff       	sbrs	r25, 3
 9b2:	81 91       	ld	r24, Z+
 9b4:	7f 01       	movw	r14, r30
 9b6:	85 32       	cpi	r24, 0x25	; 37
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <vfprintf+0x56>
 9ba:	b6 01       	movw	r22, r12
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 9c2:	e7 cf       	rjmp	.-50     	; 0x992 <vfprintf+0x24>
 9c4:	91 2c       	mov	r9, r1
 9c6:	21 2c       	mov	r2, r1
 9c8:	31 2c       	mov	r3, r1
 9ca:	ff e1       	ldi	r31, 0x1F	; 31
 9cc:	f3 15       	cp	r31, r3
 9ce:	d8 f0       	brcs	.+54     	; 0xa06 <vfprintf+0x98>
 9d0:	8b 32       	cpi	r24, 0x2B	; 43
 9d2:	79 f0       	breq	.+30     	; 0x9f2 <vfprintf+0x84>
 9d4:	38 f4       	brcc	.+14     	; 0x9e4 <vfprintf+0x76>
 9d6:	80 32       	cpi	r24, 0x20	; 32
 9d8:	79 f0       	breq	.+30     	; 0x9f8 <vfprintf+0x8a>
 9da:	83 32       	cpi	r24, 0x23	; 35
 9dc:	a1 f4       	brne	.+40     	; 0xa06 <vfprintf+0x98>
 9de:	23 2d       	mov	r18, r3
 9e0:	20 61       	ori	r18, 0x10	; 16
 9e2:	1d c0       	rjmp	.+58     	; 0xa1e <vfprintf+0xb0>
 9e4:	8d 32       	cpi	r24, 0x2D	; 45
 9e6:	61 f0       	breq	.+24     	; 0xa00 <vfprintf+0x92>
 9e8:	80 33       	cpi	r24, 0x30	; 48
 9ea:	69 f4       	brne	.+26     	; 0xa06 <vfprintf+0x98>
 9ec:	23 2d       	mov	r18, r3
 9ee:	21 60       	ori	r18, 0x01	; 1
 9f0:	16 c0       	rjmp	.+44     	; 0xa1e <vfprintf+0xb0>
 9f2:	83 2d       	mov	r24, r3
 9f4:	82 60       	ori	r24, 0x02	; 2
 9f6:	38 2e       	mov	r3, r24
 9f8:	e3 2d       	mov	r30, r3
 9fa:	e4 60       	ori	r30, 0x04	; 4
 9fc:	3e 2e       	mov	r3, r30
 9fe:	2a c0       	rjmp	.+84     	; 0xa54 <vfprintf+0xe6>
 a00:	f3 2d       	mov	r31, r3
 a02:	f8 60       	ori	r31, 0x08	; 8
 a04:	1d c0       	rjmp	.+58     	; 0xa40 <vfprintf+0xd2>
 a06:	37 fc       	sbrc	r3, 7
 a08:	2d c0       	rjmp	.+90     	; 0xa64 <vfprintf+0xf6>
 a0a:	20 ed       	ldi	r18, 0xD0	; 208
 a0c:	28 0f       	add	r18, r24
 a0e:	2a 30       	cpi	r18, 0x0A	; 10
 a10:	40 f0       	brcs	.+16     	; 0xa22 <vfprintf+0xb4>
 a12:	8e 32       	cpi	r24, 0x2E	; 46
 a14:	b9 f4       	brne	.+46     	; 0xa44 <vfprintf+0xd6>
 a16:	36 fc       	sbrc	r3, 6
 a18:	81 c1       	rjmp	.+770    	; 0xd1c <vfprintf+0x3ae>
 a1a:	23 2d       	mov	r18, r3
 a1c:	20 64       	ori	r18, 0x40	; 64
 a1e:	32 2e       	mov	r3, r18
 a20:	19 c0       	rjmp	.+50     	; 0xa54 <vfprintf+0xe6>
 a22:	36 fe       	sbrs	r3, 6
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <vfprintf+0xc4>
 a26:	8a e0       	ldi	r24, 0x0A	; 10
 a28:	98 9e       	mul	r9, r24
 a2a:	20 0d       	add	r18, r0
 a2c:	11 24       	eor	r1, r1
 a2e:	92 2e       	mov	r9, r18
 a30:	11 c0       	rjmp	.+34     	; 0xa54 <vfprintf+0xe6>
 a32:	ea e0       	ldi	r30, 0x0A	; 10
 a34:	2e 9e       	mul	r2, r30
 a36:	20 0d       	add	r18, r0
 a38:	11 24       	eor	r1, r1
 a3a:	22 2e       	mov	r2, r18
 a3c:	f3 2d       	mov	r31, r3
 a3e:	f0 62       	ori	r31, 0x20	; 32
 a40:	3f 2e       	mov	r3, r31
 a42:	08 c0       	rjmp	.+16     	; 0xa54 <vfprintf+0xe6>
 a44:	8c 36       	cpi	r24, 0x6C	; 108
 a46:	21 f4       	brne	.+8      	; 0xa50 <vfprintf+0xe2>
 a48:	83 2d       	mov	r24, r3
 a4a:	80 68       	ori	r24, 0x80	; 128
 a4c:	38 2e       	mov	r3, r24
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <vfprintf+0xe6>
 a50:	88 36       	cpi	r24, 0x68	; 104
 a52:	41 f4       	brne	.+16     	; 0xa64 <vfprintf+0xf6>
 a54:	f7 01       	movw	r30, r14
 a56:	93 fd       	sbrc	r25, 3
 a58:	85 91       	lpm	r24, Z+
 a5a:	93 ff       	sbrs	r25, 3
 a5c:	81 91       	ld	r24, Z+
 a5e:	7f 01       	movw	r14, r30
 a60:	81 11       	cpse	r24, r1
 a62:	b3 cf       	rjmp	.-154    	; 0x9ca <vfprintf+0x5c>
 a64:	98 2f       	mov	r25, r24
 a66:	9f 7d       	andi	r25, 0xDF	; 223
 a68:	95 54       	subi	r25, 0x45	; 69
 a6a:	93 30       	cpi	r25, 0x03	; 3
 a6c:	28 f4       	brcc	.+10     	; 0xa78 <vfprintf+0x10a>
 a6e:	0c 5f       	subi	r16, 0xFC	; 252
 a70:	1f 4f       	sbci	r17, 0xFF	; 255
 a72:	9f e3       	ldi	r25, 0x3F	; 63
 a74:	99 83       	std	Y+1, r25	; 0x01
 a76:	0d c0       	rjmp	.+26     	; 0xa92 <vfprintf+0x124>
 a78:	83 36       	cpi	r24, 0x63	; 99
 a7a:	31 f0       	breq	.+12     	; 0xa88 <vfprintf+0x11a>
 a7c:	83 37       	cpi	r24, 0x73	; 115
 a7e:	71 f0       	breq	.+28     	; 0xa9c <vfprintf+0x12e>
 a80:	83 35       	cpi	r24, 0x53	; 83
 a82:	09 f0       	breq	.+2      	; 0xa86 <vfprintf+0x118>
 a84:	59 c0       	rjmp	.+178    	; 0xb38 <vfprintf+0x1ca>
 a86:	21 c0       	rjmp	.+66     	; 0xaca <vfprintf+0x15c>
 a88:	f8 01       	movw	r30, r16
 a8a:	80 81       	ld	r24, Z
 a8c:	89 83       	std	Y+1, r24	; 0x01
 a8e:	0e 5f       	subi	r16, 0xFE	; 254
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	88 24       	eor	r8, r8
 a94:	83 94       	inc	r8
 a96:	91 2c       	mov	r9, r1
 a98:	53 01       	movw	r10, r6
 a9a:	13 c0       	rjmp	.+38     	; 0xac2 <vfprintf+0x154>
 a9c:	28 01       	movw	r4, r16
 a9e:	f2 e0       	ldi	r31, 0x02	; 2
 aa0:	4f 0e       	add	r4, r31
 aa2:	51 1c       	adc	r5, r1
 aa4:	f8 01       	movw	r30, r16
 aa6:	a0 80       	ld	r10, Z
 aa8:	b1 80       	ldd	r11, Z+1	; 0x01
 aaa:	36 fe       	sbrs	r3, 6
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <vfprintf+0x146>
 aae:	69 2d       	mov	r22, r9
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0x14a>
 ab4:	6f ef       	ldi	r22, 0xFF	; 255
 ab6:	7f ef       	ldi	r23, 0xFF	; 255
 ab8:	c5 01       	movw	r24, r10
 aba:	0e 94 a3 06 	call	0xd46	; 0xd46 <strnlen>
 abe:	4c 01       	movw	r8, r24
 ac0:	82 01       	movw	r16, r4
 ac2:	f3 2d       	mov	r31, r3
 ac4:	ff 77       	andi	r31, 0x7F	; 127
 ac6:	3f 2e       	mov	r3, r31
 ac8:	16 c0       	rjmp	.+44     	; 0xaf6 <vfprintf+0x188>
 aca:	28 01       	movw	r4, r16
 acc:	22 e0       	ldi	r18, 0x02	; 2
 ace:	42 0e       	add	r4, r18
 ad0:	51 1c       	adc	r5, r1
 ad2:	f8 01       	movw	r30, r16
 ad4:	a0 80       	ld	r10, Z
 ad6:	b1 80       	ldd	r11, Z+1	; 0x01
 ad8:	36 fe       	sbrs	r3, 6
 ada:	03 c0       	rjmp	.+6      	; 0xae2 <vfprintf+0x174>
 adc:	69 2d       	mov	r22, r9
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0x178>
 ae2:	6f ef       	ldi	r22, 0xFF	; 255
 ae4:	7f ef       	ldi	r23, 0xFF	; 255
 ae6:	c5 01       	movw	r24, r10
 ae8:	0e 94 98 06 	call	0xd30	; 0xd30 <strnlen_P>
 aec:	4c 01       	movw	r8, r24
 aee:	f3 2d       	mov	r31, r3
 af0:	f0 68       	ori	r31, 0x80	; 128
 af2:	3f 2e       	mov	r3, r31
 af4:	82 01       	movw	r16, r4
 af6:	33 fc       	sbrc	r3, 3
 af8:	1b c0       	rjmp	.+54     	; 0xb30 <vfprintf+0x1c2>
 afa:	82 2d       	mov	r24, r2
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	88 16       	cp	r8, r24
 b00:	99 06       	cpc	r9, r25
 b02:	b0 f4       	brcc	.+44     	; 0xb30 <vfprintf+0x1c2>
 b04:	b6 01       	movw	r22, r12
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 b0e:	2a 94       	dec	r2
 b10:	f4 cf       	rjmp	.-24     	; 0xafa <vfprintf+0x18c>
 b12:	f5 01       	movw	r30, r10
 b14:	37 fc       	sbrc	r3, 7
 b16:	85 91       	lpm	r24, Z+
 b18:	37 fe       	sbrs	r3, 7
 b1a:	81 91       	ld	r24, Z+
 b1c:	5f 01       	movw	r10, r30
 b1e:	b6 01       	movw	r22, r12
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 b26:	21 10       	cpse	r2, r1
 b28:	2a 94       	dec	r2
 b2a:	21 e0       	ldi	r18, 0x01	; 1
 b2c:	82 1a       	sub	r8, r18
 b2e:	91 08       	sbc	r9, r1
 b30:	81 14       	cp	r8, r1
 b32:	91 04       	cpc	r9, r1
 b34:	71 f7       	brne	.-36     	; 0xb12 <vfprintf+0x1a4>
 b36:	e8 c0       	rjmp	.+464    	; 0xd08 <vfprintf+0x39a>
 b38:	84 36       	cpi	r24, 0x64	; 100
 b3a:	11 f0       	breq	.+4      	; 0xb40 <vfprintf+0x1d2>
 b3c:	89 36       	cpi	r24, 0x69	; 105
 b3e:	41 f5       	brne	.+80     	; 0xb90 <vfprintf+0x222>
 b40:	f8 01       	movw	r30, r16
 b42:	37 fe       	sbrs	r3, 7
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <vfprintf+0x1e6>
 b46:	60 81       	ld	r22, Z
 b48:	71 81       	ldd	r23, Z+1	; 0x01
 b4a:	82 81       	ldd	r24, Z+2	; 0x02
 b4c:	93 81       	ldd	r25, Z+3	; 0x03
 b4e:	0c 5f       	subi	r16, 0xFC	; 252
 b50:	1f 4f       	sbci	r17, 0xFF	; 255
 b52:	08 c0       	rjmp	.+16     	; 0xb64 <vfprintf+0x1f6>
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	07 2e       	mov	r0, r23
 b5a:	00 0c       	add	r0, r0
 b5c:	88 0b       	sbc	r24, r24
 b5e:	99 0b       	sbc	r25, r25
 b60:	0e 5f       	subi	r16, 0xFE	; 254
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	f3 2d       	mov	r31, r3
 b66:	ff 76       	andi	r31, 0x6F	; 111
 b68:	3f 2e       	mov	r3, r31
 b6a:	97 ff       	sbrs	r25, 7
 b6c:	09 c0       	rjmp	.+18     	; 0xb80 <vfprintf+0x212>
 b6e:	90 95       	com	r25
 b70:	80 95       	com	r24
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	f0 68       	ori	r31, 0x80	; 128
 b7e:	3f 2e       	mov	r3, r31
 b80:	2a e0       	ldi	r18, 0x0A	; 10
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	a3 01       	movw	r20, r6
 b86:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__ultoa_invert>
 b8a:	88 2e       	mov	r8, r24
 b8c:	86 18       	sub	r8, r6
 b8e:	45 c0       	rjmp	.+138    	; 0xc1a <vfprintf+0x2ac>
 b90:	85 37       	cpi	r24, 0x75	; 117
 b92:	31 f4       	brne	.+12     	; 0xba0 <vfprintf+0x232>
 b94:	23 2d       	mov	r18, r3
 b96:	2f 7e       	andi	r18, 0xEF	; 239
 b98:	b2 2e       	mov	r11, r18
 b9a:	2a e0       	ldi	r18, 0x0A	; 10
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	25 c0       	rjmp	.+74     	; 0xbea <vfprintf+0x27c>
 ba0:	93 2d       	mov	r25, r3
 ba2:	99 7f       	andi	r25, 0xF9	; 249
 ba4:	b9 2e       	mov	r11, r25
 ba6:	8f 36       	cpi	r24, 0x6F	; 111
 ba8:	c1 f0       	breq	.+48     	; 0xbda <vfprintf+0x26c>
 baa:	18 f4       	brcc	.+6      	; 0xbb2 <vfprintf+0x244>
 bac:	88 35       	cpi	r24, 0x58	; 88
 bae:	79 f0       	breq	.+30     	; 0xbce <vfprintf+0x260>
 bb0:	b5 c0       	rjmp	.+362    	; 0xd1c <vfprintf+0x3ae>
 bb2:	80 37       	cpi	r24, 0x70	; 112
 bb4:	19 f0       	breq	.+6      	; 0xbbc <vfprintf+0x24e>
 bb6:	88 37       	cpi	r24, 0x78	; 120
 bb8:	21 f0       	breq	.+8      	; 0xbc2 <vfprintf+0x254>
 bba:	b0 c0       	rjmp	.+352    	; 0xd1c <vfprintf+0x3ae>
 bbc:	e9 2f       	mov	r30, r25
 bbe:	e0 61       	ori	r30, 0x10	; 16
 bc0:	be 2e       	mov	r11, r30
 bc2:	b4 fe       	sbrs	r11, 4
 bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <vfprintf+0x272>
 bc6:	fb 2d       	mov	r31, r11
 bc8:	f4 60       	ori	r31, 0x04	; 4
 bca:	bf 2e       	mov	r11, r31
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <vfprintf+0x272>
 bce:	34 fe       	sbrs	r3, 4
 bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <vfprintf+0x278>
 bd2:	29 2f       	mov	r18, r25
 bd4:	26 60       	ori	r18, 0x06	; 6
 bd6:	b2 2e       	mov	r11, r18
 bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <vfprintf+0x278>
 bda:	28 e0       	ldi	r18, 0x08	; 8
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	05 c0       	rjmp	.+10     	; 0xbea <vfprintf+0x27c>
 be0:	20 e1       	ldi	r18, 0x10	; 16
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	02 c0       	rjmp	.+4      	; 0xbea <vfprintf+0x27c>
 be6:	20 e1       	ldi	r18, 0x10	; 16
 be8:	32 e0       	ldi	r19, 0x02	; 2
 bea:	f8 01       	movw	r30, r16
 bec:	b7 fe       	sbrs	r11, 7
 bee:	07 c0       	rjmp	.+14     	; 0xbfe <vfprintf+0x290>
 bf0:	60 81       	ld	r22, Z
 bf2:	71 81       	ldd	r23, Z+1	; 0x01
 bf4:	82 81       	ldd	r24, Z+2	; 0x02
 bf6:	93 81       	ldd	r25, Z+3	; 0x03
 bf8:	0c 5f       	subi	r16, 0xFC	; 252
 bfa:	1f 4f       	sbci	r17, 0xFF	; 255
 bfc:	06 c0       	rjmp	.+12     	; 0xc0a <vfprintf+0x29c>
 bfe:	60 81       	ld	r22, Z
 c00:	71 81       	ldd	r23, Z+1	; 0x01
 c02:	80 e0       	ldi	r24, 0x00	; 0
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	0e 5f       	subi	r16, 0xFE	; 254
 c08:	1f 4f       	sbci	r17, 0xFF	; 255
 c0a:	a3 01       	movw	r20, r6
 c0c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__ultoa_invert>
 c10:	88 2e       	mov	r8, r24
 c12:	86 18       	sub	r8, r6
 c14:	fb 2d       	mov	r31, r11
 c16:	ff 77       	andi	r31, 0x7F	; 127
 c18:	3f 2e       	mov	r3, r31
 c1a:	36 fe       	sbrs	r3, 6
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <vfprintf+0x2ca>
 c1e:	23 2d       	mov	r18, r3
 c20:	2e 7f       	andi	r18, 0xFE	; 254
 c22:	a2 2e       	mov	r10, r18
 c24:	89 14       	cp	r8, r9
 c26:	58 f4       	brcc	.+22     	; 0xc3e <vfprintf+0x2d0>
 c28:	34 fe       	sbrs	r3, 4
 c2a:	0b c0       	rjmp	.+22     	; 0xc42 <vfprintf+0x2d4>
 c2c:	32 fc       	sbrc	r3, 2
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x2d4>
 c30:	83 2d       	mov	r24, r3
 c32:	8e 7e       	andi	r24, 0xEE	; 238
 c34:	a8 2e       	mov	r10, r24
 c36:	05 c0       	rjmp	.+10     	; 0xc42 <vfprintf+0x2d4>
 c38:	b8 2c       	mov	r11, r8
 c3a:	a3 2c       	mov	r10, r3
 c3c:	03 c0       	rjmp	.+6      	; 0xc44 <vfprintf+0x2d6>
 c3e:	b8 2c       	mov	r11, r8
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <vfprintf+0x2d6>
 c42:	b9 2c       	mov	r11, r9
 c44:	a4 fe       	sbrs	r10, 4
 c46:	0f c0       	rjmp	.+30     	; 0xc66 <vfprintf+0x2f8>
 c48:	fe 01       	movw	r30, r28
 c4a:	e8 0d       	add	r30, r8
 c4c:	f1 1d       	adc	r31, r1
 c4e:	80 81       	ld	r24, Z
 c50:	80 33       	cpi	r24, 0x30	; 48
 c52:	21 f4       	brne	.+8      	; 0xc5c <vfprintf+0x2ee>
 c54:	9a 2d       	mov	r25, r10
 c56:	99 7e       	andi	r25, 0xE9	; 233
 c58:	a9 2e       	mov	r10, r25
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <vfprintf+0x300>
 c5c:	a2 fe       	sbrs	r10, 2
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x2fe>
 c60:	b3 94       	inc	r11
 c62:	b3 94       	inc	r11
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <vfprintf+0x300>
 c66:	8a 2d       	mov	r24, r10
 c68:	86 78       	andi	r24, 0x86	; 134
 c6a:	09 f0       	breq	.+2      	; 0xc6e <vfprintf+0x300>
 c6c:	b3 94       	inc	r11
 c6e:	a3 fc       	sbrc	r10, 3
 c70:	11 c0       	rjmp	.+34     	; 0xc94 <vfprintf+0x326>
 c72:	a0 fe       	sbrs	r10, 0
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <vfprintf+0x314>
 c76:	b2 14       	cp	r11, r2
 c78:	88 f4       	brcc	.+34     	; 0xc9c <vfprintf+0x32e>
 c7a:	28 0c       	add	r2, r8
 c7c:	92 2c       	mov	r9, r2
 c7e:	9b 18       	sub	r9, r11
 c80:	0e c0       	rjmp	.+28     	; 0xc9e <vfprintf+0x330>
 c82:	b2 14       	cp	r11, r2
 c84:	60 f4       	brcc	.+24     	; 0xc9e <vfprintf+0x330>
 c86:	b6 01       	movw	r22, r12
 c88:	80 e2       	ldi	r24, 0x20	; 32
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 c90:	b3 94       	inc	r11
 c92:	f7 cf       	rjmp	.-18     	; 0xc82 <vfprintf+0x314>
 c94:	b2 14       	cp	r11, r2
 c96:	18 f4       	brcc	.+6      	; 0xc9e <vfprintf+0x330>
 c98:	2b 18       	sub	r2, r11
 c9a:	02 c0       	rjmp	.+4      	; 0xca0 <vfprintf+0x332>
 c9c:	98 2c       	mov	r9, r8
 c9e:	21 2c       	mov	r2, r1
 ca0:	a4 fe       	sbrs	r10, 4
 ca2:	10 c0       	rjmp	.+32     	; 0xcc4 <vfprintf+0x356>
 ca4:	b6 01       	movw	r22, r12
 ca6:	80 e3       	ldi	r24, 0x30	; 48
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 cae:	a2 fe       	sbrs	r10, 2
 cb0:	17 c0       	rjmp	.+46     	; 0xce0 <vfprintf+0x372>
 cb2:	a1 fc       	sbrc	r10, 1
 cb4:	03 c0       	rjmp	.+6      	; 0xcbc <vfprintf+0x34e>
 cb6:	88 e7       	ldi	r24, 0x78	; 120
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x352>
 cbc:	88 e5       	ldi	r24, 0x58	; 88
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	b6 01       	movw	r22, r12
 cc2:	0c c0       	rjmp	.+24     	; 0xcdc <vfprintf+0x36e>
 cc4:	8a 2d       	mov	r24, r10
 cc6:	86 78       	andi	r24, 0x86	; 134
 cc8:	59 f0       	breq	.+22     	; 0xce0 <vfprintf+0x372>
 cca:	a1 fe       	sbrs	r10, 1
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x364>
 cce:	8b e2       	ldi	r24, 0x2B	; 43
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <vfprintf+0x366>
 cd2:	80 e2       	ldi	r24, 0x20	; 32
 cd4:	a7 fc       	sbrc	r10, 7
 cd6:	8d e2       	ldi	r24, 0x2D	; 45
 cd8:	b6 01       	movw	r22, r12
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 ce0:	89 14       	cp	r8, r9
 ce2:	38 f4       	brcc	.+14     	; 0xcf2 <vfprintf+0x384>
 ce4:	b6 01       	movw	r22, r12
 ce6:	80 e3       	ldi	r24, 0x30	; 48
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 cee:	9a 94       	dec	r9
 cf0:	f7 cf       	rjmp	.-18     	; 0xce0 <vfprintf+0x372>
 cf2:	8a 94       	dec	r8
 cf4:	f3 01       	movw	r30, r6
 cf6:	e8 0d       	add	r30, r8
 cf8:	f1 1d       	adc	r31, r1
 cfa:	80 81       	ld	r24, Z
 cfc:	b6 01       	movw	r22, r12
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 d04:	81 10       	cpse	r8, r1
 d06:	f5 cf       	rjmp	.-22     	; 0xcf2 <vfprintf+0x384>
 d08:	22 20       	and	r2, r2
 d0a:	09 f4       	brne	.+2      	; 0xd0e <vfprintf+0x3a0>
 d0c:	42 ce       	rjmp	.-892    	; 0x992 <vfprintf+0x24>
 d0e:	b6 01       	movw	r22, r12
 d10:	80 e2       	ldi	r24, 0x20	; 32
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 94 ae 06 	call	0xd5c	; 0xd5c <fputc>
 d18:	2a 94       	dec	r2
 d1a:	f6 cf       	rjmp	.-20     	; 0xd08 <vfprintf+0x39a>
 d1c:	f6 01       	movw	r30, r12
 d1e:	86 81       	ldd	r24, Z+6	; 0x06
 d20:	97 81       	ldd	r25, Z+7	; 0x07
 d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x3ba>
 d24:	8f ef       	ldi	r24, 0xFF	; 255
 d26:	9f ef       	ldi	r25, 0xFF	; 255
 d28:	2b 96       	adiw	r28, 0x0b	; 11
 d2a:	e2 e1       	ldi	r30, 0x12	; 18
 d2c:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__epilogue_restores__>

00000d30 <strnlen_P>:
 d30:	fc 01       	movw	r30, r24
 d32:	05 90       	lpm	r0, Z+
 d34:	61 50       	subi	r22, 0x01	; 1
 d36:	70 40       	sbci	r23, 0x00	; 0
 d38:	01 10       	cpse	r0, r1
 d3a:	d8 f7       	brcc	.-10     	; 0xd32 <strnlen_P+0x2>
 d3c:	80 95       	com	r24
 d3e:	90 95       	com	r25
 d40:	8e 0f       	add	r24, r30
 d42:	9f 1f       	adc	r25, r31
 d44:	08 95       	ret

00000d46 <strnlen>:
 d46:	fc 01       	movw	r30, r24
 d48:	61 50       	subi	r22, 0x01	; 1
 d4a:	70 40       	sbci	r23, 0x00	; 0
 d4c:	01 90       	ld	r0, Z+
 d4e:	01 10       	cpse	r0, r1
 d50:	d8 f7       	brcc	.-10     	; 0xd48 <strnlen+0x2>
 d52:	80 95       	com	r24
 d54:	90 95       	com	r25
 d56:	8e 0f       	add	r24, r30
 d58:	9f 1f       	adc	r25, r31
 d5a:	08 95       	ret

00000d5c <fputc>:
 d5c:	0f 93       	push	r16
 d5e:	1f 93       	push	r17
 d60:	cf 93       	push	r28
 d62:	df 93       	push	r29
 d64:	fb 01       	movw	r30, r22
 d66:	23 81       	ldd	r18, Z+3	; 0x03
 d68:	21 fd       	sbrc	r18, 1
 d6a:	03 c0       	rjmp	.+6      	; 0xd72 <fputc+0x16>
 d6c:	8f ef       	ldi	r24, 0xFF	; 255
 d6e:	9f ef       	ldi	r25, 0xFF	; 255
 d70:	2c c0       	rjmp	.+88     	; 0xdca <fputc+0x6e>
 d72:	22 ff       	sbrs	r18, 2
 d74:	16 c0       	rjmp	.+44     	; 0xda2 <fputc+0x46>
 d76:	46 81       	ldd	r20, Z+6	; 0x06
 d78:	57 81       	ldd	r21, Z+7	; 0x07
 d7a:	24 81       	ldd	r18, Z+4	; 0x04
 d7c:	35 81       	ldd	r19, Z+5	; 0x05
 d7e:	42 17       	cp	r20, r18
 d80:	53 07       	cpc	r21, r19
 d82:	44 f4       	brge	.+16     	; 0xd94 <fputc+0x38>
 d84:	a0 81       	ld	r26, Z
 d86:	b1 81       	ldd	r27, Z+1	; 0x01
 d88:	9d 01       	movw	r18, r26
 d8a:	2f 5f       	subi	r18, 0xFF	; 255
 d8c:	3f 4f       	sbci	r19, 0xFF	; 255
 d8e:	31 83       	std	Z+1, r19	; 0x01
 d90:	20 83       	st	Z, r18
 d92:	8c 93       	st	X, r24
 d94:	26 81       	ldd	r18, Z+6	; 0x06
 d96:	37 81       	ldd	r19, Z+7	; 0x07
 d98:	2f 5f       	subi	r18, 0xFF	; 255
 d9a:	3f 4f       	sbci	r19, 0xFF	; 255
 d9c:	37 83       	std	Z+7, r19	; 0x07
 d9e:	26 83       	std	Z+6, r18	; 0x06
 da0:	14 c0       	rjmp	.+40     	; 0xdca <fputc+0x6e>
 da2:	8b 01       	movw	r16, r22
 da4:	ec 01       	movw	r28, r24
 da6:	fb 01       	movw	r30, r22
 da8:	00 84       	ldd	r0, Z+8	; 0x08
 daa:	f1 85       	ldd	r31, Z+9	; 0x09
 dac:	e0 2d       	mov	r30, r0
 dae:	09 95       	icall
 db0:	89 2b       	or	r24, r25
 db2:	e1 f6       	brne	.-72     	; 0xd6c <fputc+0x10>
 db4:	d8 01       	movw	r26, r16
 db6:	16 96       	adiw	r26, 0x06	; 6
 db8:	8d 91       	ld	r24, X+
 dba:	9c 91       	ld	r25, X
 dbc:	17 97       	sbiw	r26, 0x07	; 7
 dbe:	01 96       	adiw	r24, 0x01	; 1
 dc0:	17 96       	adiw	r26, 0x07	; 7
 dc2:	9c 93       	st	X, r25
 dc4:	8e 93       	st	-X, r24
 dc6:	16 97       	sbiw	r26, 0x06	; 6
 dc8:	ce 01       	movw	r24, r28
 dca:	df 91       	pop	r29
 dcc:	cf 91       	pop	r28
 dce:	1f 91       	pop	r17
 dd0:	0f 91       	pop	r16
 dd2:	08 95       	ret

00000dd4 <__ultoa_invert>:
 dd4:	fa 01       	movw	r30, r20
 dd6:	aa 27       	eor	r26, r26
 dd8:	28 30       	cpi	r18, 0x08	; 8
 dda:	51 f1       	breq	.+84     	; 0xe30 <__ultoa_invert+0x5c>
 ddc:	20 31       	cpi	r18, 0x10	; 16
 dde:	81 f1       	breq	.+96     	; 0xe40 <__ultoa_invert+0x6c>
 de0:	e8 94       	clt
 de2:	6f 93       	push	r22
 de4:	6e 7f       	andi	r22, 0xFE	; 254
 de6:	6e 5f       	subi	r22, 0xFE	; 254
 de8:	7f 4f       	sbci	r23, 0xFF	; 255
 dea:	8f 4f       	sbci	r24, 0xFF	; 255
 dec:	9f 4f       	sbci	r25, 0xFF	; 255
 dee:	af 4f       	sbci	r26, 0xFF	; 255
 df0:	b1 e0       	ldi	r27, 0x01	; 1
 df2:	3e d0       	rcall	.+124    	; 0xe70 <__ultoa_invert+0x9c>
 df4:	b4 e0       	ldi	r27, 0x04	; 4
 df6:	3c d0       	rcall	.+120    	; 0xe70 <__ultoa_invert+0x9c>
 df8:	67 0f       	add	r22, r23
 dfa:	78 1f       	adc	r23, r24
 dfc:	89 1f       	adc	r24, r25
 dfe:	9a 1f       	adc	r25, r26
 e00:	a1 1d       	adc	r26, r1
 e02:	68 0f       	add	r22, r24
 e04:	79 1f       	adc	r23, r25
 e06:	8a 1f       	adc	r24, r26
 e08:	91 1d       	adc	r25, r1
 e0a:	a1 1d       	adc	r26, r1
 e0c:	6a 0f       	add	r22, r26
 e0e:	71 1d       	adc	r23, r1
 e10:	81 1d       	adc	r24, r1
 e12:	91 1d       	adc	r25, r1
 e14:	a1 1d       	adc	r26, r1
 e16:	20 d0       	rcall	.+64     	; 0xe58 <__ultoa_invert+0x84>
 e18:	09 f4       	brne	.+2      	; 0xe1c <__ultoa_invert+0x48>
 e1a:	68 94       	set
 e1c:	3f 91       	pop	r19
 e1e:	2a e0       	ldi	r18, 0x0A	; 10
 e20:	26 9f       	mul	r18, r22
 e22:	11 24       	eor	r1, r1
 e24:	30 19       	sub	r19, r0
 e26:	30 5d       	subi	r19, 0xD0	; 208
 e28:	31 93       	st	Z+, r19
 e2a:	de f6       	brtc	.-74     	; 0xde2 <__ultoa_invert+0xe>
 e2c:	cf 01       	movw	r24, r30
 e2e:	08 95       	ret
 e30:	46 2f       	mov	r20, r22
 e32:	47 70       	andi	r20, 0x07	; 7
 e34:	40 5d       	subi	r20, 0xD0	; 208
 e36:	41 93       	st	Z+, r20
 e38:	b3 e0       	ldi	r27, 0x03	; 3
 e3a:	0f d0       	rcall	.+30     	; 0xe5a <__ultoa_invert+0x86>
 e3c:	c9 f7       	brne	.-14     	; 0xe30 <__ultoa_invert+0x5c>
 e3e:	f6 cf       	rjmp	.-20     	; 0xe2c <__ultoa_invert+0x58>
 e40:	46 2f       	mov	r20, r22
 e42:	4f 70       	andi	r20, 0x0F	; 15
 e44:	40 5d       	subi	r20, 0xD0	; 208
 e46:	4a 33       	cpi	r20, 0x3A	; 58
 e48:	18 f0       	brcs	.+6      	; 0xe50 <__ultoa_invert+0x7c>
 e4a:	49 5d       	subi	r20, 0xD9	; 217
 e4c:	31 fd       	sbrc	r19, 1
 e4e:	40 52       	subi	r20, 0x20	; 32
 e50:	41 93       	st	Z+, r20
 e52:	02 d0       	rcall	.+4      	; 0xe58 <__ultoa_invert+0x84>
 e54:	a9 f7       	brne	.-22     	; 0xe40 <__ultoa_invert+0x6c>
 e56:	ea cf       	rjmp	.-44     	; 0xe2c <__ultoa_invert+0x58>
 e58:	b4 e0       	ldi	r27, 0x04	; 4
 e5a:	a6 95       	lsr	r26
 e5c:	97 95       	ror	r25
 e5e:	87 95       	ror	r24
 e60:	77 95       	ror	r23
 e62:	67 95       	ror	r22
 e64:	ba 95       	dec	r27
 e66:	c9 f7       	brne	.-14     	; 0xe5a <__ultoa_invert+0x86>
 e68:	00 97       	sbiw	r24, 0x00	; 0
 e6a:	61 05       	cpc	r22, r1
 e6c:	71 05       	cpc	r23, r1
 e6e:	08 95       	ret
 e70:	9b 01       	movw	r18, r22
 e72:	ac 01       	movw	r20, r24
 e74:	0a 2e       	mov	r0, r26
 e76:	06 94       	lsr	r0
 e78:	57 95       	ror	r21
 e7a:	47 95       	ror	r20
 e7c:	37 95       	ror	r19
 e7e:	27 95       	ror	r18
 e80:	ba 95       	dec	r27
 e82:	c9 f7       	brne	.-14     	; 0xe76 <__ultoa_invert+0xa2>
 e84:	62 0f       	add	r22, r18
 e86:	73 1f       	adc	r23, r19
 e88:	84 1f       	adc	r24, r20
 e8a:	95 1f       	adc	r25, r21
 e8c:	a0 1d       	adc	r26, r0
 e8e:	08 95       	ret

00000e90 <__prologue_saves__>:
 e90:	2f 92       	push	r2
 e92:	3f 92       	push	r3
 e94:	4f 92       	push	r4
 e96:	5f 92       	push	r5
 e98:	6f 92       	push	r6
 e9a:	7f 92       	push	r7
 e9c:	8f 92       	push	r8
 e9e:	9f 92       	push	r9
 ea0:	af 92       	push	r10
 ea2:	bf 92       	push	r11
 ea4:	cf 92       	push	r12
 ea6:	df 92       	push	r13
 ea8:	ef 92       	push	r14
 eaa:	ff 92       	push	r15
 eac:	0f 93       	push	r16
 eae:	1f 93       	push	r17
 eb0:	cf 93       	push	r28
 eb2:	df 93       	push	r29
 eb4:	cd b7       	in	r28, 0x3d	; 61
 eb6:	de b7       	in	r29, 0x3e	; 62
 eb8:	ca 1b       	sub	r28, r26
 eba:	db 0b       	sbc	r29, r27
 ebc:	0f b6       	in	r0, 0x3f	; 63
 ebe:	f8 94       	cli
 ec0:	de bf       	out	0x3e, r29	; 62
 ec2:	0f be       	out	0x3f, r0	; 63
 ec4:	cd bf       	out	0x3d, r28	; 61
 ec6:	09 94       	ijmp

00000ec8 <__epilogue_restores__>:
 ec8:	2a 88       	ldd	r2, Y+18	; 0x12
 eca:	39 88       	ldd	r3, Y+17	; 0x11
 ecc:	48 88       	ldd	r4, Y+16	; 0x10
 ece:	5f 84       	ldd	r5, Y+15	; 0x0f
 ed0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ed2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ed4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ed6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ed8:	aa 84       	ldd	r10, Y+10	; 0x0a
 eda:	b9 84       	ldd	r11, Y+9	; 0x09
 edc:	c8 84       	ldd	r12, Y+8	; 0x08
 ede:	df 80       	ldd	r13, Y+7	; 0x07
 ee0:	ee 80       	ldd	r14, Y+6	; 0x06
 ee2:	fd 80       	ldd	r15, Y+5	; 0x05
 ee4:	0c 81       	ldd	r16, Y+4	; 0x04
 ee6:	1b 81       	ldd	r17, Y+3	; 0x03
 ee8:	aa 81       	ldd	r26, Y+2	; 0x02
 eea:	b9 81       	ldd	r27, Y+1	; 0x01
 eec:	ce 0f       	add	r28, r30
 eee:	d1 1d       	adc	r29, r1
 ef0:	0f b6       	in	r0, 0x3f	; 63
 ef2:	f8 94       	cli
 ef4:	de bf       	out	0x3e, r29	; 62
 ef6:	0f be       	out	0x3f, r0	; 63
 ef8:	cd bf       	out	0x3d, r28	; 61
 efa:	ed 01       	movw	r28, r26
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
